(()=>{"use strict";var t={539:(t,n,e)=>{e.d(n,{Z:()=>s});var o=e(15),r=e.n(o),i=e(645),a=e.n(i)()(r());a.push([t.id,"@keyframes radio-select{0%{transform:scale(0, 0)}65%{transform:scale(1.1, 1.1)}100%{transform:scale(1, 1)}}.controls label.radio{margin:30px 0;display:block;position:relative;padding-left:30px;cursor:pointer}.controls input[type=radio]{height:1px;width:1px;opacity:0}.controls .outside{display:inline-block;position:absolute;left:0;top:50%;margin-top:-15px;width:30px;height:30px;border:2px solid #ccc;border-radius:50%;box-sizing:border-box;background:#f3f3f3}.controls .inside{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);display:inline-block;border-radius:50%;width:20px;height:20px;background:#444;left:3px;top:3px;transform:scale(0, 0)}.no-transforms .controls .inside{left:auto;top:auto;width:0;height:0}.controls input[type=radio]:checked+.outside .inside{animation:radio-select .1s linear;transform:scale(1, 1)}.no-transforms .controls input[type=radio]:checked+.outside .inside{width:20px;height:20px}@media only screen and (max-device-width: 812px){input[type=range]{margin:1rem 0}}body{margin:0;padding:0;font-family:sans-serif}body .container{margin:0;padding:0;width:100%;height:100%;overflow:hidden}.ui-wrapper{user-select:none;position:absolute;width:100%;height:100%;overflow:hidden}.ui-wrapper .ui-background{display:none;position:relative;width:100%;height:100%;background:rgba(0,0,0,0);z-index:0}.controls{position:absolute;margin:10px;padding:10px;border:3px dashed gray;background:rgba(128,128,128,.7);z-index:20;overflow-y:scroll}.controls::-webkit-scrollbar{display:none}.controls .button{background:gray;margin:10px;padding:10px 20px;display:inline-block;cursor:pointer;user-select:none;border:3px solid #666}.controls .button:hover{background:#d3d3d3}.controls .controls-section{margin:10px}.controls .controls-section .controls-section-title{margin-bottom:10px;font-weight:bold}.controls .controls-section label{user-select:none;cursor:pointer}.controls .controls-section input[type=range]{width:100%}.controls .controls-section #m90p2-control{display:none;margin-top:20px}.controls .controls-section input[value=m90p2]:checked~#m90p2-control{display:block}.mobile-ui-wrapper{z-index:10;display:none}@media only screen and (max-device-width: 812px){body{overflow-y:hidden}.controls{bottom:0;font-size:1rem}.controls .ui-buttons .ui-button{padding:20px 40px}.ui-wrapper .ui-background{display:block}#camo-control-panel{position:absolute;top:100vh;transition:.3s top ease-out .1s}#camo-control-panel.activated{top:0}.mobile-ui-wrapper{display:block;position:absolute;left:0;bottom:0;width:100%;box-sizing:border-box;padding:2rem 1rem}.mobile-ui-wrapper .icon-button-wrapper{width:100%;text-align:right}.mobile-ui-wrapper .icon-button{padding:10px;border-radius:50%;background:#9a9a9a;font-size:3rem;position:relative}.mobile-ui-wrapper .icon-button .fa-m8{margin:8px}.mobile-ui-wrapper .icon-button .fa-p2{padding:.2rem}.mobile-ui-wrapper #open-settings #open-settings-on{transition:.3s transform,opacity ease-in .1s;opacity:1}.mobile-ui-wrapper #open-settings #open-settings-on.fade-out{opacity:0;transform:rotateZ(180deg)}.mobile-ui-wrapper #open-settings #open-settings-off{transition:.3s transform,opacity ease-in .1s;position:absolute;opacity:1;left:1.1rem;top:.7rem}.mobile-ui-wrapper #open-settings #open-settings-off.fade-out{opacity:0;transform:rotateZ(-180deg)}.controls input[type=range]{width:300px;background:transparent}.controls input[type=range]{-webkit-appearance:none;width:100%}.controls input[type=range]::-webkit-slider-thumb{-webkit-appearance:none}.controls input[type=range]:focus{outline:none}.controls input[type=range]::-ms-track{width:100%;cursor:pointer;background:transparent;border-color:transparent;color:transparent}.controls input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;height:36px;width:36px;background:#555;cursor:pointer;margin-top:-12px}.controls input[type=range]::-moz-range-thumb{height:36px;width:36px;background:#555;cursor:pointer}.controls input[type=range]::-ms-thumb{height:36px;width:36px;background:#555;cursor:pointer}.controls input[type=range]::-webkit-slider-runnable-track{width:100%;height:12px;cursor:pointer;background:#ccc}.controls input[type=range]:active::-webkit-slider-runnable-track{background:#d6d6d6}.controls input[type=range]::-moz-range-track{width:100%;height:12px;cursor:pointer;background:#ccc}.controls input[type=range]::-ms-track{width:100%;height:12px;cursor:pointer;background:transparent;border-color:transparent;color:transparent}.controls input[type=range]::-ms-fill-lower{background:#ccc}.controls input[type=range]:focus::-ms-fill-lower{background:#ddd}.controls input[type=range]::-ms-fill-upper{background:#ccc}.controls input[type=range]:focus::-ms-fill-upper{background:#ddd}}","",{version:3,sources:["webpack://./src/style/input.scss","webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:["\n$almost-white: #F3F3F3;\n$almost-black: #444;\n$border: #CCCCCC;\n$left: 30px;\n$size: 30px;\n\n@keyframes radio-select {\n  0% {\n    transform: scale(0,0);\n  }\n  65% {\n    transform: scale(1.1,1.1);\n  }\n  100% {\n    transform: scale(1,1);\n  }\n}\n\n/* styles */\n@mixin centerer {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n.controls {\n  label.radio {\n    margin: 30px 0;\n    display: block;\n    position: relative;\n    padding-left: $left;\n    cursor: pointer;\n  }\n\n  input[type=radio] {\n    height: 1px;\n    width: 1px;\n    opacity: 0;\n  }\n\n  .outside {\n    display: inline-block;\n    position: absolute;\n    left: 0;\n    top: 50%;\n    margin-top: -($size / 2);\n    width: $size;\n    height: $size;\n    border: 2px solid $border;\n    border-radius: 50%;\n    box-sizing: border-box;\n    background: $almost-white;\n  }\n\n  .inside {\n    @include centerer;\n    display: inline-block;\n    border-radius: 50%;\n    width: ($size - 10px);\n    height: ($size - 10px);\n    background: $almost-black;\n    left: 3px;\n    top: 3px;\n    transform: scale(0,0);\n    .no-transforms & {\n      left: auto;\n      top: auto;\n      width: 0;\n      height: 0;\n    }\n  }\n\n  input[type=radio] {\n    &:checked {\n      + .outside .inside {\n        animation: radio-select 0.1s linear;\n        transform: scale(1,1);\n        .no-transforms & {\n          width: ($size - 10px);\n          height: ($size - 10px);\n        }\n      }\n    }\n    //for better accessibility\n    /*  &:focus, &:active {\n          + .outside {\n            border-color: $almost-black;\n          }\n        }*/\n  }\n}\n@media only screen\nand (max-device-width: 812px) {\n  input[type=range] {\n    margin: 1rem 0;\n  }\n\n}\n",'@import "style/input";\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n\n  .container {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n}\n\n.ui-wrapper {\n  user-select: none;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  .ui-background {\n    display: none;\n    position: relative;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0);\n    z-index: 0;\n  }\n}\n\n.controls {\n  position: absolute;\n  margin: 10px;\n  padding: 10px;\n  border: 3px dashed gray;\n  background: rgba(128, 128, 128, 0.7);\n  z-index: 20;\n  overflow-y: scroll;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  .button {\n    background: grey;\n    margin: 10px;\n    padding: 10px 20px;\n    display: inline-block;\n    cursor: pointer;\n    user-select: none;\n    border: 3px solid #666;\n\n    &:hover {\n      background: lightgray;\n    }\n  }\n\n  .controls-section {\n    //border: 3px dashed gray;\n    margin: 10px;\n\n    .controls-section-title {\n      margin-bottom: 10px;\n      font-weight: bold;\n    }\n\n    label {\n      user-select: none;\n      cursor: pointer;\n    }\n\n    input[type=range] {\n      width: 100%;\n    }\n\n    #m90p2-control {\n      display: none;\n      margin-top: 20px;\n    }\n\n    input[value="m90p2"]:checked ~ #m90p2-control\n    {\n      display: block;\n    }\n  }\n}\n\n.mobile-ui-wrapper {\n  z-index: 10;\n  display: none;\n}\n\n@media only screen\n  and (max-device-width: 812px) {\n  body {\n    overflow-y: hidden;\n  }\n\n  .controls {\n    bottom: 0;\n    font-size: 1rem;\n\n    .ui-buttons {\n      .ui-button {\n        padding: 20px 40px;\n      }\n    }\n  }\n\n  .ui-wrapper {\n    .ui-background {\n      display: block;\n    }\n  }\n\n  #camo-control-panel {\n    position: absolute;\n    top: 100vh;\n    transition: 0.3s top ease-out 0.1s;\n\n    &.activated {\n      top: 0;\n    }\n  }\n\n  .mobile-ui-wrapper {\n    display: block;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    box-sizing: border-box;\n    padding: 2rem 1rem;\n\n    .icon-button-wrapper {\n      width: 100%;\n      text-align: right;\n    }\n\n    .icon-button {\n      padding: 10px;\n      border-radius: 50%;\n      background: #9a9a9a;\n      font-size: 3rem;\n      position: relative;\n\n      .fa-m8 {\n        margin: 8px;\n      }\n      .fa-p2 {\n        padding: 0.2rem;\n      }\n    }\n\n    #open-settings {\n      #open-settings-on {\n        transition: 0.3s transform,opacity ease-in 0.1s;\n        opacity: 1;\n\n        &.fade-out {\n          opacity: 0;\n          transform: rotateZ(180deg);\n        }\n      }\n\n      #open-settings-off {\n        transition: 0.3s transform,opacity ease-in 0.1s;\n        position: absolute;\n        opacity: 1;\n        left: 1.1rem;\n        top: 0.7rem;\n\n        &.fade-out {\n          opacity: 0;\n          transform: rotateZ(-180deg);\n        }\n      }\n    }\n  }\n\n  .controls {\n    input[type="range"] {\n      width: 300px;\n      background: transparent;\n    }\n    /*###################################*/\n    /*###########Responsive Range########*/\n    /*###################################*/\n    /*##############Core Style###########*/\n\n    input[type="range"] {\n      -webkit-appearance: none;\n      width: 100%;\n    }\n\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n    }\n\n    input[type="range"]:focus {\n      outline: none;\n    }\n\n    input[type="range"]::-ms-track {\n      width: 100%;\n      cursor: pointer;\n      background: transparent;\n      border-color: transparent;\n      color: transparent;\n    }\n    /*#############Thumb##############*/\n\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n      margin-top: -12px;\n    }\n\n    input[type="range"]::-moz-range-thumb {\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n    }\n\n    input[type="range"]::-ms-thumb {\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n    }\n    /*#############Track##############*/\n\n    input[type="range"]::-webkit-slider-runnable-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: #ccc;\n    }\n\n    input[type="range"]:active::-webkit-slider-runnable-track {\n      background: #d6d6d6;\n    }\n\n    input[type="range"]::-moz-range-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: #ccc;\n    }\n\n    input[type="range"]::-ms-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: transparent;\n      border-color: transparent;\n      color: transparent;\n    }\n\n    input[type="range"]::-ms-fill-lower {\n      background: #ccc;\n    }\n\n    input[type="range"]:focus::-ms-fill-lower {\n      background: #ddd;\n    }\n\n    input[type="range"]::-ms-fill-upper {\n      background: #ccc;\n    }\n\n    input[type="range"]:focus::-ms-fill-upper {\n      background: #ddd;\n    }\n  }\n}\n\n'],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e=t(n);return n[2]?"@media ".concat(n[2]," {").concat(e,"}"):e})).join("")},n.i=function(t,e,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);o&&r[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),n.push(c))}},n}},15:t=>{function n(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,o=new Array(n);e<n;e++)o[e]=t[e];return o}t.exports=function(t){var e,o,r=(o=4,function(t){if(Array.isArray(t))return t}(e=t)||function(t,n){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var e=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(e.push(a.value),!n||e.length!==n);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==s.return||s.return()}finally{if(r)throw i}}return e}}(e,o)||function(t,e){if(t){if("string"==typeof t)return n(t,e);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?n(t,e):void 0}}(e,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),A="/*# ".concat(c," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(l).concat([A]).join("\n")}return[i].join("\n")}},379:(t,n,e)=>{var o,r=function(){var t={};return function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}t[n]=e}return t[n]}}(),i=[];function a(t){for(var n=-1,e=0;e<i.length;e++)if(i[e].identifier===t){n=e;break}return n}function s(t,n){for(var e={},o=[],r=0;r<t.length;r++){var s=t[r],c=n.base?s[0]+n.base:s[0],A=e[c]||0,l="".concat(c," ").concat(A);e[c]=A+1;var u=a(l),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(i[u].references++,i[u].updater(p)):i.push({identifier:l,updater:f(p,n),references:1}),o.push(l)}return o}function c(t){var n=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=e.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){n.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(n);else{var a=r(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}return n}var A,l=(A=[],function(t,n){return A[t]=n,A.filter(Boolean).join("\n")});function u(t,n,e,o){var r=e?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=l(n,r);else{var i=document.createTextNode(r),a=t.childNodes;a[n]&&t.removeChild(a[n]),a.length?t.insertBefore(i,a[n]):t.appendChild(i)}}function p(t,n,e){var o=e.css,r=e.media,i=e.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var d=null,h=0;function f(t,n){var e,o,r;if(n.singleton){var i=h++;e=d||(d=c(n)),o=u.bind(null,e,i,!1),r=u.bind(null,e,i,!0)}else e=c(n),o=p.bind(null,e,n),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)};return o(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap)return;o(t=n)}else r()}}t.exports=function(t,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var e=s(t=t||[],n);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<e.length;o++){var r=a(e[o]);i[r].references--}for(var c=s(t,n),A=0;A<e.length;A++){var l=a(e[A]);0===i[l].references&&(i[l].updater(),i.splice(l,1))}e=c}}}}},n={};function e(o){var r=n[o];if(void 0!==r)return r.exports;var i=n[o]={id:o,exports:{}};return t[o](i,i.exports,e),i.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t,n=function(){function t(){}return t.getInstance=function(){return void 0===this._instance&&(this._instance=new t),this._instance},t.getState=function(t,n){void 0===n&&(n=void 0);var e=this.getInstance()[t];return null==e?n:e},t.setState=function(n,e,o){var r=this;return void 0===o&&(o=!0),this.getInstance()[n]=e,o?(t._callbacks.forEach((function(t){t(r,n,e)})),e):e},t.flipState=function(n){var e=t.getState(n);if("boolean"==typeof e)return t.setState(n,!e);console.error("Failed to flip state due to invalid state type",e)},t.registerCallback=function(t){this._callbacks.add(t)},t.deregisterCallback=function(t){this._callbacks.delete(t)},t._callbacks=new Set,t}(),o="pattern",r="palette",i="num-points",a="animate",s="mouse-pos",c="camo-depth",A="mouse-interaction",l="enable-control-panel",u=function(){function t(t,n,e){this._id=t,this._name=n,this._colors=e}return Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this._name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"colors",{get:function(){return this._colors},enumerable:!1,configurable:!0}),t}(),p=function(){function t(){}return t.getPalettes=function(){return this._palettes},t.getBaseColorFromPalette=function(t){return this._palettes.get(t).colors[0]},t.colorGeneratorFromPalette=function(t){return this.colorGenerator(this._palettes.get(t).colors)},t.colorGenerator=function(t){var n,e,o,r;return function(t,n){var e,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],o=0}finally{e=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(i){switch(i.label){case 0:for(n=this.range(0,t.length-1),o=n.length;1<o;o--)e=Math.floor(Math.random()*o),r=[n[o-1],n[e]],n[e]=r[0],n[o-1]=r[1];o=0,i.label=1;case 1:return o<n.length?[4,t[n[o]]]:[3,4];case 2:i.sent(),i.label=3;case 3:return o++,[3,1];case 4:return[3,0];case 5:return[2]}}))},t.ctor=(t._palettes=new Map,t._palettes.set("green",new u("green","Green",["#6C7C52","#4A4F44","#3B3845","#B2B096"])),t._palettes.set("blue",new u("blue","Blue",["#3770DB","#172F5C","#7B9FE0","#32415C","#2A56A8"])),t._palettes.set("desert",new u("desert","Desert",["#B8A79B","#72625D","#A69887","#6D4C2D"])),t._palettes.set("orange",new u("orange","Orange",["#FF824D","#782400","#F74A00","#7A442C","#C73B00"])),t._palettes.set("uc1",new u("uc1","UC1",["#C4B9B5","#683A31","#4A5F56"])),t._palettes.set("uc2",new u("uc2","UC2",["#262527","#513A3E","#424B50"])),void t._palettes.set("bw",new u("bw","BW",["#FFFFFF","#000000"]))),t.range=function(t,n){return Array.from({length:n-t+1},(function(n,e){return e+t}))},t}(),d=function(){function t(t){this.ctx=t}return t.prototype.drawCircle=function(t){this.ctx.fillStyle=t.color,this.ctx.beginPath(),this.ctx.arc(t.center.x,t.center.y,t.radius,0,2*Math.PI,!0),this.ctx.closePath(),this.ctx.fill()},t.prototype.drawPolygon=function(t,n,e){var o=this;void 0===n&&(n=void 0),void 0===e&&(e=void 0),n?(this.ctx.fillStyle=n,this.ctx.strokeStyle=e||n):(this.ctx.fillStyle=t.color,this.ctx.strokeStyle=t.strokeColor||t.color),this.ctx.beginPath(),t.points.forEach((function(t,n){var e,r;0===n?(e=o.ctx).moveTo.apply(e,t.coord):(r=o.ctx).lineTo.apply(r,t.coord)})),this.ctx.closePath(),this.ctx.stroke(),this.ctx.fill()},t}(),h=function(){function t(t,n,e){void 0===e&&(e=null),this._x=t,this._y=n,this._index=e}return Object.defineProperty(t.prototype,"coord",{get:function(){return[this._x,this._y]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.x+","+this.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasIndex",{get:function(){return!!this._index},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this._index},enumerable:!1,configurable:!0}),t.prototype.dist=function(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))},t.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},t.prototype.div=function(t){return this.x/=t,this.y/=t,this},t.of=function(n,e){var o=n+","+e;return void 0===this._cache[o]&&(this._cache[o]=new t(n,e)),this._cache[o]},t.randomOf=function(n,e,o,r){return void 0===n&&(n=0),void 0===e&&(e=0),t.of(n+Math.random()*o,e+Math.random()*r)},t.randomPointsOf=function(n,e,o,r){for(var i=[],a=0;a<r;a++)i.push(2*Math.PI*Math.random());return i.sort(),i.map((function(r){return t.of(n+o*Math.cos(r),e+o*Math.sin(r))}))},t.randomPoints2Of=function(n,e,o,r){for(var i=[],a=2*Math.PI*Math.random(),s=0;s<r;s++){var c=1.5*Math.random()-.75,A=2*Math.PI/r*s+c;i.push(A+a)}return i.sort(),i.map((function(r){return t.of(n+o*Math.cos(r),e+o*Math.sin(r))}))},t._cache={},t}(),f=function(){function t(t,n,e){void 0===e&&(e=void 0),this._points=t,this._color=n,this._strokeColor=e,this._center=this._points.reduce((function(t,n,e,o){return new h(t.x+n.x,t.y+n.y)})).div(this._points.length),this._points.sort(this.comparePoints.bind(this)),this.setMinMax()}return Object.defineProperty(t.prototype,"points",{get:function(){return this._points},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},set:function(t){this._color=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeColor",{get:function(){return this._strokeColor},set:function(t){this._strokeColor=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.points.map((function(t){return t.key})).join("/")},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this.points.map((function(t){return t.keyIndex.toString()})).join("/")},enumerable:!1,configurable:!0}),t.prototype.equals=function(t){if(this.points.length!=t.points.length)return!1;for(var n=0;n<this.points.length;n++)if(!this.points[n].equals(t.points[n]))return!1;return!0},t.prototype.isContaining=function(t){var n=!1;if(t.x<this.minX||t.x>this.maxX||t.y<this.minY||t.y>this.maxY)return!1;for(var e=0,o=this.points.length-1;e<this.points.length;o=e++)this.points[e].y>t.y!=this.points[o].y>t.y&&t.x<(this.points[o].x-this.points[e].x)*(t.y-this.points[e].y)/(this.points[o].y-this.points[e].y)+this.points[e].x&&(n=!n);return n},t.prototype.setMinMax=function(){this.minX=this.points[0].x,this.maxX=this.points[0].x,this.minY=this.points[0].y,this.maxY=this.points[0].y;for(var t=1;t<this.points.length;t++){var n=this.points[t];this.minX=Math.min(n.x,this.minX),this.maxX=Math.max(n.x,this.maxX),this.minY=Math.min(n.y,this.minY),this.maxY=Math.max(n.y,this.maxY)}},t.prototype.comparePoints=function(t,n){var e=this;return t.equals(n)?0:function(){if(t.x-e._center.x>=0&&n.x-e._center.x<0)return!0;if(t.x-e._center.x<0&&n.x-e._center.x>=0)return!1;if(t.x-e._center.x==0&&n.x-e._center.x==0)return t.y-e._center.y>=0||n.y-e._center.y>=0?t.y>n.y:n.y>t.y;var o=(t.x-e._center.x)*(n.y-e._center.y)-(n.x-e._center.x)*(t.y-e._center.y);return o<0||!(o>0)&&(t.x-e._center.x)*(t.x-e._center.x)+(t.y-e._center.y)*(t.y-e._center.y)>(n.x-e._center.x)*(n.x-e._center.x)+(n.y-e._center.y)*(n.y-e._center.y)}()?1:-1},t}(),g=(t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)},function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}),C=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return g(e,t),e.prototype.startAnimate=function(){},e.prototype.stopAnimate=function(){},e.prototype.handleMouseMove=function(t){},e.prototype.draw=function(t,e){for(var o=p.colorGeneratorFromPalette(n.getState("palette","green")),r=500,i=Math.ceil(t/r),a=Math.ceil(e/r),s=0;s<i;s++)for(var c=0;c<a;c++){var A=r*s,l=r*c,u=o.next(),d=4;if((y=Math.random())>.66?d=5:y>.33&&(d=6),!(Math.random()>.8)){var g=new f(h.randomPoints2Of(A,l,r,d),u.value);this.drawPolygon(g)}}var C=200;for(i=Math.ceil(t/C),a=Math.ceil(e/C),s=0;s<i;s++)for(c=0;c<a;c++){var y;A=C*s,l=C*c,u=o.next(),d=4,(y=Math.random())>.66?d=5:y>.33&&(d=6),Math.random()>.8||(g=new f(h.randomPoints2Of(A,l,C,d),u.value),this.drawPolygon(g))}},e}(d),y=function(){function t(t,n,e){this._center=t,this._radius=n,this._color=e}return Object.defineProperty(t.prototype,"center",{get:function(){return this._center},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"radius",{get:function(){return this._radius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},enumerable:!1,configurable:!0}),t.prototype.isContaining=function(t){return this.center.dist(t)<this.radius},t}(),m=function(){function t(){}return t.range=function(t,n){return Array.from({length:n-t+1},(function(n,e){return e+t}))},t}(),b=function(){function t(t,n){t.hasIndex&&n.hasIndex?t.keyIndex<n.keyIndex?(this._start=t,this._end=n):(this._start=n,this._end=t):t.x<=n.x?(this._start=t,this._end=n):(this._start=n,this._end=t)}return Object.defineProperty(t.prototype,"start",{get:function(){return this._start},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.start.key+"/"+this.end.key},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this.start.keyIndex+"-"+this.end.keyIndex},enumerable:!1,configurable:!0}),t.prototype.equals=function(t){return this._start.equals(t._start)&&this._end.equals(t._end)||this._start.equals(t._end)&&this._end.equals(t._start)},t}(),x=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),v=function(t){function n(n,e){if(3!=n.length)throw Error("Triangle must have 3 points");return t.call(this,n,e)||this}return x(n,t),Object.defineProperty(n.prototype,"area",{get:function(){return this._area||(this._area=Math.abs(.5*(this.points[0].x*(this.points[1].y-this.points[2].y)+this.points[1].x*(this.points[2].y-this.points[0].y)+this.points[2].x*(this.points[0].y-this.points[1].y)))),this._area},enumerable:!1,configurable:!0}),Object.defineProperty(n.prototype,"edges",{get:function(){return this._edges||(this._edges=[],this._edges.push(new b(this.points[0],this.points[1])),this._edges.push(new b(this.points[1],this.points[2])),this._edges.push(new b(this.points[2],this.points[0]))),this._edges},enumerable:!1,configurable:!0}),n.prototype.getCircumcircle=function(){if(!this._circumcircle){var t=this.points[0].x,n=this.points[0].y,e=this.points[1].x,o=this.points[1].y,r=this.points[2].x,i=this.points[2].y,a=Math.pow(t,2),s=Math.pow(e,2),c=Math.pow(r,2),A=Math.pow(n,2),l=Math.pow(o,2),u=Math.pow(i,2),p=2*((e-t)*(i-n)-(o-n)*(r-t)),d=((i-n)*(s-a+l-A)+(n-o)*(c-a+u-A))/p,f=((t-r)*(s-a+l-A)+(e-t)*(c-a+u-A))/p,g=Math.sqrt(Math.pow(t-d,2)+Math.pow(n-f,2));this._circumcircle=new y(new h(d,f),g,"white")}return this._circumcircle},n}(f),w=function(){function t(){}return t.incrementAndGet=function(){return void 0===this._index&&(this._index=0),this._index++},t.reset=function(){this._index=0},t}(),k=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),_=function(t){function e(n){var e=t.call(this,n)||this;return e.activeTriangle=new Array(2),e}return k(e,t),e.prototype.draw=function(t,e){var o=this;this.points=[];var a=Math.ceil(t/500),s=Math.ceil(e/500);w.reset();for(var A=0;A<a+1;A++)for(var l=0;l<s+1;l++)this.points.push(new h(t/a*A,e/s*l,w.incrementAndGet()));var u=n.getState(i)-1;m.range(0,u).forEach((function(n,r){o.points.push(new h(Math.random()*t,Math.random()*e,w.incrementAndGet()))}));var d=Math.sqrt(t*t+e*e)/2,f=new h(t/2,e/2);this.drawCircle(new y(f,d,"rgba(1, 1, 1, 0)"));var g=new h(f.x-Math.sqrt(3)*d,f.y-d,w.incrementAndGet()),C=new h(f.x+Math.sqrt(3)*d,f.y-d,w.incrementAndGet()),b=new h(f.x,f.y+2*d,w.incrementAndGet()),x=new v([g,C,b],"pink"),k=p.colorGeneratorFromPalette(n.getState(r,"green"));k.next();var _=[x];for(this.points.forEach((function(t,n){var e=[];_.forEach((function(n,o){n.getCircumcircle().isContaining(t)&&(e=e.concat(n.edges),delete _[o])})),e.map((function(t,n){for(var o=0;o<e.length;o++)if(n!=o&&t.equals(e[o]))return null;return t})).filter((function(t){return t})).forEach((function(n){_.push(new v([n.start,n.end,t],k.next().value))}))})),this.triangles=_.filter((function(t){return t})),this.triangleAreas=this.triangles.map((function(t){return t.area})).sort((function(t,n){return t-n})),this.triangleAreaMedian=this.triangleAreas[Math.floor(this.triangleAreas.length/2)],this.buildEdgeMap(),this.visitMap={},A=0;A<this.triangles.length;A++){var E=this.triangles[A];this.visitMap[E.keyIndex]||this.makeCamouflage(E,k.next().value,n.getState(c))}},e.prototype.makeCamouflage=function(t,n,e,o){var r=this;if(void 0===o&&(o=null),o=o||e,t.color=n,this.visitMap[t.keyIndex]=n,0!=e){var i=e===o,a=[];t.edges.forEach((function(s,c){var A=r.edgeMap[s.keyIndex].filter((function(n){return!n.equals(t)}))[0];A&&a.push(A),A&&!r.visitMap[A.keyIndex]&&(i=!1,(A.area<5e3||Math.random()<e/o)&&r.makeCamouflage(A,n,e-1,o))})),i?0==a.length?console.error("Failed to find adjacentTriangle"):(t.color=this.visitMap[a[0].keyIndex],this.drawPolygon(t,t.color,t.color)):this.drawPolygon(t,n)}else this.drawPolygon(t,n)},e.prototype.startAnimate=function(){this.interval=setInterval(this.animate.bind(this),50)},e.prototype.stopAnimate=function(){clearInterval(this.interval)},e.prototype.animate=function(){var t=this;this.points.forEach((function(n,e){t.points[e].x+=4*(Math.random()-.5),t.points[e].y+=4*(Math.random()-.5)})),this.triangles.forEach((function(n){t.isActiveTriangle(n)?t.drawPolygon(n,"red"):t.adjacentPolygons&&t.adjacentPolygons[n.keyIndex]?t.drawPolygon(n,"blue"):t.drawPolygon(n)}))},e.prototype.handleMouseMove=function(t){var e=this;n.getState(A)&&(this.triangles.forEach((function(o){o.isContaining(t)&&n.getState(A)?(e.updateActiveTriangle(o),e.drawPolygon(o,"red")):e.drawPolygon(o)})),Object.keys(this.adjacentPolygons).forEach((function(t){e.drawPolygon(e.adjacentPolygons[t],"blue")})))},e.prototype.buildEdgeMap=function(){var t=this;this.edgeMap={},this.triangles.forEach((function(n){n.edges.forEach((function(e){void 0===t.edgeMap[e.keyIndex]&&(t.edgeMap[e.keyIndex]=[]),t.edgeMap[e.keyIndex].push(n)})),t.drawPolygon(n)}))},e.prototype.updateActiveTriangle=function(t){var n=this;if(!this.isActiveTriangle(t)){this.activeTriangle[1]=this.activeTriangle[0],this.activeTriangle[0]=t,this.adjacentPolygons={};for(var e=0;e<t.edges.length;e++){var o=this.edgeMap[t.edges[e].keyIndex];o&&o.length>1&&o.forEach((function(e){e.equals(t)||(n.adjacentPolygons[e.keyIndex]=e)}))}}},e.prototype.isActiveTriangle=function(t){return this.activeTriangle[0]&&this.activeTriangle[0].equals(t)},e}(d),E=function(){function t(t){void 0===t&&(t="#6C7C52"),this._baseCol=t,this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.logics={m90p1:new C(this.ctx),m90p2:new _(this.ctx)},window.onresize=this.redrawHandler.bind(this),n.registerCallback(this.redrawHandler.bind(this)),this.redrawHandler(null,null,null)}return t.prototype.reDraw=function(){this.ctx.fillStyle=p.getBaseColorFromPalette(n.getState(r)),this.ctx.fillRect(0,0,this.width,this.height),this.draw()},t.prototype.redrawHandler=function(t,e,o){var i=this.logics[n.getState("pattern")];e===a?o?i.startAnimate():i.stopAnimate():e===s?i.handleMouseMove(o):e===A||e===l||(this.width=document.documentElement.clientWidth,this.height=document.documentElement.clientHeight,this.canvas.setAttribute("width",this.width.toString()),this.canvas.setAttribute("height",this.height.toString()),this.ctx.fillStyle=p.getBaseColorFromPalette(n.getState(r)),this.ctx.fillRect(0,0,this.width,this.height),this.draw())},t.prototype.draw=function(){this.logics[n.getState("pattern")].draw(this.width,this.height)},t}(),B=e(379),S=e.n(B),M=e(539);S()(M.Z,{insert:"head",singleton:!1}),M.Z.locals;var P=function(){function t(){this._state={}}return t.prototype.getState=function(t){return this._state[t]},t.prototype.setState=function(t,n,e){void 0===e&&(e=!0),this._state[t]=n,e&&this.render()},t}(),O=function(){var t=function(n,e){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])})(n,e)};return function(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function o(){this.constructor=n}t(n,e),n.prototype=null===e?Object.create(e):(o.prototype=e.prototype,new o)}}(),I=function(t){function n(){var n=t.call(this)||this;return n.templateSrc='\n<label class="radio">\n    <input name="color-palette" type="radio" value="">\n    <span class="outside"><span class="inside"></span></span>\n    <span class="palette-name"></span>\n</label>',n.template=document.createElement("template"),n.template.innerHTML=n.templateSrc.trim(),n.setState("default-palette",p.getPalettes()),n}return O(n,t),n.prototype.render=function(){var t=this,n=document.createElement("div"),e=this.getState("default-palette"),o=!0;if(!e)throw Error("Failed to get color palette properly");return e.forEach((function(e){var r=t.template.content.cloneNode(!0),i=r.querySelector("input[type=radio]");i.value=e.id,o&&(i.checked=o,o=!1),r.querySelector(".palette-name").textContent=e.name,n.appendChild(r)})),n},n}(P),j=function(){function t(){this.colorPaletteComponent=new I}return t.prototype.initialize=function(){var t=document.getElementById("color-palette-list"),e=this.colorPaletteComponent.render();t.appendChild(e);var u=document.getElementById("canvas");document.getElementById("download").onclick=function(t){var n=document.createElement("a");document.body.appendChild(n),n.setAttribute("download","camo-pattern.png"),n.setAttribute("href",u.toDataURL("image/png").replace("image/png","image/octet-stream")),n.click(),document.body.removeChild(n)},document.getElementById("refresh").onclick=function(){v.reDraw()};var p=document.getElementById("controls-values");n.setState(o,p["camo-pattern"].value),n.setState(r,p["color-palette"].value),n.setState(i,p["num-points"].value),n.setState(c,p["camo-depth"].value),n.setState(a,!1),n.setState(A,!1),n.setState(l,!0),document.querySelectorAll("#camo-pattern input[type=radio]").forEach((function(t){t.onclick=function(){n.getState(o)!=t.value&&n.setState(o,t.value)}}));var d=document.querySelector("#camo-pattern input[name=num-points]"),f=document.getElementById("num-points-val");d.onchange=function(t){f.textContent=d.value,n.getState(i)!=d.value&&n.setState(i,d.value)};var g=document.querySelector("#camo-pattern input[name=camo-depth]"),C=document.getElementById("camo-depth-val");g.onchange=function(t){C.textContent=g.value,n.getState(c)!=g.value&&n.setState(c,g.value)},document.getElementById("start-animate").onclick=function(t){!0!==n.getState(a)&&n.setState(a,!0)},document.getElementById("stop-animate").onclick=function(t){!1!==n.getState(a)&&n.setState(a,!1)},document.querySelectorAll("#color-palette input[type=radio]").forEach((function(t){t.onclick=function(){n.getState(r)!=t.value&&n.setState(r,t.value)}})),window.onmousemove=function(t){n.getState(s)&&n.getState(s).equals(h.of(t.clientX,t.clientY))||n.setState(s,h.of(t.clientX,t.clientY))},document.getElementById("tap-to-refresh").ontouchend=function(t){v.reDraw(),n.setState(A,!1)};var y=document.getElementById("camo-control-panel"),m=document.getElementById("open-settings"),b=document.getElementById("open-settings-on"),x=document.getElementById("open-settings-off");m.ontouchend=function(t){y.classList.toggle("activated"),b.classList.toggle("fade-out"),x.classList.toggle("fade-out")},window.onkeydown=function(t){if("m"===t.key)n.flipState(A);else if("c"===t.key){var e=n.flipState(l);document.getElementById("camo-control-panel").style.display=e?"block":"none"}else"r"===t.key?v.reDraw():"a"===t.key&&n.flipState(a)};var v=new E},t}();window.onload=function(){(new j).initialize()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,