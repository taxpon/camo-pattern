(()=>{"use strict";var t={539:(t,e,n)=>{n.d(e,{Z:()=>s});var o=n(15),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([t.id,"@keyframes radio-select{0%{transform:scale(0, 0)}65%{transform:scale(1.1, 1.1)}100%{transform:scale(1, 1)}}.controls label.radio{margin:1rem 0;display:block;position:relative;padding-left:30px;cursor:pointer;float:left}.controls input[type=radio]{height:1px;width:1px;opacity:0}.controls .outside{display:inline-block;position:absolute;left:0;top:50%;margin-top:-15px;width:30px;height:30px;border:2px solid #ccc;border-radius:50%;box-sizing:border-box;background:#f3f3f3}.controls .inside{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);display:inline-block;border-radius:50%;width:20px;height:20px;background:#444;left:3px;top:3px;transform:scale(0, 0)}.no-transforms .controls .inside{left:auto;top:auto;width:0;height:0}.controls input[type=radio]:checked+.outside .inside{animation:radio-select .1s linear;transform:scale(1, 1)}.no-transforms .controls input[type=radio]:checked+.outside .inside{width:20px;height:20px}.controls input[type=radio]:focus+.outside,.controls input[type=radio]:active+.outside{border-color:#444}.controls .trash-button{float:left;margin:1rem;cursor:pointer}.controls .trash-button:hover{color:#2d2d2d}@media only screen and (max-device-width: 812px){input[type=range]{margin:1rem 0}}body{margin:0;padding:0;font-family:sans-serif}body .container{margin:0;padding:0;width:100%;height:100%;overflow:hidden}.ui-wrapper{user-select:none;position:absolute;width:100%;height:100%;overflow:hidden}.ui-wrapper .ui-background{display:none;position:relative;width:100%;height:100%;background:rgba(0,0,0,0);z-index:0}.controls{position:absolute;margin:10px;padding:10px;border:3px dashed gray;background:rgba(128,128,128,.7);z-index:20;overflow-y:scroll}.controls::-webkit-scrollbar{display:none}.controls .button{background:gray;margin:10px;padding:10px 20px;display:inline-block;cursor:pointer;user-select:none;border:3px solid #666}.controls .button:hover{background:#d3d3d3}.controls .controls-section{margin:10px}.controls .controls-section .controls-section-title{margin-bottom:10px;font-weight:bold}.controls .controls-section label{user-select:none;cursor:pointer}.controls .controls-section input[type=range]{width:100%}.controls .controls-section #m90p2-control{display:none;margin-top:20px}.controls .controls-section input[value=m90p2]:checked~#m90p2-control{display:block}.mobile-ui-wrapper{z-index:10;display:none}@media only screen and (max-device-width: 812px){body{overflow-y:hidden}.controls{bottom:0;font-size:1rem}.controls .ui-buttons .ui-button{padding:20px 40px}.ui-wrapper .ui-background{display:block}#camo-control-panel{position:absolute;top:100vh;transition:.3s top ease-out .1s}#camo-control-panel.activated{top:0}.mobile-ui-wrapper{display:block;position:absolute;left:0;bottom:0;width:100%;box-sizing:border-box;padding:2rem 1rem}.mobile-ui-wrapper .icon-button-wrapper{width:100%;text-align:right}.mobile-ui-wrapper .icon-button{padding:10px;border-radius:50%;background:#9a9a9a;font-size:3rem;position:relative}.mobile-ui-wrapper .icon-button .fa-m8{margin:8px}.mobile-ui-wrapper .icon-button .fa-p2{padding:.2rem}.mobile-ui-wrapper #open-settings #open-settings-on{transition:.3s transform,opacity ease-in .1s;opacity:1}.mobile-ui-wrapper #open-settings #open-settings-on.fade-out{opacity:0;transform:rotateZ(180deg)}.mobile-ui-wrapper #open-settings #open-settings-off{transition:.3s transform,opacity ease-in .1s;position:absolute;opacity:1;left:1.1rem;top:.7rem}.mobile-ui-wrapper #open-settings #open-settings-off.fade-out{opacity:0;transform:rotateZ(-180deg)}.controls input[type=range]{width:300px;background:transparent}.controls input[type=range]{-webkit-appearance:none;width:100%}.controls input[type=range]::-webkit-slider-thumb{-webkit-appearance:none}.controls input[type=range]:focus{outline:none}.controls input[type=range]::-ms-track{width:100%;cursor:pointer;background:transparent;border-color:transparent;color:transparent}.controls input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;height:36px;width:36px;background:#555;cursor:pointer;margin-top:-12px}.controls input[type=range]::-moz-range-thumb{height:36px;width:36px;background:#555;cursor:pointer}.controls input[type=range]::-ms-thumb{height:36px;width:36px;background:#555;cursor:pointer}.controls input[type=range]::-webkit-slider-runnable-track{width:100%;height:12px;cursor:pointer;background:#ccc}.controls input[type=range]:active::-webkit-slider-runnable-track{background:#d6d6d6}.controls input[type=range]::-moz-range-track{width:100%;height:12px;cursor:pointer;background:#ccc}.controls input[type=range]::-ms-track{width:100%;height:12px;cursor:pointer;background:transparent;border-color:transparent;color:transparent}.controls input[type=range]::-ms-fill-lower{background:#ccc}.controls input[type=range]:focus::-ms-fill-lower{background:#ddd}.controls input[type=range]::-ms-fill-upper{background:#ccc}.controls input[type=range]:focus::-ms-fill-upper{background:#ddd}}","",{version:3,sources:["webpack://./src/style/input.scss","webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:["\n$almost-white: #F3F3F3;\n$almost-black: #444;\n$border: #CCCCCC;\n$left: 30px;\n$size: 30px;\n\n@keyframes radio-select {\n  0% {\n    transform: scale(0,0);\n  }\n  65% {\n    transform: scale(1.1,1.1);\n  }\n  100% {\n    transform: scale(1,1);\n  }\n}\n\n/* styles */\n@mixin centerer {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n.controls {\n  label.radio {\n    margin: 1rem 0;\n    display: block;\n    position: relative;\n    padding-left: $left;\n    cursor: pointer;\n    float: left;\n  }\n\n  input[type=radio] {\n    height: 1px;\n    width: 1px;\n    opacity: 0;\n  }\n\n  .outside {\n    display: inline-block;\n    position: absolute;\n    left: 0;\n    top: 50%;\n    margin-top: -($size / 2);\n    width: $size;\n    height: $size;\n    border: 2px solid $border;\n    border-radius: 50%;\n    box-sizing: border-box;\n    background: $almost-white;\n  }\n\n  .inside {\n    @include centerer;\n    display: inline-block;\n    border-radius: 50%;\n    width: ($size - 10px);\n    height: ($size - 10px);\n    background: $almost-black;\n    left: 3px;\n    top: 3px;\n    transform: scale(0,0);\n    .no-transforms & {\n      left: auto;\n      top: auto;\n      width: 0;\n      height: 0;\n    }\n  }\n\n  input[type=radio] {\n    &:checked {\n      + .outside .inside {\n        animation: radio-select 0.1s linear;\n        transform: scale(1,1);\n        .no-transforms & {\n          width: ($size - 10px);\n          height: ($size - 10px);\n        }\n      }\n    }\n\n    &:focus, &:active {\n          + .outside {\n          border-color: $almost-black;\n        }\n      }\n  }\n\n  .trash-button {\n    float: left;\n    margin: 1rem;\n    cursor: pointer;\n\n    &:hover {\n      color: #2d2d2d;\n    }\n  }\n}\n@media only screen\nand (max-device-width: 812px) {\n  input[type=range] {\n    margin: 1rem 0;\n  }\n\n}\n",'@import "style/input";\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n\n  .container {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n}\n\n.ui-wrapper {\n  user-select: none;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  .ui-background {\n    display: none;\n    position: relative;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0);\n    z-index: 0;\n  }\n}\n\n.controls {\n  position: absolute;\n  margin: 10px;\n  padding: 10px;\n  border: 3px dashed gray;\n  background: rgba(128, 128, 128, 0.7);\n  z-index: 20;\n  overflow-y: scroll;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  .button {\n    background: grey;\n    margin: 10px;\n    padding: 10px 20px;\n    display: inline-block;\n    cursor: pointer;\n    user-select: none;\n    border: 3px solid #666;\n\n    &:hover {\n      background: lightgray;\n    }\n  }\n\n  .controls-section {\n    //border: 3px dashed gray;\n    margin: 10px;\n\n    .controls-section-title {\n      margin-bottom: 10px;\n      font-weight: bold;\n    }\n\n    label {\n      user-select: none;\n      cursor: pointer;\n    }\n\n    input[type=range] {\n      width: 100%;\n    }\n\n    #m90p2-control {\n      display: none;\n      margin-top: 20px;\n    }\n\n    input[value="m90p2"]:checked ~ #m90p2-control\n    {\n      display: block;\n    }\n  }\n}\n\n.mobile-ui-wrapper {\n  z-index: 10;\n  display: none;\n}\n\n@media only screen\n  and (max-device-width: 812px) {\n  body {\n    overflow-y: hidden;\n  }\n\n  .controls {\n    bottom: 0;\n    font-size: 1rem;\n\n    .ui-buttons {\n      .ui-button {\n        padding: 20px 40px;\n      }\n    }\n  }\n\n  .ui-wrapper {\n    .ui-background {\n      display: block;\n    }\n  }\n\n  #camo-control-panel {\n    position: absolute;\n    top: 100vh;\n    transition: 0.3s top ease-out 0.1s;\n\n    &.activated {\n      top: 0;\n    }\n  }\n\n  .mobile-ui-wrapper {\n    display: block;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    box-sizing: border-box;\n    padding: 2rem 1rem;\n\n    .icon-button-wrapper {\n      width: 100%;\n      text-align: right;\n    }\n\n    .icon-button {\n      padding: 10px;\n      border-radius: 50%;\n      background: #9a9a9a;\n      font-size: 3rem;\n      position: relative;\n\n      .fa-m8 {\n        margin: 8px;\n      }\n      .fa-p2 {\n        padding: 0.2rem;\n      }\n    }\n\n    #open-settings {\n      #open-settings-on {\n        transition: 0.3s transform,opacity ease-in 0.1s;\n        opacity: 1;\n\n        &.fade-out {\n          opacity: 0;\n          transform: rotateZ(180deg);\n        }\n      }\n\n      #open-settings-off {\n        transition: 0.3s transform,opacity ease-in 0.1s;\n        position: absolute;\n        opacity: 1;\n        left: 1.1rem;\n        top: 0.7rem;\n\n        &.fade-out {\n          opacity: 0;\n          transform: rotateZ(-180deg);\n        }\n      }\n    }\n  }\n\n  .controls {\n    input[type="range"] {\n      width: 300px;\n      background: transparent;\n    }\n    /*###################################*/\n    /*###########Responsive Range########*/\n    /*###################################*/\n    /*##############Core Style###########*/\n\n    input[type="range"] {\n      -webkit-appearance: none;\n      width: 100%;\n    }\n\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n    }\n\n    input[type="range"]:focus {\n      outline: none;\n    }\n\n    input[type="range"]::-ms-track {\n      width: 100%;\n      cursor: pointer;\n      background: transparent;\n      border-color: transparent;\n      color: transparent;\n    }\n    /*#############Thumb##############*/\n\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n      margin-top: -12px;\n    }\n\n    input[type="range"]::-moz-range-thumb {\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n    }\n\n    input[type="range"]::-ms-thumb {\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n    }\n    /*#############Track##############*/\n\n    input[type="range"]::-webkit-slider-runnable-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: #ccc;\n    }\n\n    input[type="range"]:active::-webkit-slider-runnable-track {\n      background: #d6d6d6;\n    }\n\n    input[type="range"]::-moz-range-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: #ccc;\n    }\n\n    input[type="range"]::-ms-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: transparent;\n      border-color: transparent;\n      color: transparent;\n    }\n\n    input[type="range"]::-ms-fill-lower {\n      background: #ccc;\n    }\n\n    input[type="range"]:focus::-ms-fill-lower {\n      background: #ddd;\n    }\n\n    input[type="range"]::-ms-fill-upper {\n      background: #ccc;\n    }\n\n    input[type="range"]:focus::-ms-fill-upper {\n      background: #ddd;\n    }\n  }\n}\n\n'],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==s.return||s.return()}finally{if(r)throw i}}return n}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),u=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([l]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var o,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function a(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},o=[],r=0;r<t.length;r++){var s=t[r],c=e.base?s[0]+e.base:s[0],l=n[c]||0,u="".concat(c," ").concat(l);n[c]=l+1;var A=a(u),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(i[A].references++,i[A].updater(p)):i.push({identifier:u,updater:f(p,e),references:1}),o.push(u)}return o}function c(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var a=r(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var l,u=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function A(t,e,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=u(e,r);else{var i=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function p(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var d=null,h=0;function f(t,e){var n,o,r;if(e.singleton){var i=h++;n=d||(d=c(e)),o=A.bind(null,n,i,!1),r=A.bind(null,n,i,!0)}else n=c(e),o=p.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var r=a(n[o]);i[r].references--}for(var c=s(t,e),l=0;l<n.length;l++){var u=a(n[l]);0===i[u].references&&(i[u].updater(),i.splice(u,1))}n=c}}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t,e=function(){function t(){}return t.getInstance=function(){return void 0===this._instance&&(this._instance=new t),this._instance},t.getState=function(t,e){void 0===e&&(e=void 0);var n=this.getInstance()[t];return null==n?e:n},t.setState=function(e,n,o){var r=this;return void 0===o&&(o=!0),this.getInstance()[e]=n,o?(t._callbacks.forEach((function(t){t(r,e,n)})),n):n},t.flipState=function(e){var n=t.getState(e);if("boolean"==typeof n)return t.setState(e,!n);console.error("Failed to flip state due to invalid state type",n)},t.registerCallback=function(t){this._callbacks.add(t)},t.deregisterCallback=function(t){this._callbacks.delete(t)},t._callbacks=new Set,t}(),o="palette",r="num-points",i="animate",a="mouse-pos",s="camo-depth",c="mouse-interaction",l="enable-control-panel",u=function(){function t(){}return t.getInstance=function(){return void 0===this._instance&&(this._instance=new t),this._instance},t.emit=function(t){this._callbacks[t].forEach((function(e){e(t)}))},t.register=function(t,e){void 0===this._callbacks[t]&&(this._callbacks[t]=new Set),this._callbacks[t].add(e)},t.deregister=function(t,e){this._callbacks[t].delete(e)},t._callbacks={},t}(),A="color_updated",p=function(){function t(t,e,n){this._id=t,this._name=e,this._colors=n}return Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this._name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"colors",{get:function(){return this._colors},enumerable:!1,configurable:!0}),t}(),d=function(){function t(){}return t.loadDefaultPalettes=function(){t._defaultPalettes=new Map,t._defaultPalettes.set("green",new p("green","Green",["#6C7C52","#4A4F44","#3B3845","#B2B096"])),t._defaultPalettes.set("blue",new p("blue","Blue",["#3770DB","#172F5C","#7B9FE0","#32415C","#2A56A8"])),t._defaultPalettes.set("desert",new p("desert","Desert",["#B8A79B","#72625D","#A69887","#6D4C2D"])),t._defaultPalettes.set("orange",new p("orange","Orange",["#FF824D","#782400","#F74A00","#7A442C","#C73B00"])),t._defaultPalettes.set("uc1",new p("uc1","UC1",["#C4B9B5","#683A31","#4A5F56"])),t._defaultPalettes.set("uc2",new p("uc2","UC2",["#262527","#513A3E","#424B50"])),t._defaultPalettes.set("bw",new p("bw","BW",["#FFFFFF","#000000"]))},t.loadUserPalettes=function(){var t=this;this._userPalettes=new Map,JSON.parse(window.localStorage.getItem("userPalettes")||"[]").forEach((function(e){var n=new p(e._id,e._name,e._colors);t._userPalettes.set(n.id,n)}))},t.saveUserPalettes=function(){var t=[];this._userPalettes.forEach((function(e){t.push(e)})),window.localStorage.setItem("userPalettes",JSON.stringify(t))},t.setUserPalette=function(t){this._userPalettes.set(t.id,t),this.saveUserPalettes(),u.emit(A)},t.deleteUserPalette=function(t){this._userPalettes.delete(t),this.saveUserPalettes(),u.emit(A)},t.getDefaultPalettes=function(){return this._defaultPalettes},t.getUserPalettes=function(){return this._userPalettes},t.getBaseColorFromPalette=function(t){return(this._defaultPalettes.get(t)||this._userPalettes.get(t)).colors[0]},t.colorGeneratorFromPalette=function(t){return this.colorGenerator((this._defaultPalettes.get(t)||this._userPalettes.get(t)).colors)},t.colorGenerator=function(t){var e,n,o,r;return function(t,e){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(i){switch(i.label){case 0:for(e=this.range(0,t.length-1),o=e.length;1<o;o--)n=Math.floor(Math.random()*o),r=[e[o-1],e[n]],e[n]=r[0],e[o-1]=r[1];o=0,i.label=1;case 1:return o<e.length?[4,t[e[o]]]:[3,4];case 2:i.sent(),i.label=3;case 3:return o++,[3,1];case 4:return[3,0];case 5:return[2]}}))},t.ctor=(t.loadDefaultPalettes(),void t.loadUserPalettes()),t.range=function(t,e){return Array.from({length:e-t+1},(function(e,n){return n+t}))},t}(),h=function(){function t(t){this.ctx=t}return t.prototype.drawCircle=function(t){this.ctx.fillStyle=t.color,this.ctx.beginPath(),this.ctx.arc(t.center.x,t.center.y,t.radius,0,2*Math.PI,!0),this.ctx.closePath(),this.ctx.fill()},t.prototype.drawPolygon=function(t,e,n){var o=this;void 0===e&&(e=void 0),void 0===n&&(n=void 0),e?(this.ctx.fillStyle=e,this.ctx.strokeStyle=n||e):(this.ctx.fillStyle=t.color,this.ctx.strokeStyle=t.strokeColor||t.color),this.ctx.beginPath(),t.points.forEach((function(t,e){var n,r;0===e?(n=o.ctx).moveTo.apply(n,t.coord):(r=o.ctx).lineTo.apply(r,t.coord)})),this.ctx.closePath(),this.ctx.stroke(),this.ctx.fill()},t}(),f=function(){function t(t,e,n){void 0===n&&(n=null),this._x=t,this._y=e,this._index=n}return Object.defineProperty(t.prototype,"coord",{get:function(){return[this._x,this._y]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.x+","+this.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasIndex",{get:function(){return!!this._index},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this._index},enumerable:!1,configurable:!0}),t.prototype.dist=function(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))},t.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},t.prototype.div=function(t){return this.x/=t,this.y/=t,this},t.of=function(e,n){var o=e+","+n;return void 0===this._cache[o]&&(this._cache[o]=new t(e,n)),this._cache[o]},t.randomOf=function(e,n,o,r){return void 0===e&&(e=0),void 0===n&&(n=0),t.of(e+Math.random()*o,n+Math.random()*r)},t.randomPointsOf=function(e,n,o,r){for(var i=[],a=0;a<r;a++)i.push(2*Math.PI*Math.random());return i.sort(),i.map((function(r){return t.of(e+o*Math.cos(r),n+o*Math.sin(r))}))},t.randomPoints2Of=function(e,n,o,r){for(var i=[],a=2*Math.PI*Math.random(),s=0;s<r;s++){var c=1.5*Math.random()-.75,l=2*Math.PI/r*s+c;i.push(l+a)}return i.sort(),i.map((function(r){return t.of(e+o*Math.cos(r),n+o*Math.sin(r))}))},t._cache={},t}(),g=function(){function t(t,e,n){void 0===n&&(n=void 0),this._points=t,this._color=e,this._strokeColor=n,this._center=this._points.reduce((function(t,e,n,o){return new f(t.x+e.x,t.y+e.y)})).div(this._points.length),this._points.sort(this.comparePoints.bind(this)),this.setMinMax()}return Object.defineProperty(t.prototype,"points",{get:function(){return this._points},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},set:function(t){this._color=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeColor",{get:function(){return this._strokeColor},set:function(t){this._strokeColor=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.points.map((function(t){return t.key})).join("/")},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this.points.map((function(t){return t.keyIndex.toString()})).join("/")},enumerable:!1,configurable:!0}),t.prototype.equals=function(t){if(this.points.length!=t.points.length)return!1;for(var e=0;e<this.points.length;e++)if(!this.points[e].equals(t.points[e]))return!1;return!0},t.prototype.isContaining=function(t){var e=!1;if(t.x<this.minX||t.x>this.maxX||t.y<this.minY||t.y>this.maxY)return!1;for(var n=0,o=this.points.length-1;n<this.points.length;o=n++)this.points[n].y>t.y!=this.points[o].y>t.y&&t.x<(this.points[o].x-this.points[n].x)*(t.y-this.points[n].y)/(this.points[o].y-this.points[n].y)+this.points[n].x&&(e=!e);return e},t.prototype.setMinMax=function(){this.minX=this.points[0].x,this.maxX=this.points[0].x,this.minY=this.points[0].y,this.maxY=this.points[0].y;for(var t=1;t<this.points.length;t++){var e=this.points[t];this.minX=Math.min(e.x,this.minX),this.maxX=Math.max(e.x,this.maxX),this.minY=Math.min(e.y,this.minY),this.maxY=Math.max(e.y,this.maxY)}},t.prototype.comparePoints=function(t,e){var n=this;return t.equals(e)?0:function(){if(t.x-n._center.x>=0&&e.x-n._center.x<0)return!0;if(t.x-n._center.x<0&&e.x-n._center.x>=0)return!1;if(t.x-n._center.x==0&&e.x-n._center.x==0)return t.y-n._center.y>=0||e.y-n._center.y>=0?t.y>e.y:e.y>t.y;var o=(t.x-n._center.x)*(e.y-n._center.y)-(e.x-n._center.x)*(t.y-n._center.y);return o<0||!(o>0)&&(t.x-n._center.x)*(t.x-n._center.x)+(t.y-n._center.y)*(t.y-n._center.y)>(e.x-n._center.x)*(e.x-n._center.x)+(e.y-n._center.y)*(e.y-n._center.y)}()?1:-1},t}(),C=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}),y=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return C(n,t),n.prototype.startAnimate=function(){},n.prototype.stopAnimate=function(){},n.prototype.handleMouseMove=function(t){},n.prototype.draw=function(t,n){for(var o=d.colorGeneratorFromPalette(e.getState("palette","green")),r=500,i=Math.ceil(t/r),a=Math.ceil(n/r),s=0;s<i;s++)for(var c=0;c<a;c++){var l=r*s,u=r*c,A=o.next(),p=4;if((y=Math.random())>.66?p=5:y>.33&&(p=6),!(Math.random()>.8)){var h=new g(f.randomPoints2Of(l,u,r,p),A.value);this.drawPolygon(h)}}var C=200;for(i=Math.ceil(t/C),a=Math.ceil(n/C),s=0;s<i;s++)for(c=0;c<a;c++){var y;l=C*s,u=C*c,A=o.next(),p=4,(y=Math.random())>.66?p=5:y>.33&&(p=6),Math.random()>.8||(h=new g(f.randomPoints2Of(l,u,C,p),A.value),this.drawPolygon(h))}},n}(h),m=function(){function t(t,e,n){this._center=t,this._radius=e,this._color=n}return Object.defineProperty(t.prototype,"center",{get:function(){return this._center},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"radius",{get:function(){return this._radius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},enumerable:!1,configurable:!0}),t.prototype.isContaining=function(t){return this.center.dist(t)<this.radius},t}(),b=function(){function t(){}return t.range=function(t,e){return Array.from({length:e-t+1},(function(e,n){return n+t}))},t}(),v=function(){function t(t,e){t.hasIndex&&e.hasIndex?t.keyIndex<e.keyIndex?(this._start=t,this._end=e):(this._start=e,this._end=t):t.x<=e.x?(this._start=t,this._end=e):(this._start=e,this._end=t)}return Object.defineProperty(t.prototype,"start",{get:function(){return this._start},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.start.key+"/"+this.end.key},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this.start.keyIndex+"-"+this.end.keyIndex},enumerable:!1,configurable:!0}),t.prototype.equals=function(t){return this._start.equals(t._start)&&this._end.equals(t._end)||this._start.equals(t._end)&&this._end.equals(t._start)},t}(),x=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),w=function(t){function e(e,n){if(3!=e.length)throw Error("Triangle must have 3 points");return t.call(this,e,n)||this}return x(e,t),Object.defineProperty(e.prototype,"area",{get:function(){return this._area||(this._area=Math.abs(.5*(this.points[0].x*(this.points[1].y-this.points[2].y)+this.points[1].x*(this.points[2].y-this.points[0].y)+this.points[2].x*(this.points[0].y-this.points[1].y)))),this._area},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"edges",{get:function(){return this._edges||(this._edges=[],this._edges.push(new v(this.points[0],this.points[1])),this._edges.push(new v(this.points[1],this.points[2])),this._edges.push(new v(this.points[2],this.points[0]))),this._edges},enumerable:!1,configurable:!0}),e.prototype.getCircumcircle=function(){if(!this._circumcircle){var t=this.points[0].x,e=this.points[0].y,n=this.points[1].x,o=this.points[1].y,r=this.points[2].x,i=this.points[2].y,a=Math.pow(t,2),s=Math.pow(n,2),c=Math.pow(r,2),l=Math.pow(e,2),u=Math.pow(o,2),A=Math.pow(i,2),p=2*((n-t)*(i-e)-(o-e)*(r-t)),d=((i-e)*(s-a+u-l)+(e-o)*(c-a+A-l))/p,h=((t-r)*(s-a+u-l)+(n-t)*(c-a+A-l))/p,g=Math.sqrt(Math.pow(t-d,2)+Math.pow(e-h,2));this._circumcircle=new m(new f(d,h),g,"white")}return this._circumcircle},e}(g),k=function(){function t(){}return t.incrementAndGet=function(){return void 0===this._index&&(this._index=0),this._index++},t.reset=function(){this._index=0},t}(),_=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),E=function(t){function n(e){var n=t.call(this,e)||this;return n.activeTriangle=new Array(2),n}return _(n,t),n.prototype.draw=function(t,n){var i=this;this.points=[];var a=Math.ceil(t/500),c=Math.ceil(n/500);k.reset();for(var l=0;l<a+1;l++)for(var u=0;u<c+1;u++)this.points.push(new f(t/a*l,n/c*u,k.incrementAndGet()));var A=e.getState(r)-1;b.range(0,A).forEach((function(e,o){i.points.push(new f(Math.random()*t,Math.random()*n,k.incrementAndGet()))}));var p=Math.sqrt(t*t+n*n)/2,h=new f(t/2,n/2);this.drawCircle(new m(h,p,"rgba(1, 1, 1, 0)"));var g=new f(h.x-Math.sqrt(3)*p,h.y-p,k.incrementAndGet()),C=new f(h.x+Math.sqrt(3)*p,h.y-p,k.incrementAndGet()),y=new f(h.x,h.y+2*p,k.incrementAndGet()),v=new w([g,C,y],"pink"),x=d.colorGeneratorFromPalette(e.getState(o,"green"));x.next();var _=[v];for(this.points.forEach((function(t,e){var n=[];_.forEach((function(e,o){e.getCircumcircle().isContaining(t)&&(n=n.concat(e.edges),delete _[o])})),n.map((function(t,e){for(var o=0;o<n.length;o++)if(e!=o&&t.equals(n[o]))return null;return t})).filter((function(t){return t})).forEach((function(e){_.push(new w([e.start,e.end,t],x.next().value))}))})),this.triangles=_.filter((function(t){return t})),this.triangleAreas=this.triangles.map((function(t){return t.area})).sort((function(t,e){return t-e})),this.triangleAreaMedian=this.triangleAreas[Math.floor(this.triangleAreas.length/2)],this.buildEdgeMap(),this.visitMap={},l=0;l<this.triangles.length;l++){var E=this.triangles[l];this.visitMap[E.keyIndex]||this.makeCamouflage(E,x.next().value,e.getState(s))}},n.prototype.makeCamouflage=function(t,e,n,o){var r=this;if(void 0===o&&(o=null),o=o||n,t.color=e,this.visitMap[t.keyIndex]=e,0!=n){var i=n===o,a=[];t.edges.forEach((function(s,c){var l=r.edgeMap[s.keyIndex].filter((function(e){return!e.equals(t)}))[0];l&&a.push(l),l&&!r.visitMap[l.keyIndex]&&(i=!1,(l.area<5e3||Math.random()<n/o)&&r.makeCamouflage(l,e,n-1,o))})),i?0==a.length?console.error("Failed to find adjacentTriangle"):(t.color=this.visitMap[a[0].keyIndex],this.drawPolygon(t,t.color,t.color)):this.drawPolygon(t,e)}else this.drawPolygon(t,e)},n.prototype.startAnimate=function(){this.interval=setInterval(this.animate.bind(this),50)},n.prototype.stopAnimate=function(){clearInterval(this.interval)},n.prototype.animate=function(){var t=this;this.points.forEach((function(e,n){t.points[n].x+=4*(Math.random()-.5),t.points[n].y+=4*(Math.random()-.5)})),this.triangles.forEach((function(e){t.isActiveTriangle(e)?t.drawPolygon(e,"red"):t.adjacentPolygons&&t.adjacentPolygons[e.keyIndex]?t.drawPolygon(e,"blue"):t.drawPolygon(e)}))},n.prototype.handleMouseMove=function(t){var n=this;e.getState(c)&&(this.triangles.forEach((function(o){o.isContaining(t)&&e.getState(c)?(n.updateActiveTriangle(o),n.drawPolygon(o,"red")):n.drawPolygon(o)})),Object.keys(this.adjacentPolygons).forEach((function(t){n.drawPolygon(n.adjacentPolygons[t],"blue")})))},n.prototype.buildEdgeMap=function(){var t=this;this.edgeMap={},this.triangles.forEach((function(e){e.edges.forEach((function(n){void 0===t.edgeMap[n.keyIndex]&&(t.edgeMap[n.keyIndex]=[]),t.edgeMap[n.keyIndex].push(e)})),t.drawPolygon(e)}))},n.prototype.updateActiveTriangle=function(t){var e=this;if(!this.isActiveTriangle(t)){this.activeTriangle[1]=this.activeTriangle[0],this.activeTriangle[0]=t,this.adjacentPolygons={};for(var n=0;n<t.edges.length;n++){var o=this.edgeMap[t.edges[n].keyIndex];o&&o.length>1&&o.forEach((function(n){n.equals(t)||(e.adjacentPolygons[n.keyIndex]=n)}))}}},n.prototype.isActiveTriangle=function(t){return this.activeTriangle[0]&&this.activeTriangle[0].equals(t)},n}(h),B=function(){function t(t){void 0===t&&(t="#6C7C52"),this._baseCol=t,this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.logics={m90p1:new y(this.ctx),m90p2:new E(this.ctx)},window.onresize=this.redrawHandler.bind(this),e.registerCallback(this.redrawHandler.bind(this)),this.redrawHandler(null,null,null)}return t.prototype.reDraw=function(){this.ctx.fillStyle=d.getBaseColorFromPalette(e.getState(o)),this.ctx.fillRect(0,0,this.width,this.height),this.draw()},t.prototype.redrawHandler=function(t,n,r){var s=this.logics[e.getState("pattern")];n===i?r?s.startAnimate():s.stopAnimate():n===a?s.handleMouseMove(r):n===c||n===l||(this.width=document.documentElement.clientWidth,this.height=document.documentElement.clientHeight,this.canvas.setAttribute("width",this.width.toString()),this.canvas.setAttribute("height",this.height.toString()),this.ctx.fillStyle=d.getBaseColorFromPalette(e.getState(o)),this.ctx.fillRect(0,0,this.width,this.height),this.draw())},t.prototype.draw=function(){this.logics[e.getState("pattern")].draw(this.width,this.height)},t}(),P=n(379),S=n.n(P),M=n(539);S()(M.Z,{insert:"head",singleton:!1}),M.Z.locals;var I=function(){function t(){this._state={}}return t.prototype.getState=function(t){return this._state[t]},t.prototype.setState=function(t,e,n){void 0===n&&(n=!0),this._state[t]=e,n&&this.render()},t}(),O=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),F=function(t){function n(){var e=t.call(this)||this;return e.templateSrc='\n<div>\n<label class="radio">\n    <input name="color-palette" type="radio" value="">\n    <span class="outside"><span class="inside"></span></span>\n    <span class="palette-name"></span>\n</label>\n<div class="trash-button"><i class="far fa-trash-alt"></i></div>\n<div style="clear: both;"></div>\n</div>\n',e.template=document.createElement("template"),e.paletteList=document.getElementById("color-palette-list"),e.template.innerHTML=e.templateSrc.trim(),e.setState("default-palette",d.getDefaultPalettes(),!1),e.setState("user-palette",d.getUserPalettes()),u.register(A,e.reloadUserPalettes.bind(e)),e}return O(n,t),n.prototype.reloadUserPalettes=function(){this.setState("user-palette",d.getUserPalettes());var t=this.render();this.paletteList.replaceChild(t,this.paletteList.firstChild)},n.prototype.renderTemplate=function(t,n){void 0===n&&(n=!1);var r=this.template.content.cloneNode(!0),i=r.querySelector("input[type=radio]");return i.value=t.id,i.onclick=function(t){var n=t.target;e.getState(o)!=n.value&&e.setState(o,n.value)},r.querySelector(".palette-name").textContent=t.name,n?(r.querySelector(".trash-button").setAttribute("key",t.id),r.querySelector(".trash-button").onmousedown=function(t){var e=t.target.parentElement.getAttribute("key");window.confirm("Delete "+e+"?")&&d.deleteUserPalette(e)}):r.querySelector(".trash-button").remove(),[r,i]},n.prototype.render=function(){var t=this,n=document.createElement("div"),r=this.getState("default-palette"),i=e.getState(o);console.log("CP:",i);var a=!0;if(!r)throw Error("Failed to get color palette properly");return r.forEach((function(e){var o=t.renderTemplate(e),r=o[0],s=o[1];a?(i||(s.checked=a),a=!1):s.checked=s.value===i,n.appendChild(r)})),this.getState("user-palette").forEach((function(e){var o=t.renderTemplate(e,!0),r=o[0],a=o[1];a.checked=a.value===i,n.appendChild(r)})),n},n}(I),j=function(){function t(){this.colorPaletteComponent=new F}return t.prototype.initialize=function(){var t=document.getElementById("color-palette-list"),n=this.colorPaletteComponent.render();t.appendChild(n),document.getElementById("add-color").onmousedown=function(t){d.setUserPalette(new p("test","Test",["#FF0000","#00FF00","#0000FF"]))};var u=document.getElementById("canvas");document.getElementById("download").onclick=function(){var t=document.createElement("a");document.body.appendChild(t),t.setAttribute("download","camo-pattern.png"),t.setAttribute("href",u.toDataURL("image/png").replace("image/png","image/octet-stream")),t.click(),document.body.removeChild(t)},document.getElementById("refresh").onclick=function(){w.reDraw()};var A=document.getElementById("controls-values");e.setState("pattern",A["camo-pattern"].value),e.setState(o,A["color-palette"].value),e.setState(r,A["num-points"].value),e.setState(s,A["camo-depth"].value),e.setState(i,!1),e.setState(c,!1),e.setState(l,!0);var h=document.querySelector("#camo-pattern input[name=num-points]"),g=document.getElementById("num-points-val");h.onchange=function(t){g.textContent=h.value,e.getState(r)!=h.value&&e.setState(r,h.value)};var C=document.querySelector("#camo-pattern input[name=camo-depth]"),y=document.getElementById("camo-depth-val");C.onchange=function(t){y.textContent=C.value,e.getState(s)!=C.value&&e.setState(s,C.value)},document.getElementById("start-animate").onclick=function(t){!0!==e.getState(i)&&e.setState(i,!0)},document.getElementById("stop-animate").onclick=function(t){!1!==e.getState(i)&&e.setState(i,!1)},document.querySelectorAll("#color-palette input[type=radio]").forEach((function(t){t.onclick=function(){e.getState(o)!=t.value&&e.setState(o,t.value)}})),window.onmousemove=function(t){e.getState(a)&&e.getState(a).equals(f.of(t.clientX,t.clientY))||e.setState(a,f.of(t.clientX,t.clientY))},document.getElementById("tap-to-refresh").ontouchend=function(){w.reDraw(),e.setState(c,!1)};var m=document.getElementById("camo-control-panel"),b=document.getElementById("open-settings"),v=document.getElementById("open-settings-on"),x=document.getElementById("open-settings-off");b.ontouchend=function(){m.classList.toggle("activated"),v.classList.toggle("fade-out"),x.classList.toggle("fade-out")},window.onkeydown=function(t){if("m"===t.key)e.flipState(c);else if("c"===t.key){var n=e.flipState(l);document.getElementById("camo-control-panel").style.display=n?"block":"none"}else"r"===t.key?w.reDraw():"a"===t.key&&e.flipState(i)};var w=new B},t}();window.onload=function(){(new j).initialize()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vLi9zcmMvc3R5bGUuc2NzcyIsIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzIiwid2VicGFjazovL2NhbW8tcGF0dGVybi8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzIiwid2VicGFjazovL2NhbW8tcGF0dGVybi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2NhbW8tcGF0dGVybi93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL21vZGVsL3N0YXRlLnRzIiwid2VicGFjazovL2NhbW8tcGF0dGVybi8uL3NyYy9tb2RlbC9zdGF0ZUtleS50cyIsIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vLi9zcmMvbW9kZWwvYWN0aW9uLnRzIiwid2VicGFjazovL2NhbW8tcGF0dGVybi8uL3NyYy9tb2RlbC9hY3Rpb25LZXkudHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL2NvbG9yLnRzIiwid2VicGFjazovL2NhbW8tcGF0dGVybi8uL3NyYy9kcmF3aW5nL2Jhc2VMb2dpYy50cyIsIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vLi9zcmMvZ2VvbWV0cnkvcG9pbnQudHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL2dlb21ldHJ5L3BvbHlnb24udHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL2RyYXdpbmcvbTkwUGF0dGVybjEudHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL2dlb21ldHJ5L2NpcmNsZS50cyIsIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vLi9zcmMvdXRpbC50cyIsIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vLi9zcmMvZ2VvbWV0cnkvZWRnZS50cyIsIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vLi9zcmMvZ2VvbWV0cnkvdHJpYW5nbGUudHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL3V0aWwvaW5kZXhHZW5lcmF0b3IudHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL2RyYXdpbmcvbTkwUGF0dGVybjIudHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL2NhbnZhcy50cyIsIndlYnBhY2s6Ly9jYW1vLXBhdHRlcm4vLi9zcmMvc3R5bGUuc2Nzcz9lYmJmIiwid2VicGFjazovL2NhbW8tcGF0dGVybi8uL3NyYy9jb21wb25lbnQvX2Jhc2VDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL2NvbXBvbmVudC9jb2xvclBhbGV0dGVDb21wb25lbnQudHMiLCJ3ZWJwYWNrOi8vY2Ftby1wYXR0ZXJuLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjb25jYXQiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiZGVkdXBlIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsIl9pIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJhcnIiLCJsZW4iLCJhcnIyIiwiQXJyYXkiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk9iamVjdCIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJ1bmRlZmluZWQiLCJfcyIsIm5leHQiLCJkb25lIiwidmFsdWUiLCJlcnIiLCJfaXRlcmFibGVUb0FycmF5TGltaXQiLCJvIiwibWluTGVuIiwibiIsInByb3RvdHlwZSIsImNhbGwiLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiVHlwZUVycm9yIiwiX25vbkl0ZXJhYmxlUmVzdCIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJtZW1vIiwiZ2V0VGFyZ2V0IiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZSIsImNyZWF0ZUVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibm9uY2UiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsInNldEF0dHJpYnV0ZSIsImluc2VydCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiZmlsdGVyIiwiQm9vbGVhbiIsImFwcGx5VG9TaW5nbGV0b25UYWciLCJyZW1vdmUiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImNoaWxkTm9kZXMiLCJyZW1vdmVDaGlsZCIsImluc2VydEJlZm9yZSIsImFwcGx5VG9UYWciLCJyZW1vdmVBdHRyaWJ1dGUiLCJmaXJzdENoaWxkIiwic2luZ2xldG9uIiwic2luZ2xldG9uQ291bnRlciIsInVwZGF0ZSIsInN0eWxlSW5kZXgiLCJiaW5kIiwicGFyZW50Tm9kZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsIm5ld09iaiIsImFsbCIsImF0b2IiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiaGFzT3duUHJvcGVydHkiLCJnZXRJbnN0YW5jZSIsIl9pbnN0YW5jZSIsIlN0YXRlIiwiZ2V0U3RhdGUiLCJkZWZhdWx0VmFsdWUiLCJjdXJyZW50Iiwic2V0U3RhdGUiLCJ0cmlnZ2VyVXBkYXRlIiwiX2NhbGxiYWNrcyIsImNhbGxiYWNrIiwiZmxpcFN0YXRlIiwiY29uc29sZSIsImVycm9yIiwicmVnaXN0ZXJDYWxsYmFjayIsImFkZCIsImRlcmVnaXN0ZXJDYWxsYmFjayIsImRlbGV0ZSIsIlNldCIsIlN0YXRlS2V5IiwiQWN0aW9uIiwiZW1pdCIsInJlZ2lzdGVyIiwiZGVyZWdpc3RlciIsIkFjdGlvbktleSIsIl9pZCIsIl9uYW1lIiwiX2NvbG9ycyIsImxvYWREZWZhdWx0UGFsZXR0ZXMiLCJDb2xvciIsIl9kZWZhdWx0UGFsZXR0ZXMiLCJNYXAiLCJzZXQiLCJDb2xvclBhbGV0dGUiLCJsb2FkVXNlclBhbGV0dGVzIiwiX3VzZXJQYWxldHRlcyIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInZhbCIsInBhbGV0dGUiLCJzYXZlVXNlclBhbGV0dGVzIiwic2VyaWFsaXphYmxlVXNlclBhbGV0dGUiLCJzZXRJdGVtIiwic2V0VXNlclBhbGV0dGUiLCJkZWxldGVVc2VyUGFsZXR0ZSIsImdldERlZmF1bHRQYWxldHRlcyIsImdldFVzZXJQYWxldHRlcyIsImdldEJhc2VDb2xvckZyb21QYWxldHRlIiwiY29sb3IiLCJjb2xvcnMiLCJjb2xvckdlbmVyYXRvckZyb21QYWxldHRlIiwiY29sb3JHZW5lcmF0b3IiLCJpbmRpY2VzIiwicmFuZ2UiLCJrIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiY3RvciIsInN0YXJ0IiwiZW5kIiwidiIsImN0eCIsImRyYXdDaXJjbGUiLCJjaXJjbGUiLCJmaWxsU3R5bGUiLCJiZWdpblBhdGgiLCJhcmMiLCJjZW50ZXIiLCJ4IiwieSIsInJhZGl1cyIsIlBJIiwiY2xvc2VQYXRoIiwiZmlsbCIsImRyYXdQb2x5Z29uIiwicG9seSIsInN0cm9rZUNvbG9yIiwic3Ryb2tlU3R5bGUiLCJwb2ludHMiLCJtb3ZlVG8iLCJjb29yZCIsImxpbmVUbyIsInN0cm9rZSIsIl94IiwiX3kiLCJkaXN0IiwiYW5vdGhlciIsInNxcnQiLCJwb3ciLCJlcXVhbHMiLCJkaXYiLCJvZiIsIl9jYWNoZSIsIlBvaW50IiwicmFuZG9tT2YiLCJ3aWR0aCIsImhlaWdodCIsInJhbmRvbVBvaW50c09mIiwiciIsIm51bSIsInJhZHMiLCJzb3J0IiwiY29zIiwic2luIiwicmFuZG9tUG9pbnRzMk9mIiwic2hpZnQiLCJybmQiLCJyYWQiLCJfcG9pbnRzIiwiX2NvbG9yIiwiX3N0cm9rZUNvbG9yIiwiX2NlbnRlciIsInJlZHVjZSIsInByZXYiLCJjdXIiLCJjb21wYXJlUG9pbnRzIiwic2V0TWluTWF4IiwicCIsImtleUluZGV4IiwiaXNDb250YWluaW5nIiwiaXNJbnNpZGUiLCJtaW5YIiwibWF4WCIsIm1pblkiLCJtYXhZIiwiaiIsInEiLCJtaW4iLCJtYXgiLCJiIiwiZGV0IiwiaW50ZXJuYWwiLCJzdGFydEFuaW1hdGUiLCJzdG9wQW5pbWF0ZSIsImhhbmRsZU1vdXNlTW92ZSIsImRyYXciLCJjb2xJdGVyIiwidW5pdCIsInhOdW0iLCJjZWlsIiwieU51bSIsImN1cnIiLCJwMiIsIlBvbHlnb24iLCJ1bml0MiIsIkJhc2VMb2dpYyIsIl9yYWRpdXMiLCJwMSIsImhhc0luZGV4IiwiX3N0YXJ0IiwiX2VuZCIsIl9hcmVhIiwiYWJzIiwiX2VkZ2VzIiwiRWRnZSIsImdldENpcmN1bWNpcmNsZSIsIl9jaXJjdW1jaXJjbGUiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIngzIiwieTMiLCJ4MXBvdzIiLCJ4MnBvdzIiLCJ4M3BvdzIiLCJ5MXBvdzIiLCJ5MnBvdzIiLCJ5M3BvdzIiLCJjIiwiQ2lyY2xlIiwiaW5jcmVtZW50QW5kR2V0IiwicmVzZXQiLCJhY3RpdmVUcmlhbmdsZSIsInhHcmlkIiwieUdyaWQiLCJJbmRleEdlbmVyYXRvciIsIm51bVBvaW50cyIsIlV0aWwiLCJfIiwicDMiLCJiYXNlVHJpYW5nbGUiLCJUcmlhbmdsZSIsInRyaWFuZ2xlcyIsImVkZ2VzIiwidHJpYW5nbGUiLCJlZGdlIiwidHJpYW5nbGVBcmVhcyIsInQiLCJhcmVhIiwidHJpYW5nbGVBcmVhTWVkaWFuIiwiYnVpbGRFZGdlTWFwIiwidmlzaXRNYXAiLCJtYWtlQ2Ftb3VmbGFnZSIsImRlcHRoIiwib3JpZ2luYWxEZXB0aCIsImFsb25lIiwiYWRqYWNlbnRUcmlhbmdsZXMiLCJhZGphY2VudCIsImVkZ2VNYXAiLCJlcCIsImludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJhbmltYXRlIiwiY2xlYXJJbnRlcnZhbCIsInBvaW50IiwiaXNBY3RpdmVUcmlhbmdsZSIsImFkamFjZW50UG9seWdvbnMiLCJ1cGRhdGVBY3RpdmVUcmlhbmdsZSIsImVkZ2VQb2x5Z29ucyIsIl9iYXNlQ29sIiwiY2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRDb250ZXh0IiwibG9naWNzIiwiTTkwUGF0dGVybjEiLCJNOTBQYXR0ZXJuMiIsIm9ucmVzaXplIiwicmVkcmF3SGFuZGxlciIsInJlRHJhdyIsImZpbGxSZWN0Iiwic3RhdGUiLCJyZW5kZXJlciIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiX3N0YXRlIiwicmVuZGVyIiwidGVtcGxhdGVTcmMiLCJ0ZW1wbGF0ZSIsInBhbGV0dGVMaXN0IiwiaW5uZXJIVE1MIiwidHJpbSIsInJlbG9hZFVzZXJQYWxldHRlcyIsIm5vZGUiLCJyZXBsYWNlQ2hpbGQiLCJyZW5kZXJUZW1wbGF0ZSIsImhhc1RyYXNoQnV0dG9uIiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJyYWRpbyIsIm9uY2xpY2siLCJ0ZXh0Q29udGVudCIsIm9ubW91c2Vkb3duIiwicGFsZXR0ZUlkIiwicGFyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImNvbmZpcm0iLCJyb290IiwiZGVmYXVsdFBhbGV0dGVzIiwiY3VycmVudFBhbGV0dGUiLCJsb2ciLCJpc0ZpcnN0UGFsZXR0ZSIsImNoZWNrZWQiLCJDb21wb25lbnQiLCJjb2xvclBhbGV0dGVDb21wb25lbnQiLCJDb2xvclBhbGV0dGVDb21wb25lbnQiLCJpbml0aWFsaXplIiwibGluayIsImJvZHkiLCJ0b0RhdGFVUkwiLCJyZXBsYWNlIiwiY2xpY2siLCJmb3JtIiwiY2Ftb1NsaWRlciIsImNhbW9TbGlkZXJJbmRpY2F0b3IiLCJvbmNoYW5nZSIsImRlcHRoU2xpZGVyIiwiZGVwdGhTbGlkZXJJbmRpY2F0b3IiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZWxlbSIsIm9ubW91c2Vtb3ZlIiwiY2xpZW50WCIsImNsaWVudFkiLCJvbnRvdWNoZW5kIiwiY2Ftb0NvbnRyb2xQYW5lbCIsIm9wZW5TZXR0aW5ncyIsIm9wZW5TZXR0aW5nc09uIiwib3BlblNldHRpbmdzT2ZmIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwib25rZXlkb3duIiwiZW5hYmxlZCIsImRpc3BsYXkiLCJDYW52YXMiLCJvbmxvYWQiLCJBcHAiXSwibWFwcGluZ3MiOiJ1RkFHSUEsRSxNQUEwQixHQUE0QixLQUUxREEsRUFBd0JDLEtBQUssQ0FBQ0MsRUFBT0MsR0FBSSx3MUpBQXkxSixHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyxtQ0FBbUMsOEJBQThCLE1BQVEsR0FBRyxTQUFXLHlxRUFBeXFFLGVBQWlCLENBQUMscTNEQUFxM0QsbW9LQUF1cUssV0FBYSxNQUV4dGMsVyxRQ0NBRCxFQUFPRSxRQUFVLFNBQVVDLEdBQ3pCLElBQUlDLEVBQU8sR0F1RFgsT0FyREFBLEVBQUtDLFNBQVcsV0FDZCxPQUFPQyxLQUFLQyxLQUFJLFNBQVVDLEdBQ3hCLElBQUlDLEVBQVVOLEVBQXVCSyxHQUVyQyxPQUFJQSxFQUFLLEdBQ0EsVUFBVUUsT0FBT0YsRUFBSyxHQUFJLE1BQU1FLE9BQU9ELEVBQVMsS0FHbERBLEtBQ05FLEtBQUssS0FLVlAsRUFBS1EsRUFBSSxTQUFVQyxFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxFQUFTLE1BRzdCLElBQUlHLEVBQXlCLEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJSCxFQUFJLEVBQUdBLEVBQUlOLEtBQUtXLE9BQVFMLElBQUssQ0FFcEMsSUFBSVgsRUFBS0ssS0FBS00sR0FBRyxHQUVQLE1BQU5YLElBQ0ZlLEVBQXVCZixJQUFNLEdBS25DLElBQUssSUFBSWlCLEVBQUssRUFBR0EsRUFBS0wsRUFBUUksT0FBUUMsSUFBTSxDQUMxQyxJQUFJVixFQUFPLEdBQUdFLE9BQU9HLEVBQVFLLElBRXpCSCxHQUFVQyxFQUF1QlIsRUFBSyxNQUt0Q00sSUFD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RUFBZ0JDLFVBQVVDLE9BQU8sYUFJckMzVyxPQUFPNFcsVUFBWSxTQUFDeFcsR0FDaEIsR0FBYyxNQUFWQSxFQUFFMEIsSUFDRnNELEVBQU1RLFVBQVVRLFFBRWYsR0FBYyxNQUFWaEcsRUFBRTBCLElBQWEsQ0FDcEIsSUFBTStVLEVBQVV6UixFQUFNUSxVQUFVUSxHQUNuQnRHLFNBQVN5UyxlQUFlLHNCQUU1Qi9RLE1BQU1zVixRQURYRCxFQUNxQixRQUVBLFdBR1YsTUFBVnpXLEVBQUUwQixJQUNQOE4sRUFBRWtELFNBRWEsTUFBVjFTLEVBQUUwQixLQUNQc0QsRUFBTVEsVUFBVVEsSUFJeEIsSUFBSXdKLEVBQUksSUFBSW1ILEdBRXBCLEVBdElBLEdBd0lBL1csT0FBT2dYLE9BQVMsWUFDWixJQUFLQyxHQUFPN0IsZSIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9jc3NXaXRoTWFwcGluZ1RvU3RyaW5nLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAa2V5ZnJhbWVzIHJhZGlvLXNlbGVjdHswJXt0cmFuc2Zvcm06c2NhbGUoMCwgMCl9NjUle3RyYW5zZm9ybTpzY2FsZSgxLjEsIDEuMSl9MTAwJXt0cmFuc2Zvcm06c2NhbGUoMSwgMSl9fS5jb250cm9scyBsYWJlbC5yYWRpb3ttYXJnaW46MXJlbSAwO2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246cmVsYXRpdmU7cGFkZGluZy1sZWZ0OjMwcHg7Y3Vyc29yOnBvaW50ZXI7ZmxvYXQ6bGVmdH0uY29udHJvbHMgaW5wdXRbdHlwZT1yYWRpb117aGVpZ2h0OjFweDt3aWR0aDoxcHg7b3BhY2l0eTowfS5jb250cm9scyAub3V0c2lkZXtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OjA7dG9wOjUwJTttYXJnaW4tdG9wOi0xNXB4O3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7Ym9yZGVyOjJweCBzb2xpZCAjY2NjO2JvcmRlci1yYWRpdXM6NTAlO2JveC1zaXppbmc6Ym9yZGVyLWJveDtiYWNrZ3JvdW5kOiNmM2YzZjN9LmNvbnRyb2xzIC5pbnNpZGV7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JvcmRlci1yYWRpdXM6NTAlO3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7YmFja2dyb3VuZDojNDQ0O2xlZnQ6M3B4O3RvcDozcHg7dHJhbnNmb3JtOnNjYWxlKDAsIDApfS5uby10cmFuc2Zvcm1zIC5jb250cm9scyAuaW5zaWRle2xlZnQ6YXV0bzt0b3A6YXV0bzt3aWR0aDowO2hlaWdodDowfS5jb250cm9scyBpbnB1dFt0eXBlPXJhZGlvXTpjaGVja2VkKy5vdXRzaWRlIC5pbnNpZGV7YW5pbWF0aW9uOnJhZGlvLXNlbGVjdCAuMXMgbGluZWFyO3RyYW5zZm9ybTpzY2FsZSgxLCAxKX0ubm8tdHJhbnNmb3JtcyAuY29udHJvbHMgaW5wdXRbdHlwZT1yYWRpb106Y2hlY2tlZCsub3V0c2lkZSAuaW5zaWRle3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHh9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFkaW9dOmZvY3VzKy5vdXRzaWRlLC5jb250cm9scyBpbnB1dFt0eXBlPXJhZGlvXTphY3RpdmUrLm91dHNpZGV7Ym9yZGVyLWNvbG9yOiM0NDR9LmNvbnRyb2xzIC50cmFzaC1idXR0b257ZmxvYXQ6bGVmdDttYXJnaW46MXJlbTtjdXJzb3I6cG9pbnRlcn0uY29udHJvbHMgLnRyYXNoLWJ1dHRvbjpob3Zlcntjb2xvcjojMmQyZDJkfUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC1kZXZpY2Utd2lkdGg6IDgxMnB4KXtpbnB1dFt0eXBlPXJhbmdlXXttYXJnaW46MXJlbSAwfX1ib2R5e21hcmdpbjowO3BhZGRpbmc6MDtmb250LWZhbWlseTpzYW5zLXNlcmlmfWJvZHkgLmNvbnRhaW5lcnttYXJnaW46MDtwYWRkaW5nOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtvdmVyZmxvdzpoaWRkZW59LnVpLXdyYXBwZXJ7dXNlci1zZWxlY3Q6bm9uZTtwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDoxMDAlO2hlaWdodDoxMDAlO292ZXJmbG93OmhpZGRlbn0udWktd3JhcHBlciAudWktYmFja2dyb3VuZHtkaXNwbGF5Om5vbmU7cG9zaXRpb246cmVsYXRpdmU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMCk7ei1pbmRleDowfS5jb250cm9sc3twb3NpdGlvbjphYnNvbHV0ZTttYXJnaW46MTBweDtwYWRkaW5nOjEwcHg7Ym9yZGVyOjNweCBkYXNoZWQgZ3JheTtiYWNrZ3JvdW5kOnJnYmEoMTI4LDEyOCwxMjgsLjcpO3otaW5kZXg6MjA7b3ZlcmZsb3cteTpzY3JvbGx9LmNvbnRyb2xzOjotd2Via2l0LXNjcm9sbGJhcntkaXNwbGF5Om5vbmV9LmNvbnRyb2xzIC5idXR0b257YmFja2dyb3VuZDpncmF5O21hcmdpbjoxMHB4O3BhZGRpbmc6MTBweCAyMHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO2N1cnNvcjpwb2ludGVyO3VzZXItc2VsZWN0Om5vbmU7Ym9yZGVyOjNweCBzb2xpZCAjNjY2fS5jb250cm9scyAuYnV0dG9uOmhvdmVye2JhY2tncm91bmQ6I2QzZDNkM30uY29udHJvbHMgLmNvbnRyb2xzLXNlY3Rpb257bWFyZ2luOjEwcHh9LmNvbnRyb2xzIC5jb250cm9scy1zZWN0aW9uIC5jb250cm9scy1zZWN0aW9uLXRpdGxle21hcmdpbi1ib3R0b206MTBweDtmb250LXdlaWdodDpib2xkfS5jb250cm9scyAuY29udHJvbHMtc2VjdGlvbiBsYWJlbHt1c2VyLXNlbGVjdDpub25lO2N1cnNvcjpwb2ludGVyfS5jb250cm9scyAuY29udHJvbHMtc2VjdGlvbiBpbnB1dFt0eXBlPXJhbmdlXXt3aWR0aDoxMDAlfS5jb250cm9scyAuY29udHJvbHMtc2VjdGlvbiAjbTkwcDItY29udHJvbHtkaXNwbGF5Om5vbmU7bWFyZ2luLXRvcDoyMHB4fS5jb250cm9scyAuY29udHJvbHMtc2VjdGlvbiBpbnB1dFt2YWx1ZT1tOTBwMl06Y2hlY2tlZH4jbTkwcDItY29udHJvbHtkaXNwbGF5OmJsb2NrfS5tb2JpbGUtdWktd3JhcHBlcnt6LWluZGV4OjEwO2Rpc3BsYXk6bm9uZX1AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MTJweCl7Ym9keXtvdmVyZmxvdy15OmhpZGRlbn0uY29udHJvbHN7Ym90dG9tOjA7Zm9udC1zaXplOjFyZW19LmNvbnRyb2xzIC51aS1idXR0b25zIC51aS1idXR0b257cGFkZGluZzoyMHB4IDQwcHh9LnVpLXdyYXBwZXIgLnVpLWJhY2tncm91bmR7ZGlzcGxheTpibG9ja30jY2Ftby1jb250cm9sLXBhbmVse3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMDB2aDt0cmFuc2l0aW9uOi4zcyB0b3AgZWFzZS1vdXQgLjFzfSNjYW1vLWNvbnRyb2wtcGFuZWwuYWN0aXZhdGVke3RvcDowfS5tb2JpbGUtdWktd3JhcHBlcntkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDtib3R0b206MDt3aWR0aDoxMDAlO2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjJyZW0gMXJlbX0ubW9iaWxlLXVpLXdyYXBwZXIgLmljb24tYnV0dG9uLXdyYXBwZXJ7d2lkdGg6MTAwJTt0ZXh0LWFsaWduOnJpZ2h0fS5tb2JpbGUtdWktd3JhcHBlciAuaWNvbi1idXR0b257cGFkZGluZzoxMHB4O2JvcmRlci1yYWRpdXM6NTAlO2JhY2tncm91bmQ6IzlhOWE5YTtmb250LXNpemU6M3JlbTtwb3NpdGlvbjpyZWxhdGl2ZX0ubW9iaWxlLXVpLXdyYXBwZXIgLmljb24tYnV0dG9uIC5mYS1tOHttYXJnaW46OHB4fS5tb2JpbGUtdWktd3JhcHBlciAuaWNvbi1idXR0b24gLmZhLXAye3BhZGRpbmc6LjJyZW19Lm1vYmlsZS11aS13cmFwcGVyICNvcGVuLXNldHRpbmdzICNvcGVuLXNldHRpbmdzLW9ue3RyYW5zaXRpb246LjNzIHRyYW5zZm9ybSxvcGFjaXR5IGVhc2UtaW4gLjFzO29wYWNpdHk6MX0ubW9iaWxlLXVpLXdyYXBwZXIgI29wZW4tc2V0dGluZ3MgI29wZW4tc2V0dGluZ3Mtb24uZmFkZS1vdXR7b3BhY2l0eTowO3RyYW5zZm9ybTpyb3RhdGVaKDE4MGRlZyl9Lm1vYmlsZS11aS13cmFwcGVyICNvcGVuLXNldHRpbmdzICNvcGVuLXNldHRpbmdzLW9mZnt0cmFuc2l0aW9uOi4zcyB0cmFuc2Zvcm0sb3BhY2l0eSBlYXNlLWluIC4xcztwb3NpdGlvbjphYnNvbHV0ZTtvcGFjaXR5OjE7bGVmdDoxLjFyZW07dG9wOi43cmVtfS5tb2JpbGUtdWktd3JhcHBlciAjb3Blbi1zZXR0aW5ncyAjb3Blbi1zZXR0aW5ncy1vZmYuZmFkZS1vdXR7b3BhY2l0eTowO3RyYW5zZm9ybTpyb3RhdGVaKC0xODBkZWcpfS5jb250cm9scyBpbnB1dFt0eXBlPXJhbmdlXXt3aWR0aDozMDBweDtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50fS5jb250cm9scyBpbnB1dFt0eXBlPXJhbmdlXXstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTt3aWR0aDoxMDAlfS5jb250cm9scyBpbnB1dFt0eXBlPXJhbmdlXTo6LXdlYmtpdC1zbGlkZXItdGh1bWJ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFuZ2VdOmZvY3Vze291dGxpbmU6bm9uZX0uY29udHJvbHMgaW5wdXRbdHlwZT1yYW5nZV06Oi1tcy10cmFja3t3aWR0aDoxMDAlO2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQ6dHJhbnNwYXJlbnQ7Ym9yZGVyLWNvbG9yOnRyYW5zcGFyZW50O2NvbG9yOnRyYW5zcGFyZW50fS5jb250cm9scyBpbnB1dFt0eXBlPXJhbmdlXTo6LXdlYmtpdC1zbGlkZXItdGh1bWJ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmU7aGVpZ2h0OjM2cHg7d2lkdGg6MzZweDtiYWNrZ3JvdW5kOiM1NTU7Y3Vyc29yOnBvaW50ZXI7bWFyZ2luLXRvcDotMTJweH0uY29udHJvbHMgaW5wdXRbdHlwZT1yYW5nZV06Oi1tb3otcmFuZ2UtdGh1bWJ7aGVpZ2h0OjM2cHg7d2lkdGg6MzZweDtiYWNrZ3JvdW5kOiM1NTU7Y3Vyc29yOnBvaW50ZXJ9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFuZ2VdOjotbXMtdGh1bWJ7aGVpZ2h0OjM2cHg7d2lkdGg6MzZweDtiYWNrZ3JvdW5kOiM1NTU7Y3Vyc29yOnBvaW50ZXJ9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFuZ2VdOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFja3t3aWR0aDoxMDAlO2hlaWdodDoxMnB4O2N1cnNvcjpwb2ludGVyO2JhY2tncm91bmQ6I2NjY30uY29udHJvbHMgaW5wdXRbdHlwZT1yYW5nZV06YWN0aXZlOjotd2Via2l0LXNsaWRlci1ydW5uYWJsZS10cmFja3tiYWNrZ3JvdW5kOiNkNmQ2ZDZ9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFuZ2VdOjotbW96LXJhbmdlLXRyYWNre3dpZHRoOjEwMCU7aGVpZ2h0OjEycHg7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZDojY2NjfS5jb250cm9scyBpbnB1dFt0eXBlPXJhbmdlXTo6LW1zLXRyYWNre3dpZHRoOjEwMCU7aGVpZ2h0OjEycHg7Y3Vyc29yOnBvaW50ZXI7YmFja2dyb3VuZDp0cmFuc3BhcmVudDtib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7Y29sb3I6dHJhbnNwYXJlbnR9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFuZ2VdOjotbXMtZmlsbC1sb3dlcntiYWNrZ3JvdW5kOiNjY2N9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFuZ2VdOmZvY3VzOjotbXMtZmlsbC1sb3dlcntiYWNrZ3JvdW5kOiNkZGR9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFuZ2VdOjotbXMtZmlsbC11cHBlcntiYWNrZ3JvdW5kOiNjY2N9LmNvbnRyb2xzIGlucHV0W3R5cGU9cmFuZ2VdOmZvY3VzOjotbXMtZmlsbC11cHBlcntiYWNrZ3JvdW5kOiNkZGR9fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS9pbnB1dC5zY3NzXCIsXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuc2Nzc1wiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiQUFPQSx3QkFDRSxHQUNFLHFCQUFBLENBRUYsSUFDRSx5QkFBQSxDQUVGLEtBQ0UscUJBQUEsQ0FBQSxDQWNGLHNCQUNFLGFBQUEsQ0FDQSxhQUFBLENBQ0EsaUJBQUEsQ0FDQSxpQkE3QkcsQ0E4QkgsY0FBQSxDQUNBLFVBQUEsQ0FHRiw0QkFDRSxVQUFBLENBQ0EsU0FBQSxDQUNBLFNBQUEsQ0FHRixtQkFDRSxvQkFBQSxDQUNBLGlCQUFBLENBQ0EsTUFBQSxDQUNBLE9BQUEsQ0FDQSxnQkFBQSxDQUNBLFVBN0NHLENBOENILFdBOUNHLENBK0NILHFCQUFBLENBQ0EsaUJBQUEsQ0FDQSxxQkFBQSxDQUNBLGtCQXREVyxDQXlEYixrQkFyQ0EsaUJBQUEsQ0FDQSxPQUFBLENBQ0EsUUFBQSxDQUNBLCtCQUFBLENBb0NFLG9CQUFBLENBQ0EsaUJBQUEsQ0FDQSxVQUFBLENBQ0EsV0FBQSxDQUNBLGVBOURXLENBK0RYLFFBQUEsQ0FDQSxPQUFBLENBQ0EscUJBQUEsQ0FDQSxpQ0FDRSxTQUFBLENBQ0Es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d2hpdGU6ICNGM0YzRjM7XFxuJGFsbW9zdC1ibGFjazogIzQ0NDtcXG4kYm9yZGVyOiAjQ0NDQ0NDO1xcbiRsZWZ0OiAzMHB4O1xcbiRzaXplOiAzMHB4O1xcblxcbkBrZXlmcmFtZXMgcmFkaW8tc2VsZWN0IHtcXG4gIDAlIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLDApO1xcbiAgfVxcbiAgNjUlIHtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgxLjEsMS4xKTtcXG4gIH1cXG4gIDEwMCUge1xcbiAgICB0cmFuc2Zvcm06IHNjYWxlKDEsMSk7XFxuICB9XFxufVxcblxcbi8qIHN0eWxlcyAqL1xcbkBtaXhpbiBjZW50ZXJlciB7XFxuICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICB0b3A6IDUwJTtcXG4gIGxlZnQ6IDUwJTtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xcbn1cXG5cXG5cXG4uY29udHJvbHMge1xcbiAgbGFiZWwucmFkaW8ge1xcbiAgICBtYXJnaW46IDFyZW0gMDtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gICAgcGFkZGluZy1sZWZ0OiAkbGVmdDtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICBmbG9hdDogbGVmdDtcXG4gIH1cXG5cXG4gIGlucHV0W3R5cGU9cmFkaW9dIHtcXG4gICAgaGVpZ2h0OiAxcHg7XFxuICAgIHdpZHRoOiAxcHg7XFxuICAgIG9wYWNpdHk6IDA7XFxuICB9XFxuXFxuICAub3V0c2lkZSB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBsZWZ0OiAwO1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbWFyZ2luLXRvcDogLSgkc2l6ZSAvIDIpO1xcbiAgICB3aWR0aDogJHNpemU7XFxuICAgIGhlaWdodDogJHNpemU7XFxuICAgIGJvcmRlcjogMnB4IHNvbGlkICRib3JkZXI7XFxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgYmFja2dyb3VuZDogJGFsbW9zdC13aGl0ZTtcXG4gIH1cXG5cXG4gIC5pbnNpZGUge1xcbiAgICBAaW5jbHVkZSBjZW50ZXJlcjtcXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XFxuICAgIHdpZHRoOiAoJHNpemUgLSAxMHB4KTtcXG4gICAgaGVpZ2h0OiAoJHNpemUgLSAxMHB4KTtcXG4gICAgYmFja2dyb3VuZDogJGFsbW9zdC1ibGFjaztcXG4gICAgbGVmdDogM3B4O1xcbiAgICB0b3A6IDNweDtcXG4gICAgdHJhbnNmb3JtOiBzY2FsZSgwLDApO1xcbiAgICAubm8tdHJhbnNmb3JtcyAmIHtcXG4gICAgICBsZWZ0OiBhdXRvO1xcbiAgICAgIHRvcDogYXV0bztcXG4gICAgICB3aWR0aDogMDtcXG4gICAgICBoZWlnaHQ6IDA7XFxuICAgIH1cXG4gIH1cXG5cXG4gIGlucHV0W3R5cGU9cmFkaW9dIHtcXG4gICAgJjpjaGVja2VkIHtcXG4gICAgICArIC5vdXRzaWRlIC5pbnNpZGUge1xcbiAgICAgICAgYW5pbWF0aW9uOiByYWRpby1zZWxlY3QgMC4xcyBsaW5lYXI7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEsMSk7XFxuICAgICAgICAubm8tdHJhbnNmb3JtcyAmIHtcXG4gICAgICAgICAgd2lkdGg6ICgkc2l6ZSAtIDEwcHgpO1xcbiAgICAgICAgICBoZWlnaHQ6ICgkc2l6ZSAtIDEwcHgpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICAmOmZvY3VzLCAmOmFjdGl2ZSB7XFxuICAgICAgICAgICsgLm91dHNpZGUge1xcbiAgICAgICAgICBib3JkZXItY29sb3I6ICRhbG1vc3QtYmxhY2s7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgfVxcblxcbiAgLnRyYXNoLWJ1dHRvbiB7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgICBtYXJnaW46IDFyZW07XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG5cXG4gICAgJjpob3ZlciB7XFxuICAgICAgY29sb3I6ICMyZDJkMmQ7XFxuICAgIH1cXG4gIH1cXG59XFxuQG1lZGlhIG9ubHkgc2NyZWVuXFxuYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MTJweCkge1xcbiAgaW5wdXRbdHlwZT1yYW5nZV0ge1xcbiAgICBtYXJnaW46IDFyZW0gMDtcXG4gIH1cXG5cXG59XFxuXCIsXCJAaW1wb3J0IFxcXCJzdHlsZS9pbnB1dFxcXCI7XFxuXFxuYm9keSB7XFxuICBtYXJnaW46IDA7XFxuICBwYWRkaW5nOiAwO1xcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XFxuXFxuICAuY29udGFpbmVyIHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgfVxcbn1cXG5cXG4udWktd3JhcHBlciB7XFxuICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHdpZHRoOiAxMDAlO1xcbiAgaGVpZ2h0OiAxMDAlO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG5cXG4gIC51aS1iYWNrZ3JvdW5kIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgaGVpZ2h0OiAxMDAlO1xcbiAgICBiYWNrZ3JvdW5kOiByZ2JhKDAsMCwwLDApO1xcbiAgICB6LWluZGV4OiAwO1xcbiAgfVxcbn1cXG5cXG4uY29udHJvbHMge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgbWFyZ2luOiAxMHB4O1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGJvcmRlcjogM3B4IGRhc2hlZCBncmF5O1xcbiAgYmFja2dyb3VuZDogcmdiYSgxMjgsIDEyOCwgMTI4LCAwLjcpO1xcbiAgei1pbmRleDogMjA7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICAmOjotd2Via2l0LXNjcm9sbGJhciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuXFxuICAuYnV0dG9uIHtcXG4gICAgYmFja2dyb3VuZDogZ3JleTtcXG4gICAgbWFyZ2luOiAxMHB4O1xcbiAgICBwYWRkaW5nOiAxMHB4IDIwcHg7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgYm9yZGVyOiAzcHggc29saWQgIzY2NjtcXG5cXG4gICAgJjpob3ZlciB7XFxuICAgICAgYmFja2dyb3VuZDogbGlnaHRncmF5O1xcbiAgICB9XFxuICB9XFxuXFxuICAuY29udHJvbHMtc2VjdGlvbiB7XFxuICAgIC8vYm9yZGVyOiAzcHggZGFzaGVkIGdyYXk7XFxuICAgIG1hcmdpbjogMTBweDtcXG5cXG4gICAgLmNvbnRyb2xzLXNlY3Rpb24tdGl0bGUge1xcbiAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XFxuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XFxuICAgIH1cXG5cXG4gICAgbGFiZWwge1xcbiAgICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgfVxcblxcbiAgICBpbnB1dFt0eXBlPXJhbmdlXSB7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgIH1cXG5cXG4gICAgI205MHAyLWNvbnRyb2wge1xcbiAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgbWFyZ2luLXRvcDogMjBweDtcXG4gICAgfVxcblxcbiAgICBpbnB1dFt2YWx1ZT1cXFwibTkwcDJcXFwiXTpjaGVja2VkIH4gI205MHAyLWNvbnRyb2xcXG4gICAge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB9XFxuICB9XFxufVxcblxcbi5tb2JpbGUtdWktd3JhcHBlciB7XFxuICB6LWluZGV4OiAxMDtcXG4gIGRpc3BsYXk6IG5vbmU7XFxufVxcblxcbkBtZWRpYSBvbmx5IHNjcmVlblxcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MTJweCkge1xcbiAgYm9keSB7XFxuICAgIG92ZXJmbG93LXk6IGhpZGRlbjtcXG4gIH1cXG5cXG4gIC5jb250cm9scyB7XFxuICAgIGJvdHRvbTogMDtcXG4gICAgZm9udC1zaXplOiAxcmVtO1xcblxcbiAgICAudWktYnV0dG9ucyB7XFxuICAgICAgLnVpLWJ1dHRvbiB7XFxuICAgICAgICBwYWRkaW5nOiAyMHB4IDQwcHg7XFxuICAgICAgfVxcbiAgICB9XFxuICB9XFxuXFxuICAudWktd3JhcHBlciB7XFxuICAgIC51aS1iYWNrZ3JvdW5kIHtcXG4gICAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgfVxcbiAgfVxcblxcbiAgI2NhbW8tY29udHJvbC1wYW5lbCB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgdG9wOiAxMDB2aDtcXG4gICAgdHJhbnNpdGlvbjogMC4zcyB0b3AgZWFzZS1vdXQgMC4xcztcXG5cXG4gICAgJi5hY3RpdmF0ZWQge1xcbiAgICAgIHRvcDogMDtcXG4gICAgfVxcbiAgfVxcblxcbiAgLm1vYmlsZS11aS13cmFwcGVyIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogMDtcXG4gICAgYm90dG9tOiAwO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZzogMnJlbSAxcmVtO1xcblxcbiAgICAuaWNvbi1idXR0b24td3JhcHBlciB7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgIH1cXG5cXG4gICAgLmljb24tYnV0dG9uIHtcXG4gICAgICBwYWRkaW5nOiAxMHB4O1xcbiAgICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcXG4gICAgICBiYWNrZ3JvdW5kOiAjOWE5YTlhO1xcbiAgICAgIGZvbnQtc2l6ZTogM3JlbTtcXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFxuICAgICAgLmZhLW04IHtcXG4gICAgICAgIG1hcmdpbjogOHB4O1xcbiAgICAgIH1cXG4gICAgICAuZmEtcDIge1xcbiAgICAgICAgcGFkZGluZzogMC4ycmVtO1xcbiAgICAgIH1cXG4gICAgfVxcblxcbiAgICAjb3Blbi1zZXR0aW5ncyB7XFxuICAgICAgI29wZW4tc2V0dGluZ3Mtb24ge1xcbiAgICAgICAgdHJhbnNpdGlvbjogMC4zcyB0cmFuc2Zvcm0sb3BhY2l0eSBlYXNlLWluIDAuMXM7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcblxcbiAgICAgICAgJi5mYWRlLW91dCB7XFxuICAgICAgICAgIG9wYWNpdHk6IDA7XFxuICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlWigxODBkZWcpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG5cXG4gICAgICAjb3Blbi1zZXR0aW5ncy1vZmYge1xcbiAgICAgICAgdHJhbnNpdGlvbjogMC4zcyB0cmFuc2Zvcm0sb3BhY2l0eSBlYXNlLWluIDAuMXM7XFxuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICAgICAgbGVmdDogMS4xcmVtO1xcbiAgICAgICAgdG9wOiAwLjdyZW07XFxuXFxuICAgICAgICAmLmZhZGUtb3V0IHtcXG4gICAgICAgICAgb3BhY2l0eTogMDtcXG4gICAgICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKC0xODBkZWcpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcblxcbiAgLmNvbnRyb2xzIHtcXG4gICAgaW5wdXRbdHlwZT1cXFwicmFuZ2VcXFwiXSB7XFxuICAgICAgd2lkdGg6IDMwMHB4O1xcbiAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgICB9XFxuICAgIC8qIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMqL1xcbiAgICAvKiMjIyMjIyMjIyMjUmVzcG9uc2l2ZSBSYW5nZSMjIyMjIyMjKi9cXG4gICAgLyojIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyovXFxuICAgIC8qIyMjIyMjIyMjIyMjIyNDb3JlIFN0eWxlIyMjIyMjIyMjIyMqL1xcblxcbiAgICBpbnB1dFt0eXBlPVxcXCJyYW5nZVxcXCJdIHtcXG4gICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgIH1cXG5cXG4gICAgaW5wdXRbdHlwZT1cXFwicmFuZ2VcXFwiXTo6LXdlYmtpdC1zbGlkZXItdGh1bWIge1xcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcXG4gICAgfVxcblxcbiAgICBpbnB1dFt0eXBlPVxcXCJyYW5nZVxcXCJdOmZvY3VzIHtcXG4gICAgICBvdXRsaW5lOiBub25lO1xcbiAgICB9XFxuXFxuICAgIGlucHV0W3R5cGU9XFxcInJhbmdlXFxcIl06Oi1tcy10cmFjayB7XFxuICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xcbiAgICAgIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgICAgY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICB9XFxuICAgIC8qIyMjIyMjIyMjIyMjI1RodW1iIyMjIyMjIyMjIyMjIyMqL1xcblxcbiAgICBpbnB1dFt0eXBlPVxcXCJyYW5nZVxcXCJdOjotd2Via2l0LXNsaWRlci10aHVtYiB7XFxuICAgICAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xcbiAgICAgIGhlaWdodDogMzZweDtcXG4gICAgICB3aWR0aDogMzZweDtcXG4gICAgICBiYWNrZ3JvdW5kOiAjNTU1O1xcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgICBtYXJnaW4tdG9wOiAtMTJweDtcXG4gICAgfVxcblxcbiAgICBpbnB1dFt0eXBlPVxcXCJyYW5nZVxcXCJdOjotbW96LXJhbmdlLXRodW1iIHtcXG4gICAgICBoZWlnaHQ6IDM2cHg7XFxuICAgICAgd2lkdGg6IDM2cHg7XFxuICAgICAgYmFja2dyb3VuZDogIzU1NTtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIH1cXG5cXG4gICAgaW5wdXRbdHlwZT1cXFwicmFuZ2VcXFwiXTo6LW1zLXRodW1iIHtcXG4gICAgICBoZWlnaHQ6IDM2cHg7XFxuICAgICAgd2lkdGg6IDM2cHg7XFxuICAgICAgYmFja2dyb3VuZDogIzU1NTtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgIH1cXG4gICAgLyojIyMjIyMjIyMjIyMjVHJhY2sjIyMjIyMjIyMjIyMjIyovXFxuXFxuICAgIGlucHV0W3R5cGU9XFxcInJhbmdlXFxcIl06Oi13ZWJraXQtc2xpZGVyLXJ1bm5hYmxlLXRyYWNrIHtcXG4gICAgICB3aWR0aDogMTAwJTtcXG4gICAgICBoZWlnaHQ6IDEycHg7XFxuICAgICAgY3Vyc29yOiBwb2ludGVyO1xcbiAgICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgIH1cXG5cXG4gICAgaW5wdXRbdHlwZT1cXFwicmFuZ2VcXFwiXTphY3RpdmU6Oi13ZWJraXQtc2xpZGVyLXJ1bm5hYmxlLXRyYWNrIHtcXG4gICAgICBiYWNrZ3JvdW5kOiAjZDZkNmQ2O1xcbiAgICB9XFxuXFxuICAgIGlucHV0W3R5cGU9XFxcInJhbmdlXFxcIl06Oi1tb3otcmFuZ2UtdHJhY2sge1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGhlaWdodDogMTJweDtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgYmFja2dyb3VuZDogI2NjYztcXG4gICAgfVxcblxcbiAgICBpbnB1dFt0eXBlPVxcXCJyYW5nZVxcXCJdOjotbXMtdHJhY2sge1xcbiAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgIGhlaWdodDogMTJweDtcXG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICAgICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XFxuICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgICBjb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIH1cXG5cXG4gICAgaW5wdXRbdHlwZT1cXFwicmFuZ2VcXFwiXTo6LW1zLWZpbGwtbG93ZXIge1xcbiAgICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgIH1cXG5cXG4gICAgaW5wdXRbdHlwZT1cXFwicmFuZ2VcXFwiXTpmb2N1czo6LW1zLWZpbGwtbG93ZXIge1xcbiAgICAgIGJhY2tncm91bmQ6ICNkZGQ7XFxuICAgIH1cXG5cXG4gICAgaW5wdXRbdHlwZT1cXFwicmFuZ2VcXFwiXTo6LW1zLWZpbGwtdXBwZXIge1xcbiAgICAgIGJhY2tncm91bmQ6ICNjY2M7XFxuICAgIH1cXG5cXG4gICAgaW5wdXRbdHlwZT1cXFwicmFuZ2VcXFwiXTpmb2N1czo6LW1zLWZpbGwtdXBwZXIge1xcbiAgICAgIGJhY2tncm91bmQ6ICNkZGQ7XFxuICAgIH1cXG4gIH1cXG59XFxuXFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmZ1bmN0aW9uIF9zbGljZWRUb0FycmF5KGFyciwgaSkgeyByZXR1cm4gX2FycmF5V2l0aEhvbGVzKGFycikgfHwgX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgfHwgX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KGFyciwgaSkgfHwgX25vbkl0ZXJhYmxlUmVzdCgpOyB9XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7IH1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikgeyBpZiAoIW8pIHJldHVybjsgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpOyBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lOyBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTsgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB9XG5cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7IGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoOyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcInVuZGVmaW5lZFwiIHx8ICEoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgaXNPbGRJRSA9IGZ1bmN0aW9uIGlzT2xkSUUoKSB7XG4gIHZhciBtZW1vO1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUoKSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vID09PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3NcbiAgICAgIC8vIEBzZWUgaHR0cDovL2Jyb3dzZXJoYWNrcy5jb20vI2hhY2stZTcxZDg2OTJmNjUzMzQxNzNmZWU3MTVjMjIyY2I4MDVcbiAgICAgIC8vIFRlc3RzIGZvciBleGlzdGVuY2Ugb2Ygc3RhbmRhcmQgZ2xvYmFscyBpcyB0byBhbGxvdyBzdHlsZS1sb2FkZXJcbiAgICAgIC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuICAgICAgLy8gQHNlZSBodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlci9pc3N1ZXMvMTc3XG4gICAgICBtZW1vID0gQm9vbGVhbih3aW5kb3cgJiYgZG9jdW1lbnQgJiYgZG9jdW1lbnQuYWxsICYmICF3aW5kb3cuYXRvYik7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW87XG4gIH07XG59KCk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiBnZXRUYXJnZXQoKSB7XG4gIHZhciBtZW1vID0ge307XG4gIHJldHVybiBmdW5jdGlvbiBtZW1vcml6ZSh0YXJnZXQpIHtcbiAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbiAgfTtcbn0oKTtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gIHZhciBhdHRyaWJ1dGVzID0gb3B0aW9ucy5hdHRyaWJ1dGVzIHx8IHt9O1xuXG4gIGlmICh0eXBlb2YgYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBhdHRyaWJ1dGVzLm5vbmNlID0gbm9uY2U7XG4gICAgfVxuICB9XG5cbiAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmoubWVkaWEgPyBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpLmNvbmNhdChvYmouY3NzLCBcIn1cIikgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZSgnbWVkaWEnKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3TGlzdCkgIT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsImltcG9ydCB7U3RhdGVLZXlUeXBlfSBmcm9tIFwiLi9zdGF0ZUtleVwiO1xuXG50eXBlIENhbGxiYWNrID0gKHN0YXRlOiBTdGF0ZSwga2V5OlN0YXRlS2V5VHlwZSwgdmFsdWU6IGFueSkgPT4gdm9pZDtcblxuZXhwb3J0IGNsYXNzIFN0YXRlIHtcblxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogU3RhdGU7XG4gICAgcHJpdmF0ZSBzdGF0aWMgX2NhbGxiYWNrczogU2V0PENhbGxiYWNrPiA9IG5ldyBTZXQoKTtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCk6IFN0YXRlIHtcbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlID0gbmV3IFN0YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICB0aGlzLl9pbnN0YW5jZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0U3RhdGUoa2V5OiBTdGF0ZUtleVR5cGUsIGRlZmF1bHRWYWx1ZTogc3RyaW5nID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSB0aGlzLmdldEluc3RhbmNlKClba2V5XVxuICAgICAgICBpZiAoY3VycmVudCA9PT0gdW5kZWZpbmVkIHx8IGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBjdXJyZW50XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0U3RhdGUoa2V5OiBTdGF0ZUtleVR5cGUsIHZhbHVlOiBhbnksIHRyaWdnZXJVcGRhdGU6IGJvb2xlYW4gPSB0cnVlKTogYW55IHtcbiAgICAgICAgdGhpcy5nZXRJbnN0YW5jZSgpW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgaWYgKCF0cmlnZ2VyVXBkYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgfVxuICAgICAgICBTdGF0ZS5fY2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICBjYWxsYmFjayh0aGlzLCBrZXksIHZhbHVlKVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICB9XG5cbiAgICBzdGF0aWMgZmxpcFN0YXRlKGtleTogU3RhdGVLZXlUeXBlKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBTdGF0ZS5nZXRTdGF0ZShrZXkpXG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gZmxpcCBzdGF0ZSBkdWUgdG8gaW52YWxpZCBzdGF0ZSB0eXBlXCIsIGN1cnJlbnQpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gU3RhdGUuc2V0U3RhdGUoa2V5LCAhY3VycmVudClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHN0YXRpYyByZWdpc3RlckNhbGxiYWNrKGNhbGxiYWNrOiBDYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKVxuICAgIH1cblxuICAgIHN0YXRpYyBkZXJlZ2lzdGVyQ2FsbGJhY2soY2FsbGJhY2s6IENhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrcy5kZWxldGUoY2FsbGJhY2spXG4gICAgfVxuXG59XG4iLCJleHBvcnQgY29uc3QgU3RhdGVLZXkgPSB7XG4gICAgUEFUVEVSTjogXCJwYXR0ZXJuXCIsXG4gICAgUEFMRVRURTogXCJwYWxldHRlXCIsXG4gICAgTlVNX1BPSU5UUzogXCJudW0tcG9pbnRzXCIsXG4gICAgQU5JTUFURTogXCJhbmltYXRlXCIsXG4gICAgTU9VU0VfUE9TOiBcIm1vdXNlLXBvc1wiLFxuICAgIENBTU9fREVQVEg6IFwiY2Ftby1kZXB0aFwiLFxuICAgIE1PVVNFX0lOVEVSQUNUSU9OOiBcIm1vdXNlLWludGVyYWN0aW9uXCIsXG4gICAgRU5BQkxFX0NPTlRST0xfUEFORUw6IFwiZW5hYmxlLWNvbnRyb2wtcGFuZWxcIlxufSBhcyBjb25zdFxuXG5leHBvcnQgdHlwZSBTdGF0ZUtleVR5cGUgPSB0eXBlb2YgU3RhdGVLZXlba2V5b2YgdHlwZW9mIFN0YXRlS2V5XTtcbiIsImltcG9ydCB7QWN0aW9uS2V5VHlwZX0gZnJvbSBcIi4vYWN0aW9uS2V5XCI7XG5pbXBvcnQgRGljdCA9IE5vZGVKUy5EaWN0O1xuXG50eXBlIENhbGxiYWNrID0gKGtleTpBY3Rpb25LZXlUeXBlKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgQWN0aW9uIHtcblxuICAgIHByaXZhdGUgc3RhdGljIF9pbnN0YW5jZTogQWN0aW9uO1xuICAgIHByaXZhdGUgc3RhdGljIF9jYWxsYmFja3M6IERpY3Q8U2V0PENhbGxiYWNrPj4gPSB7fTtcblxuICAgIHByaXZhdGUgY29uc3RydWN0b3IoKSB7fVxuXG4gICAgc3RhdGljIGdldEluc3RhbmNlKCk6IEFjdGlvbiB7XG4gICAgICAgIGlmICh0aGlzLl9pbnN0YW5jZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnN0YW5jZSA9IG5ldyBBY3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5faW5zdGFuY2U7XG4gICAgfVxuXG4gICAgc3RhdGljIGVtaXQoa2V5OiBBY3Rpb25LZXlUeXBlKSB7XG4gICAgICAgIHRoaXMuX2NhbGxiYWNrc1trZXldLmZvckVhY2goY2FsbGJhY2sgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2soa2V5KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHN0YXRpYyByZWdpc3RlcihrZXk6IEFjdGlvbktleVR5cGUsIGNhbGxiYWNrOiBDYWxsYmFjaykge1xuICAgICAgICBpZiAodGhpcy5fY2FsbGJhY2tzW2tleV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2tzW2tleV0gPSBuZXcgU2V0KClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jYWxsYmFja3Nba2V5XS5hZGQoY2FsbGJhY2spXG4gICAgfVxuXG4gICAgc3RhdGljIGRlcmVnaXN0ZXIoa2V5OiBBY3Rpb25LZXlUeXBlLCBjYWxsYmFjazogQ2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fY2FsbGJhY2tzW2tleV0uZGVsZXRlKGNhbGxiYWNrKVxuICAgIH1cblxufVxuXG4iLCJleHBvcnQgY29uc3QgQWN0aW9uS2V5ID0ge1xuICAgIENPTE9SX1VQREFURUQ6IFwiY29sb3JfdXBkYXRlZFwiLFxufSBhcyBjb25zdFxuXG5leHBvcnQgdHlwZSBBY3Rpb25LZXlUeXBlID0gdHlwZW9mIEFjdGlvbktleVtrZXlvZiB0eXBlb2YgQWN0aW9uS2V5XTtcbiIsImltcG9ydCB7QWN0aW9ufSBmcm9tIFwiLi9tb2RlbC9hY3Rpb25cIjtcbmltcG9ydCB7QWN0aW9uS2V5fSBmcm9tIFwiLi9tb2RlbC9hY3Rpb25LZXlcIjtcblxuZXhwb3J0IGNsYXNzIENvbG9yUGFsZXR0ZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfaWQ6IHN0cmluZywgcHJpdmF0ZSBfbmFtZTogc3RyaW5nLCBwcml2YXRlIF9jb2xvcnM6IHN0cmluZ1tdKSB7XG4gICAgfVxuICAgIGdldCBpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuICAgIGdldCBjb2xvcnMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvcnM7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29sb3Ige1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2RlZmF1bHRQYWxldHRlczogTWFwPHN0cmluZywgQ29sb3JQYWxldHRlPlxuICAgIHByaXZhdGUgc3RhdGljIF91c2VyUGFsZXR0ZXM6IE1hcDxzdHJpbmcsIENvbG9yUGFsZXR0ZT5cblxuICAgIHN0YXRpYyBjdG9yID0gKCgpID0+IHtcbiAgICAgICAgQ29sb3IubG9hZERlZmF1bHRQYWxldHRlcygpXG4gICAgICAgIENvbG9yLmxvYWRVc2VyUGFsZXR0ZXMoKVxuICAgIH0pKClcblxuICAgIHByaXZhdGUgc3RhdGljIGxvYWREZWZhdWx0UGFsZXR0ZXMoKSB7XG4gICAgICAgIENvbG9yLl9kZWZhdWx0UGFsZXR0ZXMgPSBuZXcgTWFwKCk7XG4gICAgICAgIENvbG9yLl9kZWZhdWx0UGFsZXR0ZXMuc2V0KFxuICAgICAgICAgICAgXCJncmVlblwiLFxuICAgICAgICAgICAgbmV3IENvbG9yUGFsZXR0ZShcImdyZWVuXCIsIFwiR3JlZW5cIiwgW1xuICAgICAgICAgICAgICAgIFwiIzZDN0M1MlwiLCAvLyBMaWdodCBncmVlblxuICAgICAgICAgICAgICAgIFwiIzRBNEY0NFwiLCAvLyBEZWVwIGdyZWVuXG4gICAgICAgICAgICAgICAgXCIjM0IzODQ1XCIsIC8vIERhcmsgR3JheVxuICAgICAgICAgICAgICAgIFwiI0IyQjA5NlwiLCAvLyBJdm9yeVxuICAgICAgICAgICAgXSksKVxuICAgICAgICBDb2xvci5fZGVmYXVsdFBhbGV0dGVzLnNldChcbiAgICAgICAgICAgIFwiYmx1ZVwiLFxuICAgICAgICAgICAgbmV3IENvbG9yUGFsZXR0ZShcImJsdWVcIiwgXCJCbHVlXCIsIFtcbiAgICAgICAgICAgICAgICBcIiMzNzcwREJcIixcbiAgICAgICAgICAgICAgICBcIiMxNzJGNUNcIixcbiAgICAgICAgICAgICAgICBcIiM3QjlGRTBcIixcbiAgICAgICAgICAgICAgICBcIiMzMjQxNUNcIixcbiAgICAgICAgICAgICAgICBcIiMyQTU2QThcIixcbiAgICAgICAgICAgIF0pLFxuICAgICAgICApXG4gICAgICAgIENvbG9yLl9kZWZhdWx0UGFsZXR0ZXMuc2V0KFxuICAgICAgICAgICAgXCJkZXNlcnRcIixcbiAgICAgICAgICAgIG5ldyBDb2xvclBhbGV0dGUoXCJkZXNlcnRcIiwgXCJEZXNlcnRcIiwgW1xuICAgICAgICAgICAgICAgIFwiI0I4QTc5QlwiLFxuICAgICAgICAgICAgICAgIFwiIzcyNjI1RFwiLFxuICAgICAgICAgICAgICAgIFwiI0E2OTg4N1wiLFxuICAgICAgICAgICAgICAgIFwiIzZENEMyRFwiXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgKVxuICAgICAgICBDb2xvci5fZGVmYXVsdFBhbGV0dGVzLnNldChcbiAgICAgICAgICAgIFwib3JhbmdlXCIsXG4gICAgICAgICAgICBuZXcgQ29sb3JQYWxldHRlKFwib3JhbmdlXCIsIFwiT3JhbmdlXCIsIFtcbiAgICAgICAgICAgICAgICBcIiNGRjgyNERcIixcbiAgICAgICAgICAgICAgICBcIiM3ODI0MDBcIixcbiAgICAgICAgICAgICAgICBcIiNGNzRBMDBcIixcbiAgICAgICAgICAgICAgICBcIiM3QTQ0MkNcIixcbiAgICAgICAgICAgICAgICBcIiNDNzNCMDBcIlxuICAgICAgICAgICAgXSksXG4gICAgICAgIClcbiAgICAgICAgQ29sb3IuX2RlZmF1bHRQYWxldHRlcy5zZXQoXG4gICAgICAgICAgICBcInVjMVwiLFxuICAgICAgICAgICAgbmV3IENvbG9yUGFsZXR0ZShcInVjMVwiLCBcIlVDMVwiLCBbXG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9zdG9yZS51bmRlcmNvdmVyaXNtLmNvbS91bmRlcmNvdmVybWVuL2l0ZW0vZGV0YWlsLzFfMV9VQzFBNDUwOC00XzEvUTAyXG4gICAgICAgICAgICAgICAgXCIjQzRCOUI1XCIsXG4gICAgICAgICAgICAgICAgXCIjNjgzQTMxXCIsXG4gICAgICAgICAgICAgICAgXCIjNEE1RjU2XCJcbiAgICAgICAgICAgIF0pLFxuICAgICAgICApXG4gICAgICAgIENvbG9yLl9kZWZhdWx0UGFsZXR0ZXMuc2V0KFxuICAgICAgICAgICAgXCJ1YzJcIixcbiAgICAgICAgICAgIG5ldyBDb2xvclBhbGV0dGUoXCJ1YzJcIiwgXCJVQzJcIiwgW1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vc3RvcmUudW5kZXJjb3ZlcmlzbS5jb20vdW5kZXJjb3Zlcm1lbi9pdGVtL2RldGFpbC8xXzFfVUMxQTQ1MDgtNF8xL1EwMlxuICAgICAgICAgICAgICAgIFwiIzI2MjUyN1wiLFxuICAgICAgICAgICAgICAgIFwiIzUxM0EzRVwiLFxuICAgICAgICAgICAgICAgIFwiIzQyNEI1MFwiXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgKVxuICAgICAgICBDb2xvci5fZGVmYXVsdFBhbGV0dGVzLnNldChcbiAgICAgICAgICAgIFwiYndcIixcbiAgICAgICAgICAgIG5ldyBDb2xvclBhbGV0dGUoXCJid1wiLCBcIkJXXCIsIFtcbiAgICAgICAgICAgICAgICAvLyBodHRwczovL3N0b3JlLnVuZGVyY292ZXJpc20uY29tL3VuZGVyY292ZXJtZW4vaXRlbS9kZXRhaWwvMV8xX1VDMUE0NTA4LTRfMS9RMDJcbiAgICAgICAgICAgICAgICBcIiNGRkZGRkZcIixcbiAgICAgICAgICAgICAgICBcIiMwMDAwMDBcIlxuICAgICAgICAgICAgXSksXG4gICAgICAgIClcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBsb2FkVXNlclBhbGV0dGVzKCkge1xuICAgICAgICB0aGlzLl91c2VyUGFsZXR0ZXMgPSBuZXcgTWFwPHN0cmluZywgQ29sb3JQYWxldHRlPigpXG4gICAgICAgIGNvbnN0IHJhd1VzZXJQYWxldHRlczogQ29sb3JQYWxldHRlW10gPSBKU09OLnBhcnNlKHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInVzZXJQYWxldHRlc1wiKSB8fCBcIltdXCIpXG4gICAgICAgIHJhd1VzZXJQYWxldHRlcy5mb3JFYWNoKHZhbCA9PiB7XG4gICAgICAgICAgICBjb25zdCBwYWxldHRlID0gbmV3IENvbG9yUGFsZXR0ZShcbiAgICAgICAgICAgICAgICB2YWxbXCJfaWRcIl0sIHZhbFtcIl9uYW1lXCJdLCB2YWxbXCJfY29sb3JzXCJdXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLl91c2VyUGFsZXR0ZXMuc2V0KHBhbGV0dGUuaWQsIHBhbGV0dGUpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgc2F2ZVVzZXJQYWxldHRlcygpIHtcbiAgICAgICAgbGV0IHNlcmlhbGl6YWJsZVVzZXJQYWxldHRlOiBDb2xvclBhbGV0dGVbXSA9IFtdXG4gICAgICAgIHRoaXMuX3VzZXJQYWxldHRlcy5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHNlcmlhbGl6YWJsZVVzZXJQYWxldHRlLnB1c2godmFsdWUpXG4gICAgICAgIH0pXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShcInVzZXJQYWxldHRlc1wiLCBKU09OLnN0cmluZ2lmeShzZXJpYWxpemFibGVVc2VyUGFsZXR0ZSkpXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBzZXRVc2VyUGFsZXR0ZShwYWxldHRlOiBDb2xvclBhbGV0dGUpIHtcbiAgICAgICAgdGhpcy5fdXNlclBhbGV0dGVzLnNldChwYWxldHRlLmlkLCBwYWxldHRlKVxuICAgICAgICB0aGlzLnNhdmVVc2VyUGFsZXR0ZXMoKVxuICAgICAgICBBY3Rpb24uZW1pdChBY3Rpb25LZXkuQ09MT1JfVVBEQVRFRClcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGRlbGV0ZVVzZXJQYWxldHRlKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fdXNlclBhbGV0dGVzLmRlbGV0ZShpZClcbiAgICAgICAgdGhpcy5zYXZlVXNlclBhbGV0dGVzKClcbiAgICAgICAgQWN0aW9uLmVtaXQoQWN0aW9uS2V5LkNPTE9SX1VQREFURUQpXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmFuZ2UgPSAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IEFycmF5LmZyb20oe2xlbmd0aDogKGVuZCAtIHN0YXJ0ICsgMSl9LCAodiwgaykgPT4gayArIHN0YXJ0KTtcblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0RGVmYXVsdFBhbGV0dGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFBhbGV0dGVzXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBnZXRVc2VyUGFsZXR0ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl91c2VyUGFsZXR0ZXNcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEJhc2VDb2xvckZyb21QYWxldHRlKGNvbG9yOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gKHRoaXMuX2RlZmF1bHRQYWxldHRlcy5nZXQoY29sb3IpIHx8IHRoaXMuX3VzZXJQYWxldHRlcy5nZXQoY29sb3IpKS5jb2xvcnNbMF07XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjb2xvckdlbmVyYXRvckZyb21QYWxldHRlKGNvbG9yOiBzdHJpbmcpOiBJdGVyYWJsZUl0ZXJhdG9yPHN0cmluZz4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jb2xvckdlbmVyYXRvcihcbiAgICAgICAgICAgICh0aGlzLl9kZWZhdWx0UGFsZXR0ZXMuZ2V0KGNvbG9yKSB8fCB0aGlzLl91c2VyUGFsZXR0ZXMuZ2V0KGNvbG9yKSkuY29sb3JzXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyAqIGNvbG9yR2VuZXJhdG9yKGNvbG9yczogc3RyaW5nW10pOiBJdGVyYWJsZUl0ZXJhdG9yPHN0cmluZz4ge1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBsZXQgaW5kaWNlcyA9IHRoaXMucmFuZ2UoMCwgY29sb3JzLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gaW5kaWNlcy5sZW5ndGg7IDEgPCBpOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBsZXQgayA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGkpO1xuICAgICAgICAgICAgICAgIFtpbmRpY2VzW2tdLCBpbmRpY2VzW2kgLSAxXV0gPSBbaW5kaWNlc1tpIC0gMV0sIGluZGljZXNba11dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgY29sb3JzW2luZGljZXNbaV1dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtQb2x5Z29ufSBmcm9tIFwiLi4vZ2VvbWV0cnkvcG9seWdvblwiO1xuaW1wb3J0IHtDaXJjbGV9IGZyb20gXCIuLi9nZW9tZXRyeS9jaXJjbGVcIjtcbmltcG9ydCB7UG9pbnR9IGZyb20gXCIuLi9nZW9tZXRyeS9wb2ludFwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZUxvZ2ljIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGN0eCkge31cbiAgICBhYnN0cmFjdCBkcmF3KHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKVxuICAgIGFic3RyYWN0IHN0YXJ0QW5pbWF0ZSgpXG4gICAgYWJzdHJhY3Qgc3RvcEFuaW1hdGUoKVxuICAgIGFic3RyYWN0IGhhbmRsZU1vdXNlTW92ZShwOiBQb2ludClcblxuICAgIHByb3RlY3RlZCBkcmF3Q2lyY2xlKGNpcmNsZTogQ2lyY2xlKSB7XG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IGNpcmNsZS5jb2xvcjtcbiAgICAgICAgdGhpcy5jdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIHRoaXMuY3R4LmFyYyhcbiAgICAgICAgICAgIGNpcmNsZS5jZW50ZXIueCwgY2lyY2xlLmNlbnRlci55LCBjaXJjbGUucmFkaXVzLFxuICAgICAgICAgICAgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgdGhpcy5jdHguZmlsbCgpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBkcmF3UG9seWdvbihwb2x5OiBQb2x5Z29uLCBjb2xvcjogc3RyaW5nID0gdW5kZWZpbmVkLCBzdHJva2VDb2xvcjogc3RyaW5nID0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChjb2xvcikge1xuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gY29sb3I7XG4gICAgICAgICAgICB0aGlzLmN0eC5zdHJva2VTdHlsZSA9IHN0cm9rZUNvbG9yIHx8IGNvbG9yO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gcG9seS5jb2xvcjtcbiAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gcG9seS5zdHJva2VDb2xvciB8fCBwb2x5LmNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBwb2x5LnBvaW50cy5mb3JFYWNoKCh2YWwsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5tb3ZlVG8oLi4udmFsLmNvb3JkKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eC5saW5lVG8oLi4udmFsLmNvb3JkKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgdGhpcy5jdHguc3Ryb2tlKCk7XG4gICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgRGljdCA9IE5vZGVKUy5EaWN0O1xuXG5leHBvcnQgY2xhc3MgUG9pbnQge1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgX2NhY2hlOiB7W2lkOiBzdHJpbmddOiBQb2ludH0gPSB7fVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfeDogbnVtYmVyLCBwcml2YXRlIF95OiBudW1iZXIsIHByaXZhdGUgX2luZGV4OiBudW1iZXIgPSBudWxsKSB7XG4gICAgfVxuXG4gICAgZ2V0IGNvb3JkKCk6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgICAgICByZXR1cm4gW3RoaXMuX3gsIHRoaXMuX3ldXG4gICAgfVxuXG4gICAgZ2V0IHgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3g7XG4gICAgfVxuXG4gICAgc2V0IHgodmFsKSB7XG4gICAgICAgIHRoaXMuX3ggPSB2YWxcbiAgICB9XG5cbiAgICBnZXQgeSgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5feTtcbiAgICB9XG5cbiAgICBzZXQgeSh2YWwpIHtcbiAgICAgICAgdGhpcy5feSA9IHZhbFxuICAgIH1cblxuICAgIGdldCBrZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMueH0sJHt0aGlzLnl9YFxuICAgIH1cblxuICAgIGdldCBoYXNJbmRleCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5faW5kZXhcbiAgICB9XG5cbiAgICBnZXQga2V5SW5kZXgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGV4XG4gICAgfVxuXG4gICAgcHVibGljIGRpc3QoYW5vdGhlcjogUG9pbnQpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHRoaXMueCAtIGFub3RoZXIueCwgMikgKyBNYXRoLnBvdyh0aGlzLnkgLSBhbm90aGVyLnksIDIpKVxuICAgIH1cblxuICAgIHB1YmxpYyBlcXVhbHMoYW5vdGhlcjogUG9pbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueCA9PT0gYW5vdGhlci54ICYmIHRoaXMueSA9PT0gYW5vdGhlci55XG4gICAgfVxuXG4gICAgcHVibGljIGRpdihhOiBudW1iZXIpOiBQb2ludCB7XG4gICAgICAgIHRoaXMueCAvPSBhXG4gICAgICAgIHRoaXMueSAvPSBhXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBvZih4OiBudW1iZXIsIHk6IG51bWJlcik6IFBvaW50IHtcbiAgICAgICAgbGV0IGtleSA9IGAke3h9LCR7eX1gO1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9jYWNoZVtrZXldID0gbmV3IFBvaW50KHgsIHkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZVtrZXldXG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyByYW5kb21PZih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgKSB7XG4gICAgICAgIHJldHVybiBQb2ludC5vZihcbiAgICAgICAgICAgIHggKyBNYXRoLnJhbmRvbSgpICogd2lkdGgsXG4gICAgICAgICAgICB5ICsgTWF0aC5yYW5kb20oKSAqIGhlaWdodCxcbiAgICAgICAgKVxuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgcmFuZG9tUG9pbnRzT2YoeDogbnVtYmVyLCB5OiBudW1iZXIsIHI6IG51bWJlciwgbnVtOiBudW1iZXIpOiBQb2ludFtdIHtcbiAgICAgICAgbGV0IHJhZHMgPSBbXVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bTsgaSsrKSB7XG4gICAgICAgICAgICByYWRzLnB1c2goTWF0aC5QSSAqIDIgKiBNYXRoLnJhbmRvbSgpKVxuICAgICAgICB9XG4gICAgICAgIHJhZHMuc29ydCgpXG4gICAgICAgIHJldHVybiByYWRzLm1hcCgodmFsKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gUG9pbnQub2YoXG4gICAgICAgICAgICAgICAgeCArIHIgKiBNYXRoLmNvcyh2YWwpLFxuICAgICAgICAgICAgICAgIHkgKyByICogTWF0aC5zaW4odmFsKSxcbiAgICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHJhbmRvbVBvaW50czJPZih4OiBudW1iZXIsIHk6IG51bWJlciwgcjogbnVtYmVyLCBudW06IG51bWJlcik6IFBvaW50W10ge1xuICAgICAgICBsZXQgcmFkcyA9IFtdXG4gICAgICAgIGxldCBzaGlmdCA9IE1hdGguUEkgKiAyICogTWF0aC5yYW5kb20oKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW07IGkrKykge1xuICAgICAgICAgICAgbGV0IHJuZCA9IE1hdGgucmFuZG9tKCkgKiAxLjUgLSAwLjc1O1xuICAgICAgICAgICAgbGV0IHJhZCA9IChNYXRoLlBJICogMiAvIG51bSkgKiBpICsgcm5kXG4gICAgICAgICAgICByYWRzLnB1c2gocmFkICsgc2hpZnQpXG4gICAgICAgIH1cbiAgICAgICAgcmFkcy5zb3J0KClcbiAgICAgICAgcmV0dXJuIHJhZHMubWFwKCh2YWwpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBQb2ludC5vZihcbiAgICAgICAgICAgICAgICB4ICsgciAqIE1hdGguY29zKHZhbCksXG4gICAgICAgICAgICAgICAgeSArIHIgKiBNYXRoLnNpbih2YWwpLFxuICAgICAgICAgICAgKVxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImltcG9ydCB7UG9pbnR9IGZyb20gXCIuL3BvaW50XCJcblxuZXhwb3J0IGNsYXNzIFBvbHlnb24ge1xuICAgIHByaXZhdGUgX2NlbnRlcjogUG9pbnRcbiAgICBwcml2YXRlIG1pblg6IG51bWJlclxuICAgIHByaXZhdGUgbWluWTogbnVtYmVyXG4gICAgcHJpdmF0ZSBtYXhYOiBudW1iZXJcbiAgICBwcml2YXRlIG1heFk6IG51bWJlclxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfcG9pbnRzOiBBcnJheTxQb2ludD4sIHByaXZhdGUgX2NvbG9yOiBzdHJpbmcsIHByaXZhdGUgX3N0cm9rZUNvbG9yOiBzdHJpbmcgPSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fY2VudGVyID0gdGhpcy5fcG9pbnRzLnJlZHVjZSgocHJldiwgY3VyLCBpLCBhcnIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUG9pbnQocHJldi54ICsgY3VyLngsIHByZXYueSArIGN1ci55KTtcbiAgICAgICAgfSkuZGl2KHRoaXMuX3BvaW50cy5sZW5ndGgpXG4gICAgICAgIHRoaXMuX3BvaW50cy5zb3J0KHRoaXMuY29tcGFyZVBvaW50cy5iaW5kKHRoaXMpKVxuICAgICAgICB0aGlzLnNldE1pbk1heCgpXG4gICAgfVxuICAgIGdldCBwb2ludHMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wb2ludHM7XG4gICAgfVxuICAgIGdldCBjb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbG9yO1xuICAgIH1cbiAgICBzZXQgY29sb3IodmFsOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fY29sb3IgPSB2YWxcbiAgICB9XG4gICAgZ2V0IHN0cm9rZUNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3Ryb2tlQ29sb3JcbiAgICB9XG4gICAgc2V0IHN0cm9rZUNvbG9yKHZhbDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX3N0cm9rZUNvbG9yID0gdmFsXG4gICAgfVxuICAgIGdldCBrZXkoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9pbnRzLm1hcChwID0+IHAua2V5KS5qb2luKFwiL1wiKVxuICAgIH1cbiAgICBnZXQga2V5SW5kZXgoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9pbnRzLm1hcChwID0+IHAua2V5SW5kZXgudG9TdHJpbmcoKSkuam9pbihcIi9cIilcbiAgICB9XG5cbiAgICBwdWJsaWMgZXF1YWxzKGFub3RoZXI6IFBvbHlnb24pIHtcbiAgICAgICAgaWYgKHRoaXMucG9pbnRzLmxlbmd0aCAhPSBhbm90aGVyLnBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCB0aGlzLnBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnBvaW50c1tpXS5lcXVhbHMoYW5vdGhlci5wb2ludHNbaV0pKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZXNlIGNvZGVzIGFyZSBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNzQ5MDkyMy8yMjY3ODI1XG4gICAgICogQHBhcmFtIHBcbiAgICAgKi9cbiAgICBwdWJsaWMgaXNDb250YWluaW5nKHA6IFBvaW50KTogYm9vbGVhbiB7XG4gICAgICAgIGxldCBpc0luc2lkZSA9IGZhbHNlO1xuICAgICAgICBpZiAocC54IDwgdGhpcy5taW5YIHx8IHAueCA+IHRoaXMubWF4WCB8fCBwLnkgPCB0aGlzLm1pblkgfHwgcC55ID4gdGhpcy5tYXhZKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgaiA9IHRoaXMucG9pbnRzLmxlbmd0aCAtIDE7IGkgPCB0aGlzLnBvaW50cy5sZW5ndGg7IGogPSBpKyspIHtcbiAgICAgICAgICAgIGlmICggKHRoaXMucG9pbnRzW2ldLnkgPiBwLnkpICE9ICh0aGlzLnBvaW50c1tqXS55ID4gcC55KSAmJlxuICAgICAgICAgICAgICAgIHAueCA8ICh0aGlzLnBvaW50c1tqXS54IC0gdGhpcy5wb2ludHNbaV0ueCkgKiAocC55IC0gdGhpcy5wb2ludHNbaV0ueSkgLyAodGhpcy5wb2ludHNbal0ueSAtIHRoaXMucG9pbnRzW2ldLnkpICsgdGhpcy5wb2ludHNbaV0ueCApIHtcbiAgICAgICAgICAgICAgICBpc0luc2lkZSA9ICFpc0luc2lkZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXNJbnNpZGU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRNaW5NYXgoKSB7XG4gICAgICAgIHRoaXMubWluWCA9IHRoaXMucG9pbnRzWzBdLnhcbiAgICAgICAgdGhpcy5tYXhYID0gdGhpcy5wb2ludHNbMF0ueFxuICAgICAgICB0aGlzLm1pblkgPSB0aGlzLnBvaW50c1swXS55XG4gICAgICAgIHRoaXMubWF4WSA9IHRoaXMucG9pbnRzWzBdLnlcbiAgICAgICAgZm9yIChsZXQgbiA9IDE7IG4gPCB0aGlzLnBvaW50cy5sZW5ndGg7IG4rKykge1xuICAgICAgICAgICAgbGV0IHEgPSB0aGlzLnBvaW50c1tuXTtcbiAgICAgICAgICAgIHRoaXMubWluWCA9IE1hdGgubWluKHEueCwgdGhpcy5taW5YKTtcbiAgICAgICAgICAgIHRoaXMubWF4WCA9IE1hdGgubWF4KHEueCwgdGhpcy5tYXhYKTtcbiAgICAgICAgICAgIHRoaXMubWluWSA9IE1hdGgubWluKHEueSwgdGhpcy5taW5ZKTtcbiAgICAgICAgICAgIHRoaXMubWF4WSA9IE1hdGgubWF4KHEueSwgdGhpcy5tYXhZKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZXNlIGNvZGVzIGFyZSBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82OTg5MzgzLzIyNjc4MjVcbiAgICAgKiBAcGFyYW0gYVxuICAgICAqIEBwYXJhbSBiXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbXBhcmVQb2ludHMoYTogUG9pbnQsIGI6IFBvaW50KTogbnVtYmVyIHtcbiAgICAgICAgaWYgKGEuZXF1YWxzKGIpKSB7XG4gICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGludGVybmFsID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKGEueCAtIHRoaXMuX2NlbnRlci54ID49IDAgJiYgYi54IC0gdGhpcy5fY2VudGVyLnggPCAwKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKGEueCAtIHRoaXMuX2NlbnRlci54IDwgMCAmJiBiLnggLSB0aGlzLl9jZW50ZXIueCA+PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChhLnggLSB0aGlzLl9jZW50ZXIueCA9PSAwICYmIGIueCAtIHRoaXMuX2NlbnRlci54ID09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoYS55IC0gdGhpcy5fY2VudGVyLnkgPj0gMCB8fCBiLnkgLSB0aGlzLl9jZW50ZXIueSA+PSAwKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS55ID4gYi55O1xuICAgICAgICAgICAgICAgIHJldHVybiBiLnkgPiBhLnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGNvbXB1dGUgdGhlIGNyb3NzIHByb2R1Y3Qgb2YgdmVjdG9ycyAodGhpcy5fY2VudGVyIC0+IGEpIHggKHRoaXMuX2NlbnRlciAtPiBiKVxuICAgICAgICAgICAgbGV0IGRldCA9IChhLnggLSB0aGlzLl9jZW50ZXIueCkgKiAoYi55IC0gdGhpcy5fY2VudGVyLnkpIC0gKGIueCAtIHRoaXMuX2NlbnRlci54KSAqIChhLnkgLSB0aGlzLl9jZW50ZXIueSk7XG4gICAgICAgICAgICBpZiAoZGV0IDwgMClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmIChkZXQgPiAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICAgICAgLy8gcG9pbnRzIGEgYW5kIGIgYXJlIG9uIHRoZSBzYW1lIGxpbmUgZnJvbSB0aGUgdGhpcy5fY2VudGVyXG4gICAgICAgICAgICAvLyBjaGVjayB3aGljaCBwb2ludCBpcyBjbG9zZXIgdG8gdGhlIHRoaXMuX2NlbnRlclxuICAgICAgICAgICAgbGV0IGQxID0gKGEueCAtIHRoaXMuX2NlbnRlci54KSAqIChhLnggLSB0aGlzLl9jZW50ZXIueCkgKyAoYS55IC0gdGhpcy5fY2VudGVyLnkpICogKGEueSAtIHRoaXMuX2NlbnRlci55KTtcbiAgICAgICAgICAgIGxldCBkMiA9IChiLnggLSB0aGlzLl9jZW50ZXIueCkgKiAoYi54IC0gdGhpcy5fY2VudGVyLngpICsgKGIueSAtIHRoaXMuX2NlbnRlci55KSAqIChiLnkgLSB0aGlzLl9jZW50ZXIueSk7XG4gICAgICAgICAgICByZXR1cm4gZDEgPiBkMjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW50ZXJuYWwoKT8gMSA6IC0xXG4gICAgfVxufVxuIiwiaW1wb3J0IHtCYXNlTG9naWN9IGZyb20gXCIuL2Jhc2VMb2dpY1wiO1xuaW1wb3J0IHtDb2xvcn0gZnJvbSBcIi4uL2NvbG9yXCI7XG5pbXBvcnQge1N0YXRlfSBmcm9tIFwiLi4vbW9kZWwvc3RhdGVcIjtcbmltcG9ydCB7UG9seWdvbn0gZnJvbSBcIi4uL2dlb21ldHJ5L3BvbHlnb25cIjtcbmltcG9ydCB7UG9pbnR9IGZyb20gXCIuLi9nZW9tZXRyeS9wb2ludFwiO1xuXG5leHBvcnQgY2xhc3MgTTkwUGF0dGVybjEgZXh0ZW5kcyBCYXNlTG9naWMge1xuICAgIHN0YXJ0QW5pbWF0ZSgpIHtcbiAgICB9XG4gICAgc3RvcEFuaW1hdGUoKSB7XG4gICAgfVxuICAgIGhhbmRsZU1vdXNlTW92ZShwOiBQb2ludCkge1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3KHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIGxldCBjb2xJdGVyID0gQ29sb3IuY29sb3JHZW5lcmF0b3JGcm9tUGFsZXR0ZShTdGF0ZS5nZXRTdGF0ZShcInBhbGV0dGVcIiwgXCJncmVlblwiKSk7XG4gICAgICAgIGNvbnN0IHVuaXQgPSA1MDA7XG4gICAgICAgIGxldCB4TnVtID0gTWF0aC5jZWlsKHdpZHRoIC8gdW5pdCk7XG4gICAgICAgIGxldCB5TnVtID0gTWF0aC5jZWlsKGhlaWdodCAvIHVuaXQpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeE51bTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHlOdW07IGorKykge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdW5pdCAqIGk7XG4gICAgICAgICAgICAgICAgbGV0IHkgPSB1bml0ICogajtcbiAgICAgICAgICAgICAgICBsZXQgY3VyciA9IGNvbEl0ZXIubmV4dCgpXG4gICAgICAgICAgICAgICAgbGV0IG51bSA9IDQ7XG4gICAgICAgICAgICAgICAgbGV0IHJuZCA9IE1hdGgucmFuZG9tKCk7XG4gICAgICAgICAgICAgICAgaWYgKHJuZCA+IDAuNjYpIHtcbiAgICAgICAgICAgICAgICAgICAgbnVtID0gNVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocm5kID4gMC4zMykge1xuICAgICAgICAgICAgICAgICAgICBudW0gPSA2XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBybmQyID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgICAgICAgICBpZiAocm5kMiA+IDAuOCkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgcDIgPSBuZXcgUG9seWdvbihcbiAgICAgICAgICAgICAgICAgICAgUG9pbnQucmFuZG9tUG9pbnRzMk9mKHgsIHksIHVuaXQsIG51bSlcbiAgICAgICAgICAgICAgICAgICAgLCBjdXJyLnZhbHVlKVxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1BvbHlnb24ocDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdW5pdDIgPSAyMDA7XG4gICAgICAgIHhOdW0gPSBNYXRoLmNlaWwod2lkdGggLyB1bml0Mik7XG4gICAgICAgIHlOdW0gPSBNYXRoLmNlaWwoaGVpZ2h0IC8gdW5pdDIpO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgeE51bTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHlOdW07IGorKykge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gdW5pdDIgKiBpO1xuICAgICAgICAgICAgICAgIGxldCB5ID0gdW5pdDIgKiBqO1xuICAgICAgICAgICAgICAgIGxldCBjdXJyID0gY29sSXRlci5uZXh0KClcbiAgICAgICAgICAgICAgICBsZXQgbnVtID0gNDtcbiAgICAgICAgICAgICAgICBsZXQgcm5kID0gTWF0aC5yYW5kb20oKTtcbiAgICAgICAgICAgICAgICBpZiAocm5kID4gMC42Nikge1xuICAgICAgICAgICAgICAgICAgICBudW0gPSA1XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChybmQgPiAwLjMzKSB7XG4gICAgICAgICAgICAgICAgICAgIG51bSA9IDZcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbGV0IHJuZDIgPSBNYXRoLnJhbmRvbSgpO1xuICAgICAgICAgICAgICAgIGlmIChybmQyID4gMC44KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxldCBwMiA9IG5ldyBQb2x5Z29uKFxuICAgICAgICAgICAgICAgICAgICBQb2ludC5yYW5kb21Qb2ludHMyT2YoeCwgeSwgdW5pdDIsIG51bSlcbiAgICAgICAgICAgICAgICAgICAgLCBjdXJyLnZhbHVlKVxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1BvbHlnb24ocDIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHtQb2ludH0gZnJvbSBcIi4vcG9pbnRcIlxuXG5leHBvcnQgY2xhc3MgQ2lyY2xlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9jZW50ZXI6IFBvaW50LCBwcml2YXRlIF9yYWRpdXM6IG51bWJlciwgcHJpdmF0ZSBfY29sb3I6IHN0cmluZykge1xuICAgIH1cbiAgICBnZXQgY2VudGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2VudGVyO1xuICAgIH1cbiAgICBnZXQgcmFkaXVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmFkaXVzO1xuICAgIH1cbiAgICBnZXQgY29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jb2xvcjtcbiAgICB9XG4gICAgcHVibGljIGlzQ29udGFpbmluZyhwOiBQb2ludCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jZW50ZXIuZGlzdChwKSA8IHRoaXMucmFkaXVzXG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIFV0aWwge1xuICAgIHB1YmxpYyBzdGF0aWMgcmFuZ2UgPSAoc3RhcnQ6IG51bWJlciwgZW5kOiBudW1iZXIpID0+IEFycmF5LmZyb20oe2xlbmd0aDogKGVuZCAtIHN0YXJ0ICsgMSl9LCAodiwgaykgPT4gayArIHN0YXJ0KTtcbn1cbiIsImltcG9ydCB7UG9pbnR9IGZyb20gXCIuL3BvaW50XCJcblxuZXhwb3J0IGNsYXNzIEVkZ2Uge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgX3N0YXJ0OiBQb2ludFxuICAgIHByaXZhdGUgcmVhZG9ubHkgX2VuZDogUG9pbnRcblxuICAgIGNvbnN0cnVjdG9yKHAxOiBQb2ludCwgcDI6IFBvaW50KSB7XG4gICAgICAgIGlmIChwMS5oYXNJbmRleCAmJiBwMi5oYXNJbmRleCkge1xuICAgICAgICAgICAgaWYgKHAxLmtleUluZGV4IDwgcDIua2V5SW5kZXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydCA9IHAxXG4gICAgICAgICAgICAgICAgdGhpcy5fZW5kID0gcDJcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSBwMlxuICAgICAgICAgICAgICAgIHRoaXMuX2VuZCA9IHAxXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAocDEueCA8PSBwMi54KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhcnQgPSBwMVxuICAgICAgICAgICAgICAgIHRoaXMuX2VuZCA9IHAyXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXJ0ID0gcDJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmQgPSBwMVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IHN0YXJ0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhcnRcbiAgICB9XG5cbiAgICBnZXQgZW5kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZW5kXG4gICAgfVxuXG4gICAgZ2V0IGtleSgpIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc3RhcnQua2V5fS8ke3RoaXMuZW5kLmtleX1gXG4gICAgfVxuXG4gICAgZ2V0IGtleUluZGV4KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLnN0YXJ0LmtleUluZGV4fS0ke3RoaXMuZW5kLmtleUluZGV4fWBcbiAgICB9XG5cblxuICAgIHB1YmxpYyBlcXVhbHMoYW5vdGhlcjogRWRnZSk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3N0YXJ0LmVxdWFscyhhbm90aGVyLl9zdGFydCkgJiYgdGhpcy5fZW5kLmVxdWFscyhhbm90aGVyLl9lbmQpKSB8fFxuICAgICAgICAgICAgKHRoaXMuX3N0YXJ0LmVxdWFscyhhbm90aGVyLl9lbmQpICYmIHRoaXMuX2VuZC5lcXVhbHMoYW5vdGhlci5fc3RhcnQpKVxuICAgIH1cbn1cbiIsImltcG9ydCB7UG9pbnR9IGZyb20gXCIuL3BvaW50XCJcbmltcG9ydCB7UG9seWdvbn0gZnJvbSBcIi4vcG9seWdvblwiO1xuaW1wb3J0IHtDaXJjbGV9IGZyb20gXCIuL2NpcmNsZVwiO1xuaW1wb3J0IHtFZGdlfSBmcm9tIFwiLi9lZGdlXCI7XG5cbmV4cG9ydCBjbGFzcyBUcmlhbmdsZSBleHRlbmRzIFBvbHlnb257XG5cbiAgICBwcml2YXRlIF9hcmVhOiBudW1iZXJcbiAgICBwcml2YXRlIF9lZGdlczogQXJyYXk8RWRnZT5cbiAgICBwcml2YXRlIF9jaXJjdW1jaXJjbGU6IENpcmNsZTtcblxuICAgIGNvbnN0cnVjdG9yKF9wb2ludHM6IEFycmF5PFBvaW50PiwgX2NvbG9yOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKF9wb2ludHMubGVuZ3RoICE9IDMpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiVHJpYW5nbGUgbXVzdCBoYXZlIDMgcG9pbnRzXCIpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKF9wb2ludHMsIF9jb2xvcik7XG4gICAgfVxuXG4gICAgZ2V0IGFyZWEoKTogbnVtYmVyIHtcbiAgICAgICAgaWYgKCF0aGlzLl9hcmVhKSB7XG4gICAgICAgICAgICB0aGlzLl9hcmVhID0gTWF0aC5hYnMoXG4gICAgICAgICAgICAgICAgMC41ICpcbiAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzWzBdLnggKiAodGhpcy5wb2ludHNbMV0ueSAtIHRoaXMucG9pbnRzWzJdLnkpXG4gICAgICAgICAgICAgICAgICAgICsgdGhpcy5wb2ludHNbMV0ueCAqICh0aGlzLnBvaW50c1syXS55IC0gdGhpcy5wb2ludHNbMF0ueSlcbiAgICAgICAgICAgICAgICAgICAgKyB0aGlzLnBvaW50c1syXS54ICogKHRoaXMucG9pbnRzWzBdLnkgLSB0aGlzLnBvaW50c1sxXS55KSlcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fYXJlYVxuICAgIH1cblxuICAgIGdldCBlZGdlcygpOiBBcnJheTxFZGdlPiB7XG4gICAgICAgIGlmKCF0aGlzLl9lZGdlcyl7XG4gICAgICAgICAgICB0aGlzLl9lZGdlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fZWRnZXMucHVzaChuZXcgRWRnZSh0aGlzLnBvaW50c1swXSx0aGlzLnBvaW50c1sxXSkpO1xuICAgICAgICAgICAgdGhpcy5fZWRnZXMucHVzaChuZXcgRWRnZSh0aGlzLnBvaW50c1sxXSx0aGlzLnBvaW50c1syXSkpO1xuICAgICAgICAgICAgdGhpcy5fZWRnZXMucHVzaChuZXcgRWRnZSh0aGlzLnBvaW50c1syXSx0aGlzLnBvaW50c1swXSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9lZGdlcztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q2lyY3VtY2lyY2xlKCk6IENpcmNsZSB7XG4gICAgICAgIGlmICghdGhpcy5fY2lyY3VtY2lyY2xlKSB7XG4gICAgICAgICAgICBjb25zdCB4MSA9IHRoaXMucG9pbnRzWzBdLng7XG4gICAgICAgICAgICBjb25zdCB5MSA9IHRoaXMucG9pbnRzWzBdLnk7XG4gICAgICAgICAgICBjb25zdCB4MiA9IHRoaXMucG9pbnRzWzFdLng7XG4gICAgICAgICAgICBjb25zdCB5MiA9IHRoaXMucG9pbnRzWzFdLnk7XG4gICAgICAgICAgICBjb25zdCB4MyA9IHRoaXMucG9pbnRzWzJdLng7XG4gICAgICAgICAgICBjb25zdCB5MyA9IHRoaXMucG9pbnRzWzJdLnk7XG5cbiAgICAgICAgICAgIGNvbnN0IHgxcG93MiA9IE1hdGgucG93KHgxLDIpO1xuICAgICAgICAgICAgY29uc3QgeDJwb3cyID0gTWF0aC5wb3coeDIsMik7XG4gICAgICAgICAgICBjb25zdCB4M3BvdzIgPSBNYXRoLnBvdyh4MywyKTtcbiAgICAgICAgICAgIGNvbnN0IHkxcG93MiA9IE1hdGgucG93KHkxLDIpO1xuICAgICAgICAgICAgY29uc3QgeTJwb3cyID0gTWF0aC5wb3coeTIsMik7XG4gICAgICAgICAgICBjb25zdCB5M3BvdzIgPSBNYXRoLnBvdyh5MywyKTtcblxuICAgICAgICAgICAgY29uc3QgYyA9IDIgKiAoKHgyIC0geDEpICogKHkzIC0geTEpIC0gKHkyIC0geTEpICogKHgzIC0geDEpKTtcbiAgICAgICAgICAgIGNvbnN0IHggPSAoKHkzIC0geTEpICogKHgycG93MiAtIHgxcG93MiArIHkycG93MiAtIHkxcG93MikgKyAoeTEgLSB5MikgKiAoeDNwb3cyIC0geDFwb3cyICsgeTNwb3cyIC0geTFwb3cyKSkgLyBjO1xuICAgICAgICAgICAgY29uc3QgeSA9ICgoeDEgLSB4MykgKiAoeDJwb3cyIC0geDFwb3cyICsgeTJwb3cyIC0geTFwb3cyKSArICh4MiAtIHgxKSAqICh4M3BvdzIgLSB4MXBvdzIgKyB5M3BvdzIgLSB5MXBvdzIpKSAvIGM7XG5cbiAgICAgICAgICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoTWF0aC5wb3coeDEgLSB4LDIpICsgTWF0aC5wb3coeTEgLSB5LDIpKTtcbiAgICAgICAgICAgIHRoaXMuX2NpcmN1bWNpcmNsZSA9ICBuZXcgQ2lyY2xlKG5ldyBQb2ludCh4LHkpLCByLCBcIndoaXRlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9jaXJjdW1jaXJjbGU7XG4gICAgfVxufVxuIiwiZXhwb3J0IGNsYXNzIEluZGV4R2VuZXJhdG9yIHtcblxuICAgIHByaXZhdGUgc3RhdGljIF9pbmRleDogbnVtYmVyXG5cbiAgICBwdWJsaWMgc3RhdGljIGluY3JlbWVudEFuZEdldCgpOiBudW1iZXIge1xuICAgICAgICBpZiAodGhpcy5faW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5faW5kZXggPSAwXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2luZGV4KytcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIHJlc2V0KCkge1xuICAgICAgICB0aGlzLl9pbmRleCA9IDBcbiAgICB9XG59XG4iLCJpbXBvcnQge0Jhc2VMb2dpY30gZnJvbSBcIi4vYmFzZUxvZ2ljXCI7XG5pbXBvcnQge0NvbG9yfSBmcm9tIFwiLi4vY29sb3JcIjtcbmltcG9ydCB7U3RhdGV9IGZyb20gXCIuLi9tb2RlbC9zdGF0ZVwiO1xuaW1wb3J0IHtQb2ludH0gZnJvbSBcIi4uL2dlb21ldHJ5L3BvaW50XCI7XG5pbXBvcnQge0NpcmNsZX0gZnJvbSBcIi4uL2dlb21ldHJ5L2NpcmNsZVwiO1xuaW1wb3J0IHtVdGlsfSBmcm9tIFwiLi4vdXRpbFwiO1xuaW1wb3J0IHtUcmlhbmdsZX0gZnJvbSBcIi4uL2dlb21ldHJ5L3RyaWFuZ2xlXCI7XG5pbXBvcnQge1N0YXRlS2V5fSBmcm9tIFwiLi4vbW9kZWwvc3RhdGVLZXlcIjtcbmltcG9ydCBUaW1lb3V0ID0gTm9kZUpTLlRpbWVvdXQ7XG5pbXBvcnQge1BvbHlnb259IGZyb20gXCIuLi9nZW9tZXRyeS9wb2x5Z29uXCI7XG5pbXBvcnQge0luZGV4R2VuZXJhdG9yfSBmcm9tIFwiLi4vdXRpbC9pbmRleEdlbmVyYXRvclwiO1xuXG5leHBvcnQgY2xhc3MgTTkwUGF0dGVybjIgZXh0ZW5kcyBCYXNlTG9naWMge1xuXG4gICAgcHJpdmF0ZSBwb2ludHM6IEFycmF5PFBvaW50PlxuICAgIHByaXZhdGUgdHJpYW5nbGVzOiBBcnJheTxUcmlhbmdsZT5cbiAgICBwcml2YXRlIHRyaWFuZ2xlQXJlYXM6IEFycmF5PG51bWJlcj5cbiAgICBwcml2YXRlIHRyaWFuZ2xlQXJlYU1lZGlhbjogbnVtYmVyXG4gICAgcHJpdmF0ZSBlZGdlTWFwOiB7W2tleTogc3RyaW5nXTogQXJyYXk8UG9seWdvbj59XG4gICAgcHJpdmF0ZSB2aXNpdE1hcDoge1trZXk6IHN0cmluZ106IHN0cmluZ31cblxuICAgIC8vIEZvciBtb3VzZSBpbnRlcmFjdGlvblxuICAgIHByaXZhdGUgYWN0aXZlVHJpYW5nbGUgPSBuZXcgQXJyYXk8VHJpYW5nbGU+KDIpICAvLyBDdXJyZW50LCBQcmV2XG4gICAgcHJpdmF0ZSBhZGphY2VudFBvbHlnb25zOiB7W2tleTogc3RyaW5nXTogUG9seWdvbn1cblxuICAgIC8vIEZvciBhbmltYXRpb25cbiAgICBwcml2YXRlIGludGVydmFsOiBUaW1lb3V0XG5cbiAgICBjb25zdHJ1Y3RvcihjdHgpIHtcbiAgICAgICAgc3VwZXIoY3R4KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdyh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLnBvaW50cyA9IFtdXG4gICAgICAgIGNvbnN0IHVuaXQgPSA1MDBcbiAgICAgICAgY29uc3QgeEdyaWQgPSBNYXRoLmNlaWwod2lkdGggLyB1bml0KVxuICAgICAgICBjb25zdCB5R3JpZCA9IE1hdGguY2VpbChoZWlnaHQgLyB1bml0KVxuXG4gICAgICAgIEluZGV4R2VuZXJhdG9yLnJlc2V0KClcblxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgeEdyaWQgKyAxOyBpKyspIHtcbiAgICAgICAgICAgIGZvcihsZXQgaiA9IDA7IGogPCB5R3JpZCArIDE7IGorKykge1xuICAgICAgICAgICAgICAgIHRoaXMucG9pbnRzLnB1c2gobmV3IFBvaW50KFxuICAgICAgICAgICAgICAgICAgICAod2lkdGggLyB4R3JpZCkgKiBpLCAoaGVpZ2h0IC8geUdyaWQpICogaiwgSW5kZXhHZW5lcmF0b3IuaW5jcmVtZW50QW5kR2V0KClcbiAgICAgICAgICAgICAgICApKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IG51bVBvaW50cyA9IFN0YXRlLmdldFN0YXRlKFN0YXRlS2V5Lk5VTV9QT0lOVFMpIC0gMVxuICAgICAgICBVdGlsLnJhbmdlKDAsIG51bVBvaW50cykuZm9yRWFjaCgoXywgaSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wb2ludHMucHVzaChuZXcgUG9pbnQoTWF0aC5yYW5kb20oKSAqIHdpZHRoLCBNYXRoLnJhbmRvbSgpICogaGVpZ2h0LCBJbmRleEdlbmVyYXRvci5pbmNyZW1lbnRBbmRHZXQoKSkpXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gQ2lyY3VtY2lyY2xlXG4gICAgICAgIGNvbnN0IHIgPSBNYXRoLnNxcnQoKHdpZHRoICogd2lkdGggKyBoZWlnaHQgKiBoZWlnaHQpKSAvIDJcbiAgICAgICAgY29uc3QgY2VudGVyID0gbmV3IFBvaW50KHdpZHRoIC8gMiwgaGVpZ2h0LzIpXG4gICAgICAgIHRoaXMuZHJhd0NpcmNsZShuZXcgQ2lyY2xlKGNlbnRlciwgciwgXCJyZ2JhKDEsIDEsIDEsIDApXCIpKVxuXG4gICAgICAgIC8vIENpcmN1bXRyaWFuZ2xlXG4gICAgICAgIGNvbnN0IHAxID0gbmV3IFBvaW50KGNlbnRlci54IC0gTWF0aC5zcXJ0KDMpICogcixjZW50ZXIueSAtIHIsIEluZGV4R2VuZXJhdG9yLmluY3JlbWVudEFuZEdldCgpKVxuICAgICAgICBjb25zdCBwMiA9IG5ldyBQb2ludChjZW50ZXIueCArIE1hdGguc3FydCgzKSAqIHIsY2VudGVyLnkgLSByLCBJbmRleEdlbmVyYXRvci5pbmNyZW1lbnRBbmRHZXQoKSlcbiAgICAgICAgY29uc3QgcDMgPSBuZXcgUG9pbnQoY2VudGVyLngsY2VudGVyLnkgKyByICogMiwgSW5kZXhHZW5lcmF0b3IuaW5jcmVtZW50QW5kR2V0KCkpXG4gICAgICAgIGNvbnN0IGJhc2VUcmlhbmdsZSA9IG5ldyBUcmlhbmdsZShbcDEsIHAyLCBwM10sIFwicGlua1wiKVxuXG4gICAgICAgIGxldCBjb2xJdGVyID0gQ29sb3IuY29sb3JHZW5lcmF0b3JGcm9tUGFsZXR0ZShTdGF0ZS5nZXRTdGF0ZShTdGF0ZUtleS5QQUxFVFRFLCBcImdyZWVuXCIpKTtcbiAgICAgICAgY29sSXRlci5uZXh0KClcblxuICAgICAgICBsZXQgdHJpYW5nbGVzID0gW2Jhc2VUcmlhbmdsZV1cbiAgICAgICAgdGhpcy5wb2ludHMuZm9yRWFjaCgocCwgaykgPT4ge1xuICAgICAgICAgICAgbGV0IGVkZ2VzID0gW11cbiAgICAgICAgICAgIC8vIHRoaXMuZHJhd0NpcmNsZShuZXcgQ2lyY2xlKHAsIDEwLCBcInJlZFwiKSlcbiAgICAgICAgICAgIHRyaWFuZ2xlcy5mb3JFYWNoKCh0cmlhbmdsZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0cmlhbmdsZS5nZXRDaXJjdW1jaXJjbGUoKS5pc0NvbnRhaW5pbmcocCkpIHtcbiAgICAgICAgICAgICAgICAgICAgZWRnZXMgPSBlZGdlcy5jb25jYXQodHJpYW5nbGUuZWRnZXMpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0cmlhbmdsZXNbaV0gIC8vIFRPRE86IE9wdGltaXphdGlvblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIGVkZ2VzXG4gICAgICAgICAgICAgICAgLm1hcCgoZWRnZSwgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVkZ2VzLmxlbmd0aDsgaisrICl7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPSBqICYmIGVkZ2UuZXF1YWxzKGVkZ2VzW2pdKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVkZ2VcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoeCAgID0+IHgpXG4gICAgICAgICAgICAgICAgLmZvckVhY2goZWRnZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyaWFuZ2xlcy5wdXNoKG5ldyBUcmlhbmdsZShbZWRnZS5zdGFydCwgZWRnZS5lbmQsIHBdLCBjb2xJdGVyLm5leHQoKS52YWx1ZSkpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnRyaWFuZ2xlcyA9IHRyaWFuZ2xlcy5maWx0ZXIoeCA9PiB4KVxuICAgICAgICB0aGlzLnRyaWFuZ2xlQXJlYXMgPSB0aGlzLnRyaWFuZ2xlcy5tYXAodCA9PiB0LmFyZWEpLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgICAgdGhpcy50cmlhbmdsZUFyZWFNZWRpYW4gPSB0aGlzLnRyaWFuZ2xlQXJlYXNbTWF0aC5mbG9vcih0aGlzLnRyaWFuZ2xlQXJlYXMubGVuZ3RoIC8gMildXG5cbiAgICAgICAgdGhpcy5idWlsZEVkZ2VNYXAoKVxuICAgICAgICB0aGlzLnZpc2l0TWFwID0ge31cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudHJpYW5nbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0cmlhbmdsZSA9IHRoaXMudHJpYW5nbGVzW2ldXG4gICAgICAgICAgICBpZiAodGhpcy52aXNpdE1hcFt0cmlhbmdsZS5rZXlJbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tYWtlQ2Ftb3VmbGFnZSh0cmlhbmdsZSwgY29sSXRlci5uZXh0KCkudmFsdWUsIFN0YXRlLmdldFN0YXRlKFN0YXRlS2V5LkNBTU9fREVQVEgpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYWtlQ2Ftb3VmbGFnZSh0cmlhbmdsZTogVHJpYW5nbGUsIGNvbG9yOiBzdHJpbmcsIGRlcHRoOiBudW1iZXIsIG9yaWdpbmFsRGVwdGg6IG51bWJlciA9IG51bGwpIHtcbiAgICAgICAgb3JpZ2luYWxEZXB0aCA9IG9yaWdpbmFsRGVwdGggfHwgZGVwdGhcbiAgICAgICAgdHJpYW5nbGUuY29sb3IgPSBjb2xvclxuXG4gICAgICAgIHRoaXMudmlzaXRNYXBbdHJpYW5nbGUua2V5SW5kZXhdID0gY29sb3JcblxuICAgICAgICBpZiAoZGVwdGggPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5kcmF3UG9seWdvbih0cmlhbmdsZSwgY29sb3IpXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBhbG9uZSA9IGRlcHRoID09PSBvcmlnaW5hbERlcHRoXG4gICAgICAgIGxldCB2ZXJzaW9uID0gXCJ2MlwiXG4gICAgICAgIGxldCBhZGphY2VudFRyaWFuZ2xlcyA9IFtdXG4gICAgICAgIHRyaWFuZ2xlLmVkZ2VzLmZvckVhY2goKGVkZ2UsIGopID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGFkamFjZW50ID0gdGhpcy5lZGdlTWFwW2VkZ2Uua2V5SW5kZXhdXG4gICAgICAgICAgICAgICAgLmZpbHRlcihlcCA9PiAhZXAuZXF1YWxzKHRyaWFuZ2xlKSlbMF0gYXMgVHJpYW5nbGVcblxuICAgICAgICAgICAgaWYgKGFkamFjZW50KSB7XG4gICAgICAgICAgICAgICAgYWRqYWNlbnRUcmlhbmdsZXMucHVzaChhZGphY2VudClcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFkamFjZW50ICYmICF0aGlzLnZpc2l0TWFwW2FkamFjZW50LmtleUluZGV4XSkge1xuICAgICAgICAgICAgICAgIGFsb25lID0gZmFsc2VcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gXCJ2MVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLnJhbmRvbSgpIDwgKGRlcHRoIC8gb3JpZ2luYWxEZXB0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFrZUNhbW91ZmxhZ2UoYWRqYWNlbnQsIGNvbG9yLCBkZXB0aCAtIDEsIG9yaWdpbmFsRGVwdGgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZlcnNpb24gPT09IFwidjJcIikge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYWRqYWNlbnQuYXJlYSA8IDUwMDApIHsgLy8gdGhpcy50cmlhbmdsZUFyZWFNZWRpYW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFrZUNhbW91ZmxhZ2UoYWRqYWNlbnQsIGNvbG9yLCBkZXB0aCAtIDEsIG9yaWdpbmFsRGVwdGgpXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5yYW5kb20oKSA8IChkZXB0aCAvIG9yaWdpbmFsRGVwdGgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYWtlQ2Ftb3VmbGFnZShhZGphY2VudCwgY29sb3IsIGRlcHRoIC0gMSwgb3JpZ2luYWxEZXB0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoYWxvbmUpIHtcbiAgICAgICAgICAgIGlmIChhZGphY2VudFRyaWFuZ2xlcy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gZmluZCBhZGphY2VudFRyaWFuZ2xlXCIpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIENvcHkgY29sb3IgZnJvbSBvbmUgb2YgYWRqYWNlbnQgdHJpYW5nbGVzXG4gICAgICAgICAgICAgICAgdHJpYW5nbGUuY29sb3IgPSB0aGlzLnZpc2l0TWFwW2FkamFjZW50VHJpYW5nbGVzWzBdLmtleUluZGV4XVxuICAgICAgICAgICAgICAgIHRoaXMuZHJhd1BvbHlnb24odHJpYW5nbGUsIHRyaWFuZ2xlLmNvbG9yLCB0cmlhbmdsZS5jb2xvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZHJhd1BvbHlnb24odHJpYW5nbGUsIGNvbG9yKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXJ0QW5pbWF0ZSgpIHtcbiAgICAgICAgdGhpcy5pbnRlcnZhbCA9IHNldEludGVydmFsKHRoaXMuYW5pbWF0ZS5iaW5kKHRoaXMpLCA1MClcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcEFuaW1hdGUoKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbClcbiAgICB9XG5cbiAgICBwdWJsaWMgYW5pbWF0ZSgpIHtcbiAgICAgICAgY29uc3QgZmFjdG9yID0gNFxuICAgICAgICB0aGlzLnBvaW50cy5mb3JFYWNoKChwb2ludCwgaSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wb2ludHNbaV0ueCArPSAoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiBmYWN0b3I7XG4gICAgICAgICAgICB0aGlzLnBvaW50c1tpXS55ICs9IChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIGZhY3RvcjtcbiAgICAgICAgfSlcblxuICAgICAgICB0aGlzLnRyaWFuZ2xlcy5mb3JFYWNoKHRyaWFuZ2xlID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQWN0aXZlVHJpYW5nbGUodHJpYW5nbGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3UG9seWdvbih0cmlhbmdsZSwgXCJyZWRcIilcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5hZGphY2VudFBvbHlnb25zICYmIHRoaXMuYWRqYWNlbnRQb2x5Z29uc1t0cmlhbmdsZS5rZXlJbmRleF0pIHtcbiAgICAgICAgICAgICAgIHRoaXMuZHJhd1BvbHlnb24odHJpYW5nbGUsIFwiYmx1ZVwiKVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRyYXdQb2x5Z29uKHRyaWFuZ2xlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHB1YmxpYyBoYW5kbGVNb3VzZU1vdmUocDogUG9pbnQpIHtcbiAgICAgICAgaWYgKCFTdGF0ZS5nZXRTdGF0ZShTdGF0ZUtleS5NT1VTRV9JTlRFUkFDVElPTikpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50cmlhbmdsZXMuZm9yRWFjaCh0cmlhbmdsZSA9PiB7XG4gICAgICAgICAgICBpZiAodHJpYW5nbGUuaXNDb250YWluaW5nKHApICYmIFN0YXRlLmdldFN0YXRlKFN0YXRlS2V5Lk1PVVNFX0lOVEVSQUNUSU9OKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQWN0aXZlVHJpYW5nbGUodHJpYW5nbGUpXG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3UG9seWdvbih0cmlhbmdsZSwgXCJyZWRcIilcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kcmF3UG9seWdvbih0cmlhbmdsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICAvLyBPdmVyd3JpdGUgYWRqYWNlbnQgcG9seWdvbnNcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5hZGphY2VudFBvbHlnb25zKS5mb3JFYWNoKGsgPT4ge1xuICAgICAgICAgICAgdGhpcy5kcmF3UG9seWdvbih0aGlzLmFkamFjZW50UG9seWdvbnNba10sIFwiYmx1ZVwiKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHByaXZhdGUgYnVpbGRFZGdlTWFwKCkge1xuICAgICAgICB0aGlzLmVkZ2VNYXAgPSB7fVxuICAgICAgICB0aGlzLnRyaWFuZ2xlcy5mb3JFYWNoKHRyaWFuZ2xlID0+IHtcbiAgICAgICAgICAgIHRyaWFuZ2xlLmVkZ2VzLmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWRnZU1hcFtlLmtleUluZGV4XSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWRnZU1hcFtlLmtleUluZGV4XSA9IFtdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZWRnZU1hcFtlLmtleUluZGV4XS5wdXNoKHRyaWFuZ2xlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMuZHJhd1BvbHlnb24odHJpYW5nbGUpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVBY3RpdmVUcmlhbmdsZSh0cmlhbmdsZTogVHJpYW5nbGUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmVUcmlhbmdsZSh0cmlhbmdsZSkpIHtcbiAgICAgICAgICAgIC8vIFRoZSBzYW1lIHRyaWFuZ2xlLCBza2lwIHVwZGF0aW5nXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGl2ZVRyaWFuZ2xlWzFdID0gdGhpcy5hY3RpdmVUcmlhbmdsZVswXVxuICAgICAgICB0aGlzLmFjdGl2ZVRyaWFuZ2xlWzBdID0gdHJpYW5nbGVcbiAgICAgICAgdGhpcy5hZGphY2VudFBvbHlnb25zID0ge31cblxuICAgICAgICAvLyBVcGRhdGUgYWRqYWNlbnQgcG9seWdvbnNcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHRyaWFuZ2xlLmVkZ2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBlZGdlUG9seWdvbnMgPSB0aGlzLmVkZ2VNYXBbdHJpYW5nbGUuZWRnZXNbaV0ua2V5SW5kZXhdXG4gICAgICAgICAgICBpZiAoZWRnZVBvbHlnb25zICYmIGVkZ2VQb2x5Z29ucy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgZWRnZVBvbHlnb25zLmZvckVhY2goZXAgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWVwLmVxdWFscyh0cmlhbmdsZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRqYWNlbnRQb2x5Z29uc1tlcC5rZXlJbmRleF0gPSBlcFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgaXNBY3RpdmVUcmlhbmdsZSh0cmlhbmdsZTogVHJpYW5nbGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlVHJpYW5nbGVbMF0gJiYgdGhpcy5hY3RpdmVUcmlhbmdsZVswXS5lcXVhbHModHJpYW5nbGUpXG4gICAgfVxuXG5cbn1cbiIsImltcG9ydCB7IFN0YXRlIH0gZnJvbSBcIi4vbW9kZWwvc3RhdGVcIjtcbmltcG9ydCB7U3RhdGVLZXksIFN0YXRlS2V5VHlwZX0gZnJvbSBcIi4vbW9kZWwvc3RhdGVLZXlcIjtcbmltcG9ydCB7Q29sb3J9IGZyb20gXCIuL2NvbG9yXCI7XG5pbXBvcnQge0Jhc2VMb2dpY30gZnJvbSBcIi4vZHJhd2luZy9iYXNlTG9naWNcIjtcbmltcG9ydCB7TTkwUGF0dGVybjF9IGZyb20gXCIuL2RyYXdpbmcvbTkwUGF0dGVybjFcIjtcbmltcG9ydCB7TTkwUGF0dGVybjJ9IGZyb20gXCIuL2RyYXdpbmcvbTkwUGF0dGVybjJcIjtcbmltcG9ydCB7UG9pbnR9IGZyb20gXCIuL2dlb21ldHJ5L3BvaW50XCI7XG5cbmV4cG9ydCBjbGFzcyBDYW52YXMge1xuICAgIHByaXZhdGUgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEO1xuICAgIHByaXZhdGUgd2lkdGg6IG51bWJlcjtcbiAgICBwcml2YXRlIGhlaWdodDogbnVtYmVyO1xuICAgIHByaXZhdGUgbG9naWNzOiB7W25hbWU6IHN0cmluZ106IEJhc2VMb2dpY31cblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX2Jhc2VDb2w6IHN0cmluZyA9IFwiIzZDN0M1MlwiKSB7XG4gICAgICAgIC8vIEluaXQgVmFyaWFibGVzXG4gICAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIikgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgICAgIHRoaXMuY3R4ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdGhpcy5sb2dpY3MgPSB7XG4gICAgICAgICAgICBcIm05MHAxXCI6IG5ldyBNOTBQYXR0ZXJuMSh0aGlzLmN0eCksXG4gICAgICAgICAgICBcIm05MHAyXCI6IG5ldyBNOTBQYXR0ZXJuMih0aGlzLmN0eClcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWdpc3RlciBIYW5kbGVyXG4gICAgICAgIHdpbmRvdy5vbnJlc2l6ZSA9IHRoaXMucmVkcmF3SGFuZGxlci5iaW5kKHRoaXMpXG4gICAgICAgIFN0YXRlLnJlZ2lzdGVyQ2FsbGJhY2sodGhpcy5yZWRyYXdIYW5kbGVyLmJpbmQodGhpcykpXG4gICAgICAgIC8vIEluaXRpYWwgRHJhd1xuICAgICAgICB0aGlzLnJlZHJhd0hhbmRsZXIobnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlRHJhdygpIHtcbiAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gQ29sb3IuZ2V0QmFzZUNvbG9yRnJvbVBhbGV0dGUoU3RhdGUuZ2V0U3RhdGUoU3RhdGVLZXkuUEFMRVRURSkpO1xuICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuZHJhdygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVkcmF3SGFuZGxlcihzdGF0ZTogU3RhdGUsIGtleTogU3RhdGVLZXlUeXBlLCB2YWx1ZTogYW55KSB7XG4gICAgICAgIGNvbnN0IHJlbmRlcmVyID0gdGhpcy5sb2dpY3NbU3RhdGUuZ2V0U3RhdGUoXCJwYXR0ZXJuXCIpXVxuICAgICAgICBpZiAoa2V5ID09PSBTdGF0ZUtleS5BTklNQVRFKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZW5kZXJlci5zdGFydEFuaW1hdGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyZXIuc3RvcEFuaW1hdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFN0YXRlS2V5Lk1PVVNFX1BPUykge1xuICAgICAgICAgICAgcmVuZGVyZXIuaGFuZGxlTW91c2VNb3ZlKHZhbHVlIGFzIFBvaW50KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09IFN0YXRlS2V5Lk1PVVNFX0lOVEVSQUNUSU9OIHx8IGtleSA9PT0gU3RhdGVLZXkuRU5BQkxFX0NPTlRST0xfUEFORUwpIHtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICB0aGlzLmNhbnZhcy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB0aGlzLndpZHRoLnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgdGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHRoaXMuaGVpZ2h0LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gQ29sb3IuZ2V0QmFzZUNvbG9yRnJvbVBhbGV0dGUoU3RhdGUuZ2V0U3RhdGUoU3RhdGVLZXkuUEFMRVRURSkpO1xuICAgICAgICAgICAgdGhpcy5jdHguZmlsbFJlY3QoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZHJhdygpIHtcbiAgICAgICAgdGhpcy5sb2dpY3NbU3RhdGUuZ2V0U3RhdGUoXCJwYXR0ZXJuXCIpXS5kcmF3KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KVxuICAgIH1cbn1cbiIsImltcG9ydCBhcGkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgICAgICAgIGltcG9ydCBjb250ZW50IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9ydWxlU2V0WzFdLnJ1bGVzWzFdLnVzZVsxXSEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMV0udXNlWzJdIS4vc3R5bGUuc2Nzc1wiO1xuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLmluc2VydCA9IFwiaGVhZFwiO1xub3B0aW9ucy5zaW5nbGV0b24gPSBmYWxzZTtcblxudmFyIHVwZGF0ZSA9IGFwaShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCBkZWZhdWx0IGNvbnRlbnQubG9jYWxzIHx8IHt9OyIsIlxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSBfc3RhdGU6IE9iamVjdCA9IHt9XG4gICAgcHJvdGVjdGVkIHRlbXBsYXRlU3JjOiBzdHJpbmdcbiAgICBwcm90ZWN0ZWQgdGVtcGxhdGU6IEhUTUxUZW1wbGF0ZUVsZW1lbnRcblxuICAgIHB1YmxpYyBnZXRTdGF0ZShrZXkpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGVba2V5XVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXRTdGF0ZShrZXksIHZhbHVlLCByZW5kZXIgPSB0cnVlKSB7XG4gICAgICAgIHRoaXMuX3N0YXRlW2tleV0gPSB2YWx1ZVxuICAgICAgICBpZiAocmVuZGVyKSB7XG4gICAgICAgICAgICB0aGlzLnJlbmRlcigpXG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGFic3RyYWN0IHJlbmRlcigpOiBOb2RlXG59XG5cbiIsImltcG9ydCB7Q29tcG9uZW50fSBmcm9tIFwiLi9fYmFzZUNvbXBvbmVudFwiO1xuaW1wb3J0IHtDb2xvciwgQ29sb3JQYWxldHRlfSBmcm9tIFwiLi4vY29sb3JcIjtcbmltcG9ydCB7QWN0aW9ufSBmcm9tIFwiLi4vbW9kZWwvYWN0aW9uXCI7XG5pbXBvcnQge0FjdGlvbktleX0gZnJvbSBcIi4uL21vZGVsL2FjdGlvbktleVwiO1xuaW1wb3J0IHtTdGF0ZX0gZnJvbSBcIi4uL21vZGVsL3N0YXRlXCI7XG5pbXBvcnQge1N0YXRlS2V5fSBmcm9tIFwiLi4vbW9kZWwvc3RhdGVLZXlcIjtcblxuZXhwb3J0IGNsYXNzIENvbG9yUGFsZXR0ZUNvbXBvbmVudCBleHRlbmRzIENvbXBvbmVudCB7XG5cbiAgICBwcm90ZWN0ZWQgdGVtcGxhdGVTcmMgPSBgXG48ZGl2PlxuPGxhYmVsIGNsYXNzPVwicmFkaW9cIj5cbiAgICA8aW5wdXQgbmFtZT1cImNvbG9yLXBhbGV0dGVcIiB0eXBlPVwicmFkaW9cIiB2YWx1ZT1cIlwiPlxuICAgIDxzcGFuIGNsYXNzPVwib3V0c2lkZVwiPjxzcGFuIGNsYXNzPVwiaW5zaWRlXCI+PC9zcGFuPjwvc3Bhbj5cbiAgICA8c3BhbiBjbGFzcz1cInBhbGV0dGUtbmFtZVwiPjwvc3Bhbj5cbjwvbGFiZWw+XG48ZGl2IGNsYXNzPVwidHJhc2gtYnV0dG9uXCI+PGkgY2xhc3M9XCJmYXIgZmEtdHJhc2gtYWx0XCI+PC9pPjwvZGl2PlxuPGRpdiBzdHlsZT1cImNsZWFyOiBib3RoO1wiPjwvZGl2PlxuPC9kaXY+XG5gXG4gICAgcHJvdGVjdGVkIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpXG4gICAgcHJpdmF0ZSBwYWxldHRlTGlzdCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29sb3ItcGFsZXR0ZS1saXN0XCIpXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy50ZW1wbGF0ZS5pbm5lckhUTUwgPSB0aGlzLnRlbXBsYXRlU3JjLnRyaW0oKVxuICAgICAgICB0aGlzLnNldFN0YXRlKFwiZGVmYXVsdC1wYWxldHRlXCIsIENvbG9yLmdldERlZmF1bHRQYWxldHRlcygpLCBmYWxzZSlcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcInVzZXItcGFsZXR0ZVwiLCBDb2xvci5nZXRVc2VyUGFsZXR0ZXMoKSlcbiAgICAgICAgQWN0aW9uLnJlZ2lzdGVyKEFjdGlvbktleS5DT0xPUl9VUERBVEVELCB0aGlzLnJlbG9hZFVzZXJQYWxldHRlcy5iaW5kKHRoaXMpKVxuICAgIH1cblxuICAgIHJlbG9hZFVzZXJQYWxldHRlcygpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcInVzZXItcGFsZXR0ZVwiLCBDb2xvci5nZXRVc2VyUGFsZXR0ZXMoKSlcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMucmVuZGVyKCkgYXMgSFRNTEVsZW1lbnRcbiAgICAgICAgdGhpcy5wYWxldHRlTGlzdC5yZXBsYWNlQ2hpbGQobm9kZSwgdGhpcy5wYWxldHRlTGlzdC5maXJzdENoaWxkKVxuICAgIH1cblxuICAgIHJlbmRlclRlbXBsYXRlKHBhbGV0dGU6IENvbG9yUGFsZXR0ZSwgaGFzVHJhc2hCdXR0b246IGJvb2xlYW4gPSBmYWxzZSk6IFtIVE1MRWxlbWVudCwgSFRNTElucHV0RWxlbWVudF0ge1xuICAgICAgICBjb25zdCBjbG9uZSA9IHRoaXMudGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTEVsZW1lbnRcbiAgICAgICAgY29uc3QgcmFkaW8gPSAoY2xvbmUucXVlcnlTZWxlY3RvcihcImlucHV0W3R5cGU9cmFkaW9dXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQpXG4gICAgICAgIHJhZGlvLnZhbHVlID0gcGFsZXR0ZS5pZFxuICAgICAgICByYWRpby5vbmNsaWNrID0gZSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50XG4gICAgICAgICAgICBpZiAoU3RhdGUuZ2V0U3RhdGUoU3RhdGVLZXkuUEFMRVRURSkgIT0gdGFyZ2V0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgU3RhdGUuc2V0U3RhdGUoU3RhdGVLZXkuUEFMRVRURSwgdGFyZ2V0LnZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjbG9uZS5xdWVyeVNlbGVjdG9yKFwiLnBhbGV0dGUtbmFtZVwiKS50ZXh0Q29udGVudCA9IHBhbGV0dGUubmFtZVxuICAgICAgICBpZiAoaGFzVHJhc2hCdXR0b24pIHtcbiAgICAgICAgICAgIGNsb25lLnF1ZXJ5U2VsZWN0b3IoXCIudHJhc2gtYnV0dG9uXCIpLnNldEF0dHJpYnV0ZShcImtleVwiLCBwYWxldHRlLmlkKTtcbiAgICAgICAgICAgIChjbG9uZS5xdWVyeVNlbGVjdG9yKFwiLnRyYXNoLWJ1dHRvblwiKSBhcyBIVE1MRWxlbWVudCkub25tb3VzZWRvd24gPSBlID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnQgPSAoZS50YXJnZXQgYXMgSFRNTEVsZW1lbnQpLnBhcmVudEVsZW1lbnRcbiAgICAgICAgICAgICAgICBjb25zdCBwYWxldHRlSWQgPSBwYXJlbnQuZ2V0QXR0cmlidXRlKFwia2V5XCIpXG4gICAgICAgICAgICAgICAgaWYgKHdpbmRvdy5jb25maXJtKGBEZWxldGUgJHtwYWxldHRlSWR9P2ApKSB7XG4gICAgICAgICAgICAgICAgICAgIENvbG9yLmRlbGV0ZVVzZXJQYWxldHRlKHBhbGV0dGVJZClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbG9uZS5xdWVyeVNlbGVjdG9yKFwiLnRyYXNoLWJ1dHRvblwiKS5yZW1vdmUoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbY2xvbmUsIHJhZGlvXVxuICAgIH1cblxuICAgIHJlbmRlcigpOiBOb2RlIHtcbiAgICAgICAgY29uc3Qgcm9vdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcbiAgICAgICAgY29uc3QgZGVmYXVsdFBhbGV0dGVzID0gdGhpcy5nZXRTdGF0ZShcImRlZmF1bHQtcGFsZXR0ZVwiKSBhcyBNYXA8c3RyaW5nLCBDb2xvclBhbGV0dGU+XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYWxldHRlID0gU3RhdGUuZ2V0U3RhdGUoU3RhdGVLZXkuUEFMRVRURSlcbiAgICAgICAgY29uc29sZS5sb2coXCJDUDpcIiwgY3VycmVudFBhbGV0dGUpXG4gICAgICAgIGxldCBpc0ZpcnN0UGFsZXR0ZSA9IHRydWVcblxuICAgICAgICBpZiAoIWRlZmF1bHRQYWxldHRlcykge1xuICAgICAgICAgICAgdGhyb3cgRXJyb3IoXCJGYWlsZWQgdG8gZ2V0IGNvbG9yIHBhbGV0dGUgcHJvcGVybHlcIilcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZmF1bHRQYWxldHRlcy5mb3JFYWNoKHBhbGV0dGUgPT4ge1xuICAgICAgICAgICAgY29uc3QgW2Nsb25lLCByYWRpb10gPSB0aGlzLnJlbmRlclRlbXBsYXRlKHBhbGV0dGUpXG4gICAgICAgICAgICBpZiAoaXNGaXJzdFBhbGV0dGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRQYWxldHRlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGlvLmNoZWNrZWQgPSBpc0ZpcnN0UGFsZXR0ZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpc0ZpcnN0UGFsZXR0ZSA9IGZhbHNlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJhZGlvLmNoZWNrZWQgPSByYWRpby52YWx1ZSA9PT0gY3VycmVudFBhbGV0dGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvb3QuYXBwZW5kQ2hpbGQoY2xvbmUpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IHVzZXJQYWxldHRlcyA9IHRoaXMuZ2V0U3RhdGUoXCJ1c2VyLXBhbGV0dGVcIikgYXMgTWFwPHN0cmluZywgQ29sb3JQYWxldHRlPlxuICAgICAgICB1c2VyUGFsZXR0ZXMuZm9yRWFjaChwYWxldHRlID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtjbG9uZSwgcmFkaW9dID0gdGhpcy5yZW5kZXJUZW1wbGF0ZShwYWxldHRlLCB0cnVlKVxuICAgICAgICAgICAgcmFkaW8uY2hlY2tlZCA9IHJhZGlvLnZhbHVlID09PSBjdXJyZW50UGFsZXR0ZVxuICAgICAgICAgICAgcm9vdC5hcHBlbmRDaGlsZChjbG9uZSlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHJvb3RcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBDYW52YXMgfSBmcm9tIFwiLi9jYW52YXNcIjtcbmltcG9ydCBcIi4vc3R5bGUuc2Nzc1wiO1xuaW1wb3J0IHtTdGF0ZX0gZnJvbSBcIi4vbW9kZWwvc3RhdGVcIjtcbmltcG9ydCB7U3RhdGVLZXl9IGZyb20gXCIuL21vZGVsL3N0YXRlS2V5XCI7XG5pbXBvcnQge1BvaW50fSBmcm9tIFwiLi9nZW9tZXRyeS9wb2ludFwiO1xuaW1wb3J0IHtDb2xvclBhbGV0dGVDb21wb25lbnR9IGZyb20gXCIuL2NvbXBvbmVudC9jb2xvclBhbGV0dGVDb21wb25lbnRcIjtcbmltcG9ydCB7Q29sb3IsIENvbG9yUGFsZXR0ZX0gZnJvbSBcIi4vY29sb3JcIjtcblxuY2xhc3MgQXBwIHtcblxuICAgIHByaXZhdGUgY29sb3JQYWxldHRlQ29tcG9uZW50ID0gbmV3IENvbG9yUGFsZXR0ZUNvbXBvbmVudCgpO1xuXG4gICAgaW5pdGlhbGl6ZSgpIHtcbiAgICAgICAgLy8gSW5zZXJ0IENvbG9yIFBhbGV0dGVcbiAgICAgICAgY29uc3QgcGFsZXR0ZUxpc3QgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbG9yLXBhbGV0dGUtbGlzdFwiKVxuICAgICAgICBjb25zdCBwYWxldHRlID0gdGhpcy5jb2xvclBhbGV0dGVDb21wb25lbnQucmVuZGVyKCk7XG4gICAgICAgIHBhbGV0dGVMaXN0LmFwcGVuZENoaWxkKHBhbGV0dGUpXG5cbiAgICAgICAgY29uc3QgYWRkQnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJhZGQtY29sb3JcIilcbiAgICAgICAgYWRkQnV0dG9uLm9ubW91c2Vkb3duID0gXyA9PiB7XG4gICAgICAgICAgICBDb2xvci5zZXRVc2VyUGFsZXR0ZShuZXcgQ29sb3JQYWxldHRlKFwidGVzdFwiLCBcIlRlc3RcIiwgW1xuICAgICAgICAgICAgICAgIFwiI0ZGMDAwMFwiLFxuICAgICAgICAgICAgICAgIFwiIzAwRkYwMFwiLFxuICAgICAgICAgICAgICAgIFwiIzAwMDBGRlwiXG4gICAgICAgICAgICBdKSlcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgICBsZXQgZG93bmxvYWQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRvd25sb2FkXCIpO1xuICAgICAgICBkb3dubG9hZC5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobGluaylcbiAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCdkb3dubG9hZCcsICdjYW1vLXBhdHRlcm4ucG5nJyk7XG4gICAgICAgICAgICBsaW5rLnNldEF0dHJpYnV0ZSgnaHJlZicsIGNhbnZhcy50b0RhdGFVUkwoXCJpbWFnZS9wbmdcIikucmVwbGFjZShcImltYWdlL3BuZ1wiLCBcImltYWdlL29jdGV0LXN0cmVhbVwiKSk7XG4gICAgICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHJlZnJlc2ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJlZnJlc2hcIik7XG4gICAgICAgIHJlZnJlc2gub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgIGMucmVEcmF3KCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZm9ybSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY29udHJvbHMtdmFsdWVzXCIpO1xuICAgICAgICBTdGF0ZS5zZXRTdGF0ZShTdGF0ZUtleS5QQVRURVJOLCBmb3JtW1wiY2Ftby1wYXR0ZXJuXCJdLnZhbHVlKTtcbiAgICAgICAgU3RhdGUuc2V0U3RhdGUoU3RhdGVLZXkuUEFMRVRURSwgZm9ybVtcImNvbG9yLXBhbGV0dGVcIl0udmFsdWUpO1xuICAgICAgICBTdGF0ZS5zZXRTdGF0ZShTdGF0ZUtleS5OVU1fUE9JTlRTLCBmb3JtW1wibnVtLXBvaW50c1wiXS52YWx1ZSk7XG4gICAgICAgIFN0YXRlLnNldFN0YXRlKFN0YXRlS2V5LkNBTU9fREVQVEgsIGZvcm1bXCJjYW1vLWRlcHRoXCJdLnZhbHVlKTtcbiAgICAgICAgU3RhdGUuc2V0U3RhdGUoU3RhdGVLZXkuQU5JTUFURSwgZmFsc2UpO1xuICAgICAgICBTdGF0ZS5zZXRTdGF0ZShTdGF0ZUtleS5NT1VTRV9JTlRFUkFDVElPTiwgZmFsc2UpO1xuICAgICAgICBTdGF0ZS5zZXRTdGF0ZShTdGF0ZUtleS5FTkFCTEVfQ09OVFJPTF9QQU5FTCwgdHJ1ZSk7XG5cbiAgICAgICAgbGV0IGNhbW9TbGlkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhbW8tcGF0dGVybiBpbnB1dFtuYW1lPW51bS1wb2ludHNdXCIpIGFzIEhUTUxJbnB1dEVsZW1lbnQ7XG4gICAgICAgIGxldCBjYW1vU2xpZGVySW5kaWNhdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJudW0tcG9pbnRzLXZhbFwiKTtcbiAgICAgICAgY2Ftb1NsaWRlci5vbmNoYW5nZSA9IF8gPT4ge1xuICAgICAgICAgICAgY2Ftb1NsaWRlckluZGljYXRvci50ZXh0Q29udGVudCA9IGNhbW9TbGlkZXIudmFsdWVcbiAgICAgICAgICAgIGlmIChTdGF0ZS5nZXRTdGF0ZShTdGF0ZUtleS5OVU1fUE9JTlRTKSAhPSBjYW1vU2xpZGVyLnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgU3RhdGUuc2V0U3RhdGUoU3RhdGVLZXkuTlVNX1BPSU5UUywgY2Ftb1NsaWRlci52YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBkZXB0aFNsaWRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2Ftby1wYXR0ZXJuIGlucHV0W25hbWU9Y2Ftby1kZXB0aF1cIikgYXMgSFRNTElucHV0RWxlbWVudDtcbiAgICAgICAgbGV0IGRlcHRoU2xpZGVySW5kaWNhdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW1vLWRlcHRoLXZhbFwiKTtcbiAgICAgICAgZGVwdGhTbGlkZXIub25jaGFuZ2UgPSBfID0+IHtcbiAgICAgICAgICAgIGRlcHRoU2xpZGVySW5kaWNhdG9yLnRleHRDb250ZW50ID0gZGVwdGhTbGlkZXIudmFsdWVcbiAgICAgICAgICAgIGlmIChTdGF0ZS5nZXRTdGF0ZShTdGF0ZUtleS5DQU1PX0RFUFRIKSAhPSBkZXB0aFNsaWRlci52YWx1ZSkge1xuICAgICAgICAgICAgICAgIFN0YXRlLnNldFN0YXRlKFN0YXRlS2V5LkNBTU9fREVQVEgsIGRlcHRoU2xpZGVyLnZhbHVlKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cblxuICAgICAgICBsZXQgc3RhcnRBbmltYXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzdGFydC1hbmltYXRlXCIpO1xuICAgICAgICBzdGFydEFuaW1hdGUub25jbGljayA9IF8gPT4ge1xuICAgICAgICAgICAgaWYgKFN0YXRlLmdldFN0YXRlKFN0YXRlS2V5LkFOSU1BVEUpICE9PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgU3RhdGUuc2V0U3RhdGUoU3RhdGVLZXkuQU5JTUFURSwgdHJ1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBzdG9wQW5pbWF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwic3RvcC1hbmltYXRlXCIpO1xuICAgICAgICBzdG9wQW5pbWF0ZS5vbmNsaWNrID0gXyA9PiB7XG4gICAgICAgICAgICBpZiAoU3RhdGUuZ2V0U3RhdGUoU3RhdGVLZXkuQU5JTUFURSkgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgU3RhdGUuc2V0U3RhdGUoU3RhdGVLZXkuQU5JTUFURSwgZmFsc2UpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY29sb3JSYWRpb3MgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI2NvbG9yLXBhbGV0dGUgaW5wdXRbdHlwZT1yYWRpb11cIik7XG4gICAgICAgIGNvbG9yUmFkaW9zLmZvckVhY2goKGVsZW06IEhUTUxJbnB1dEVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgIGVsZW0ub25jbGljayA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoU3RhdGUuZ2V0U3RhdGUoU3RhdGVLZXkuUEFMRVRURSkgIT0gZWxlbS52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBTdGF0ZS5zZXRTdGF0ZShTdGF0ZUtleS5QQUxFVFRFLCBlbGVtLnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgd2luZG93Lm9ubW91c2Vtb3ZlID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmICghU3RhdGUuZ2V0U3RhdGUoU3RhdGVLZXkuTU9VU0VfUE9TKSB8fFxuICAgICAgICAgICAgICAgICEoU3RhdGUuZ2V0U3RhdGUoU3RhdGVLZXkuTU9VU0VfUE9TKSBhcyBQb2ludCkuZXF1YWxzKFBvaW50Lm9mKGUuY2xpZW50WCwgZS5jbGllbnRZKSkpIHtcbiAgICAgICAgICAgICAgICBTdGF0ZS5zZXRTdGF0ZShTdGF0ZUtleS5NT1VTRV9QT1MsIFBvaW50Lm9mKGUuY2xpZW50WCwgZS5jbGllbnRZKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YXBUb1JlZnJlc2ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInRhcC10by1yZWZyZXNoXCIpXG4gICAgICAgIHRhcFRvUmVmcmVzaC5vbnRvdWNoZW5kID0gKCkgPT4ge1xuICAgICAgICAgICAgYy5yZURyYXcoKVxuICAgICAgICAgICAgU3RhdGUuc2V0U3RhdGUoU3RhdGVLZXkuTU9VU0VfSU5URVJBQ1RJT04sIGZhbHNlKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gTW9iaWxlIFVJIGludGVyYWN0aW9uXG4gICAgICAgIGNvbnN0IGNhbW9Db250cm9sUGFuZWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbW8tY29udHJvbC1wYW5lbFwiKVxuICAgICAgICBjb25zdCBvcGVuU2V0dGluZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm9wZW4tc2V0dGluZ3NcIilcbiAgICAgICAgY29uc3Qgb3BlblNldHRpbmdzT24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIm9wZW4tc2V0dGluZ3Mtb25cIilcbiAgICAgICAgY29uc3Qgb3BlblNldHRpbmdzT2ZmID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJvcGVuLXNldHRpbmdzLW9mZlwiKVxuICAgICAgICBvcGVuU2V0dGluZ3Mub250b3VjaGVuZCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNhbW9Db250cm9sUGFuZWwuY2xhc3NMaXN0LnRvZ2dsZShcImFjdGl2YXRlZFwiKVxuICAgICAgICAgICAgb3BlblNldHRpbmdzT24uY2xhc3NMaXN0LnRvZ2dsZShcImZhZGUtb3V0XCIpXG4gICAgICAgICAgICBvcGVuU2V0dGluZ3NPZmYuY2xhc3NMaXN0LnRvZ2dsZShcImZhZGUtb3V0XCIpXG4gICAgICAgIH1cblxuICAgICAgICAvLyBLZXlib2FyZFxuICAgICAgICB3aW5kb3cub25rZXlkb3duID0gKGUpID0+IHtcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gXCJtXCIpIHtcbiAgICAgICAgICAgICAgICBTdGF0ZS5mbGlwU3RhdGUoU3RhdGVLZXkuTU9VU0VfSU5URVJBQ1RJT04pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChlLmtleSA9PT0gXCJjXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmFibGVkID0gU3RhdGUuZmxpcFN0YXRlKFN0YXRlS2V5LkVOQUJMRV9DT05UUk9MX1BBTkVMKVxuICAgICAgICAgICAgICAgIGNvbnN0IGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbW8tY29udHJvbC1wYW5lbFwiKVxuICAgICAgICAgICAgICAgIGlmIChlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZS5rZXkgPT09IFwiclwiKSB7XG4gICAgICAgICAgICAgICAgYy5yZURyYXcoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZS5rZXkgPT09IFwiYVwiKSB7XG4gICAgICAgICAgICAgICAgU3RhdGUuZmxpcFN0YXRlKFN0YXRlS2V5LkFOSU1BVEUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgYyA9IG5ldyBDYW52YXMoKTtcbiAgICB9XG59XG5cbndpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgKG5ldyBBcHAoKSkuaW5pdGlhbGl6ZSgpO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=