(()=>{"use strict";var t={539:(t,e,n)=>{n.d(e,{Z:()=>s});var o=n(15),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([t.id,"@keyframes radio-select{0%{transform:scale(0, 0)}65%{transform:scale(1.1, 1.1)}100%{transform:scale(1, 1)}}.controls label.radio{margin:1rem 0;display:block;position:relative;padding-left:30px;cursor:pointer;float:left}.controls input[type=radio]{height:1px;width:1px;opacity:0}.controls .outside{display:inline-block;position:absolute;left:0;top:50%;margin-top:-15px;width:30px;height:30px;border:2px solid #ccc;border-radius:50%;box-sizing:border-box;background:#f3f3f3}.controls .inside{position:absolute;top:50%;left:50%;transform:translate(-50%, -50%);display:inline-block;border-radius:50%;width:20px;height:20px;background:#444;left:3px;top:3px;transform:scale(0, 0)}.no-transforms .controls .inside{left:auto;top:auto;width:0;height:0}.controls input[type=radio]:checked+.outside .inside{animation:radio-select .1s linear;transform:scale(1, 1)}.no-transforms .controls input[type=radio]:checked+.outside .inside{width:20px;height:20px}.controls input[type=radio]:focus+.outside,.controls input[type=radio]:active+.outside{border-color:#444}.controls .trash-button{float:left;margin:1rem;cursor:pointer}.controls .trash-button:hover{color:#2d2d2d}@media only screen and (max-device-width: 812px){input[type=range]{margin:1rem 0}}body{margin:0;padding:0;font-family:sans-serif}body .container{margin:0;padding:0;width:100%;height:100%;overflow:hidden}.ui-wrapper{user-select:none;position:absolute;width:100%;height:100%;overflow:hidden}.ui-wrapper .ui-background{display:none;position:relative;width:100%;height:100%;background:rgba(0,0,0,0);z-index:0}.controls{position:absolute;margin:10px;padding:10px;border:3px dashed gray;background:rgba(128,128,128,.7);z-index:20;overflow-y:scroll}.controls::-webkit-scrollbar{display:none}.controls .button{background:gray;margin:10px;padding:10px 20px;display:inline-block;cursor:pointer;user-select:none;border:3px solid #666}.controls .button:hover{background:#d3d3d3}.controls .controls-section{margin:10px}.controls .controls-section .controls-section-title{margin-bottom:10px;font-weight:bold}.controls .controls-section label{user-select:none;cursor:pointer}.controls .controls-section input[type=range]{width:100%}.controls .controls-section #m90p2-control{display:none;margin-top:20px}.controls .controls-section input[value=m90p2]:checked~#m90p2-control{display:block}.mobile-ui-wrapper{z-index:10;display:none}@media only screen and (max-device-width: 812px){body{overflow-y:hidden}.controls{bottom:0;font-size:1rem;max-width:240px}.controls .ui-buttons .ui-button{padding:20px 40px}.ui-wrapper .ui-background{display:block}#camo-control-panel{position:absolute;top:100vh;transition:.3s top ease-out .1s}#camo-control-panel.activated{top:0}.mobile-ui-wrapper{display:block;position:absolute;left:0;bottom:0;width:100%;box-sizing:border-box;padding:2rem 1rem}.mobile-ui-wrapper .icon-button-wrapper{width:100%;text-align:right}.mobile-ui-wrapper .icon-button{padding:10px;border-radius:50%;background:#9a9a9a;font-size:3rem;position:relative}.mobile-ui-wrapper .icon-button .fa-m8{margin:8px}.mobile-ui-wrapper .icon-button .fa-p2{padding:.2rem}.mobile-ui-wrapper #open-settings #open-settings-on{transition:.3s transform,opacity ease-in .1s;opacity:1}.mobile-ui-wrapper #open-settings #open-settings-on.fade-out{opacity:0;transform:rotateZ(180deg)}.mobile-ui-wrapper #open-settings #open-settings-off{transition:.3s transform,opacity ease-in .1s;position:absolute;opacity:1;left:1.1rem;top:.7rem}.mobile-ui-wrapper #open-settings #open-settings-off.fade-out{opacity:0;transform:rotateZ(-180deg)}.controls input[type=range]{width:300px;background:transparent}.controls input[type=range]{-webkit-appearance:none;width:100%}.controls input[type=range]::-webkit-slider-thumb{-webkit-appearance:none}.controls input[type=range]:focus{outline:none}.controls input[type=range]::-ms-track{width:100%;cursor:pointer;background:transparent;border-color:transparent;color:transparent}.controls input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;height:36px;width:36px;background:#555;cursor:pointer;margin-top:-12px}.controls input[type=range]::-moz-range-thumb{height:36px;width:36px;background:#555;cursor:pointer}.controls input[type=range]::-ms-thumb{height:36px;width:36px;background:#555;cursor:pointer}.controls input[type=range]::-webkit-slider-runnable-track{width:100%;height:12px;cursor:pointer;background:#ccc}.controls input[type=range]:active::-webkit-slider-runnable-track{background:#d6d6d6}.controls input[type=range]::-moz-range-track{width:100%;height:12px;cursor:pointer;background:#ccc}.controls input[type=range]::-ms-track{width:100%;height:12px;cursor:pointer;background:transparent;border-color:transparent;color:transparent}.controls input[type=range]::-ms-fill-lower{background:#ccc}.controls input[type=range]:focus::-ms-fill-lower{background:#ddd}.controls input[type=range]::-ms-fill-upper{background:#ccc}.controls input[type=range]:focus::-ms-fill-upper{background:#ddd}}","",{version:3,sources:["webpack://./src/style/input.scss","webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:["\n$almost-white: #F3F3F3;\n$almost-black: #444;\n$border: #CCCCCC;\n$left: 30px;\n$size: 30px;\n\n@keyframes radio-select {\n  0% {\n    transform: scale(0,0);\n  }\n  65% {\n    transform: scale(1.1,1.1);\n  }\n  100% {\n    transform: scale(1,1);\n  }\n}\n\n/* styles */\n@mixin centerer {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n}\n\n\n.controls {\n  label.radio {\n    margin: 1rem 0;\n    display: block;\n    position: relative;\n    padding-left: $left;\n    cursor: pointer;\n    float: left;\n  }\n\n  input[type=radio] {\n    height: 1px;\n    width: 1px;\n    opacity: 0;\n  }\n\n  .outside {\n    display: inline-block;\n    position: absolute;\n    left: 0;\n    top: 50%;\n    margin-top: -($size / 2);\n    width: $size;\n    height: $size;\n    border: 2px solid $border;\n    border-radius: 50%;\n    box-sizing: border-box;\n    background: $almost-white;\n  }\n\n  .inside {\n    @include centerer;\n    display: inline-block;\n    border-radius: 50%;\n    width: ($size - 10px);\n    height: ($size - 10px);\n    background: $almost-black;\n    left: 3px;\n    top: 3px;\n    transform: scale(0,0);\n    .no-transforms & {\n      left: auto;\n      top: auto;\n      width: 0;\n      height: 0;\n    }\n  }\n\n  input[type=radio] {\n    &:checked {\n      + .outside .inside {\n        animation: radio-select 0.1s linear;\n        transform: scale(1,1);\n        .no-transforms & {\n          width: ($size - 10px);\n          height: ($size - 10px);\n        }\n      }\n    }\n\n    &:focus, &:active {\n          + .outside {\n          border-color: $almost-black;\n        }\n      }\n  }\n\n  .trash-button {\n    float: left;\n    margin: 1rem;\n    cursor: pointer;\n\n    &:hover {\n      color: #2d2d2d;\n    }\n  }\n}\n@media only screen\nand (max-device-width: 812px) {\n  input[type=range] {\n    margin: 1rem 0;\n  }\n\n}\n",'@import "style/input";\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: sans-serif;\n\n  .container {\n    margin: 0;\n    padding: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n}\n\n.ui-wrapper {\n  user-select: none;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n\n  .ui-background {\n    display: none;\n    position: relative;\n    width: 100%;\n    height: 100%;\n    background: rgba(0,0,0,0);\n    z-index: 0;\n  }\n}\n\n.controls {\n  position: absolute;\n  margin: 10px;\n  padding: 10px;\n  border: 3px dashed gray;\n  background: rgba(128, 128, 128, 0.7);\n  z-index: 20;\n  overflow-y: scroll;\n  &::-webkit-scrollbar {\n    display: none;\n  }\n\n  .button {\n    background: grey;\n    margin: 10px;\n    padding: 10px 20px;\n    display: inline-block;\n    cursor: pointer;\n    user-select: none;\n    border: 3px solid #666;\n\n    &:hover {\n      background: lightgray;\n    }\n  }\n\n  .controls-section {\n    //border: 3px dashed gray;\n    margin: 10px;\n\n    .controls-section-title {\n      margin-bottom: 10px;\n      font-weight: bold;\n    }\n\n    label {\n      user-select: none;\n      cursor: pointer;\n    }\n\n    input[type=range] {\n      width: 100%;\n    }\n\n    #m90p2-control {\n      display: none;\n      margin-top: 20px;\n    }\n\n    input[value="m90p2"]:checked ~ #m90p2-control\n    {\n      display: block;\n    }\n  }\n}\n\n.mobile-ui-wrapper {\n  z-index: 10;\n  display: none;\n}\n\n@media only screen\n  and (max-device-width: 812px) {\n  body {\n    overflow-y: hidden;\n  }\n\n  .controls {\n    bottom: 0;\n    font-size: 1rem;\n    max-width: 240px;\n\n    .ui-buttons {\n      .ui-button {\n        padding: 20px 40px;\n      }\n    }\n  }\n\n  .ui-wrapper {\n    .ui-background {\n      display: block;\n    }\n  }\n\n  #camo-control-panel {\n    position: absolute;\n    top: 100vh;\n    transition: 0.3s top ease-out 0.1s;\n\n    &.activated {\n      top: 0;\n    }\n  }\n\n  .mobile-ui-wrapper {\n    display: block;\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    width: 100%;\n    box-sizing: border-box;\n    padding: 2rem 1rem;\n\n    .icon-button-wrapper {\n      width: 100%;\n      text-align: right;\n    }\n\n    .icon-button {\n      padding: 10px;\n      border-radius: 50%;\n      background: #9a9a9a;\n      font-size: 3rem;\n      position: relative;\n\n      .fa-m8 {\n        margin: 8px;\n      }\n      .fa-p2 {\n        padding: 0.2rem;\n      }\n    }\n\n    #open-settings {\n      #open-settings-on {\n        transition: 0.3s transform,opacity ease-in 0.1s;\n        opacity: 1;\n\n        &.fade-out {\n          opacity: 0;\n          transform: rotateZ(180deg);\n        }\n      }\n\n      #open-settings-off {\n        transition: 0.3s transform,opacity ease-in 0.1s;\n        position: absolute;\n        opacity: 1;\n        left: 1.1rem;\n        top: 0.7rem;\n\n        &.fade-out {\n          opacity: 0;\n          transform: rotateZ(-180deg);\n        }\n      }\n    }\n  }\n\n  .controls {\n    input[type="range"] {\n      width: 300px;\n      background: transparent;\n    }\n    /*###################################*/\n    /*###########Responsive Range########*/\n    /*###################################*/\n    /*##############Core Style###########*/\n\n    input[type="range"] {\n      -webkit-appearance: none;\n      width: 100%;\n    }\n\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n    }\n\n    input[type="range"]:focus {\n      outline: none;\n    }\n\n    input[type="range"]::-ms-track {\n      width: 100%;\n      cursor: pointer;\n      background: transparent;\n      border-color: transparent;\n      color: transparent;\n    }\n    /*#############Thumb##############*/\n\n    input[type="range"]::-webkit-slider-thumb {\n      -webkit-appearance: none;\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n      margin-top: -12px;\n    }\n\n    input[type="range"]::-moz-range-thumb {\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n    }\n\n    input[type="range"]::-ms-thumb {\n      height: 36px;\n      width: 36px;\n      background: #555;\n      cursor: pointer;\n    }\n    /*#############Track##############*/\n\n    input[type="range"]::-webkit-slider-runnable-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: #ccc;\n    }\n\n    input[type="range"]:active::-webkit-slider-runnable-track {\n      background: #d6d6d6;\n    }\n\n    input[type="range"]::-moz-range-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: #ccc;\n    }\n\n    input[type="range"]::-ms-track {\n      width: 100%;\n      height: 12px;\n      cursor: pointer;\n      background: transparent;\n      border-color: transparent;\n      color: transparent;\n    }\n\n    input[type="range"]::-ms-fill-lower {\n      background: #ccc;\n    }\n\n    input[type="range"]:focus::-ms-fill-lower {\n      background: #ddd;\n    }\n\n    input[type="range"]::-ms-fill-upper {\n      background: #ccc;\n    }\n\n    input[type="range"]:focus::-ms-fill-upper {\n      background: #ddd;\n    }\n  }\n}\n\n'],sourceRoot:""}]);const s=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,o){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(o)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);o&&r[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,o=new Array(e);n<e;n++)o[n]=t[n];return o}t.exports=function(t){var n,o,r=(o=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t)){var n=[],o=!0,r=!1,i=void 0;try{for(var a,s=t[Symbol.iterator]();!(o=(a=s.next()).done)&&(n.push(a.value),!e||n.length!==e);o=!0);}catch(t){r=!0,i=t}finally{try{o||null==s.return||s.return()}finally{if(r)throw i}}return n}}(n,o)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var o=Object.prototype.toString.call(t).slice(8,-1);return"Object"===o&&t.constructor&&(o=t.constructor.name),"Map"===o||"Set"===o?Array.from(t):"Arguments"===o||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(o)?e(t,n):void 0}}(n,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=r[1],a=r[3];if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(c," */"),A=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[i].concat(A).concat([l]).join("\n")}return[i].join("\n")}},379:(t,e,n)=>{var o,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),i=[];function a(t){for(var e=-1,n=0;n<i.length;n++)if(i[n].identifier===t){e=n;break}return e}function s(t,e){for(var n={},o=[],r=0;r<t.length;r++){var s=t[r],c=e.base?s[0]+e.base:s[0],l=n[c]||0,A="".concat(c," ").concat(l);n[c]=l+1;var u=a(A),p={css:s[1],media:s[2],sourceMap:s[3]};-1!==u?(i[u].references++,i[u].updater(p)):i.push({identifier:A,updater:f(p,e),references:1}),o.push(A)}return o}function c(t){var e=document.createElement("style"),o=t.attributes||{};if(void 0===o.nonce){var i=n.nc;i&&(o.nonce=i)}if(Object.keys(o).forEach((function(t){e.setAttribute(t,o[t])})),"function"==typeof t.insert)t.insert(e);else{var a=r(t.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}return e}var l,A=(l=[],function(t,e){return l[t]=e,l.filter(Boolean).join("\n")});function u(t,e,n,o){var r=n?"":o.media?"@media ".concat(o.media," {").concat(o.css,"}"):o.css;if(t.styleSheet)t.styleSheet.cssText=A(e,r);else{var i=document.createTextNode(r),a=t.childNodes;a[e]&&t.removeChild(a[e]),a.length?t.insertBefore(i,a[e]):t.appendChild(i)}}function p(t,e,n){var o=n.css,r=n.media,i=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleSheet)t.styleSheet.cssText=o;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(o))}}var d=null,h=0;function f(t,e){var n,o,r;if(e.singleton){var i=h++;n=d||(d=c(e)),o=u.bind(null,n,i,!1),r=u.bind(null,n,i,!0)}else n=c(e),o=p.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return o(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;o(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===o&&(o=Boolean(window&&document&&document.all&&!window.atob)),o));var n=s(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var o=0;o<n.length;o++){var r=a(n[o]);i[r].references--}for(var c=s(t,e),l=0;l<n.length;l++){var A=a(n[l]);0===i[A].references&&(i[A].updater(),i.splice(A,1))}n=c}}}}},e={};function n(o){var r=e[o];if(void 0!==r)return r.exports;var i=e[o]={id:o,exports:{}};return t[o](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t,e=function(){function t(){}return t.getInstance=function(){return void 0===this._instance&&(this._instance=new t),this._instance},t.getState=function(t,e){void 0===e&&(e=void 0);var n=this.getInstance()[t];return null==n?e:n},t.setState=function(e,n,o){var r=this;return void 0===o&&(o=!0),this.getInstance()[e]=n,o?(t._callbacks.forEach((function(t){t(r,e,n)})),n):n},t.flipState=function(e){var n=t.getState(e);if("boolean"==typeof n)return t.setState(e,!n);console.error("Failed to flip state due to invalid state type",n)},t.registerCallback=function(t){this._callbacks.add(t)},t.deregisterCallback=function(t){this._callbacks.delete(t)},t._callbacks=new Set,t}(),o="palette",r="num-points",i="animate",a="mouse-pos",s="camo-depth",c="mouse-interaction",l="enable-control-panel",A=function(){function t(){}return t.getInstance=function(){return void 0===this._instance&&(this._instance=new t),this._instance},t.emit=function(t){this._callbacks[t].forEach((function(e){e(t)}))},t.register=function(t,e){void 0===this._callbacks[t]&&(this._callbacks[t]=new Set),this._callbacks[t].add(e)},t.deregister=function(t,e){this._callbacks[t].delete(e)},t._callbacks={},t}(),u="color_updated",p=function(){function t(t,e,n){this._id=t,this._name=e,this._colors=n}return Object.defineProperty(t.prototype,"id",{get:function(){return this._id},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this._name},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"colors",{get:function(){return this._colors},enumerable:!1,configurable:!0}),t}(),d=function(){function t(){}return t.loadDefaultPalettes=function(){t._defaultPalettes=new Map,t._defaultPalettes.set("green",new p("green","Green",["#6C7C52","#4A4F44","#3B3845","#B2B096"])),t._defaultPalettes.set("blue",new p("blue","Blue",["#3770DB","#172F5C","#7B9FE0","#32415C","#2A56A8"])),t._defaultPalettes.set("desert",new p("desert","Desert",["#B8A79B","#72625D","#A69887","#6D4C2D"])),t._defaultPalettes.set("orange",new p("orange","Orange",["#FF824D","#782400","#F74A00","#7A442C","#C73B00"])),t._defaultPalettes.set("uc1",new p("uc1","UC1",["#C4B9B5","#683A31","#4A5F56"])),t._defaultPalettes.set("uc2",new p("uc2","UC2",["#262527","#513A3E","#424B50"])),t._defaultPalettes.set("bw",new p("bw","BW",["#FFFFFF","#000000"]))},t.loadUserPalettes=function(){var t=this;this._userPalettes=new Map,JSON.parse(window.localStorage.getItem("userPalettes")||"[]").forEach((function(e){var n=new p(e._id,e._name,e._colors);t._userPalettes.set(n.id,n)}))},t.saveUserPalettes=function(){var t=[];this._userPalettes.forEach((function(e){t.push(e)})),window.localStorage.setItem("userPalettes",JSON.stringify(t))},t.setUserPalette=function(t){this._userPalettes.set(t.id,t),this.saveUserPalettes(),A.emit(u)},t.deleteUserPalette=function(t){this._userPalettes.delete(t),this.saveUserPalettes(),A.emit(u)},t.getDefaultPalettes=function(){return this._defaultPalettes},t.getUserPalettes=function(){return this._userPalettes},t.getBaseColorFromPalette=function(t){return(this._defaultPalettes.get(t)||this._userPalettes.get(t)).colors[0]},t.colorGeneratorFromPalette=function(t){return this.colorGenerator((this._defaultPalettes.get(t)||this._userPalettes.get(t)).colors)},t.colorGenerator=function(t){var e,n,o,r;return function(t,e){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}(this,(function(i){switch(i.label){case 0:for(e=this.range(0,t.length-1),o=e.length;1<o;o--)n=Math.floor(Math.random()*o),r=[e[o-1],e[n]],e[n]=r[0],e[o-1]=r[1];o=0,i.label=1;case 1:return o<e.length?[4,t[e[o]]]:[3,4];case 2:i.sent(),i.label=3;case 3:return o++,[3,1];case 4:return[3,0];case 5:return[2]}}))},t.ctor=(t.loadDefaultPalettes(),void t.loadUserPalettes()),t.range=function(t,e){return Array.from({length:e-t+1},(function(e,n){return n+t}))},t}(),h=function(){function t(t){this.ctx=t}return t.prototype.drawCircle=function(t){this.ctx.fillStyle=t.color,this.ctx.beginPath(),this.ctx.arc(t.center.x,t.center.y,t.radius,0,2*Math.PI,!0),this.ctx.closePath(),this.ctx.fill()},t.prototype.drawPolygon=function(t,e,n){var o=this;void 0===e&&(e=void 0),void 0===n&&(n=void 0),e?(this.ctx.fillStyle=e,this.ctx.strokeStyle=n||e):(this.ctx.fillStyle=t.color,this.ctx.strokeStyle=t.strokeColor||t.color),this.ctx.beginPath(),t.points.forEach((function(t,e){var n,r;0===e?(n=o.ctx).moveTo.apply(n,t.coord):(r=o.ctx).lineTo.apply(r,t.coord)})),this.ctx.closePath(),this.ctx.stroke(),this.ctx.fill()},t}(),f=function(){function t(t,e,n){void 0===n&&(n=null),this._x=t,this._y=e,this._index=n}return Object.defineProperty(t.prototype,"coord",{get:function(){return[this._x,this._y]},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this._x},set:function(t){this._x=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this._y},set:function(t){this._y=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.x+","+this.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"hasIndex",{get:function(){return!!this._index},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this._index},enumerable:!1,configurable:!0}),t.prototype.dist=function(t){return Math.sqrt(Math.pow(this.x-t.x,2)+Math.pow(this.y-t.y,2))},t.prototype.equals=function(t){return this.x===t.x&&this.y===t.y},t.prototype.div=function(t){return this.x/=t,this.y/=t,this},t.of=function(e,n){var o=e+","+n;return void 0===this._cache[o]&&(this._cache[o]=new t(e,n)),this._cache[o]},t.randomOf=function(e,n,o,r){return void 0===e&&(e=0),void 0===n&&(n=0),t.of(e+Math.random()*o,n+Math.random()*r)},t.randomPointsOf=function(e,n,o,r){for(var i=[],a=0;a<r;a++)i.push(2*Math.PI*Math.random());return i.sort(),i.map((function(r){return t.of(e+o*Math.cos(r),n+o*Math.sin(r))}))},t.randomPoints2Of=function(e,n,o,r){for(var i=[],a=2*Math.PI*Math.random(),s=0;s<r;s++){var c=1.5*Math.random()-.75,l=2*Math.PI/r*s+c;i.push(l+a)}return i.sort(),i.map((function(r){return t.of(e+o*Math.cos(r),n+o*Math.sin(r))}))},t._cache={},t}(),g=function(){function t(t,e,n){void 0===n&&(n=void 0),this._points=t,this._color=e,this._strokeColor=n,this._center=this._points.reduce((function(t,e,n,o){return new f(t.x+e.x,t.y+e.y)})).div(this._points.length),this._points.sort(this.comparePoints.bind(this)),this.setMinMax()}return Object.defineProperty(t.prototype,"points",{get:function(){return this._points},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},set:function(t){this._color=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"strokeColor",{get:function(){return this._strokeColor},set:function(t){this._strokeColor=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.points.map((function(t){return t.key})).join("/")},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this.points.map((function(t){return t.keyIndex.toString()})).join("/")},enumerable:!1,configurable:!0}),t.prototype.equals=function(t){if(this.points.length!=t.points.length)return!1;for(var e=0;e<this.points.length;e++)if(!this.points[e].equals(t.points[e]))return!1;return!0},t.prototype.isContaining=function(t){var e=!1;if(t.x<this.minX||t.x>this.maxX||t.y<this.minY||t.y>this.maxY)return!1;for(var n=0,o=this.points.length-1;n<this.points.length;o=n++)this.points[n].y>t.y!=this.points[o].y>t.y&&t.x<(this.points[o].x-this.points[n].x)*(t.y-this.points[n].y)/(this.points[o].y-this.points[n].y)+this.points[n].x&&(e=!e);return e},t.prototype.setMinMax=function(){this.minX=this.points[0].x,this.maxX=this.points[0].x,this.minY=this.points[0].y,this.maxY=this.points[0].y;for(var t=1;t<this.points.length;t++){var e=this.points[t];this.minX=Math.min(e.x,this.minX),this.maxX=Math.max(e.x,this.maxX),this.minY=Math.min(e.y,this.minY),this.maxY=Math.max(e.y,this.maxY)}},t.prototype.comparePoints=function(t,e){var n=this;return t.equals(e)?0:function(){if(t.x-n._center.x>=0&&e.x-n._center.x<0)return!0;if(t.x-n._center.x<0&&e.x-n._center.x>=0)return!1;if(t.x-n._center.x==0&&e.x-n._center.x==0)return t.y-n._center.y>=0||e.y-n._center.y>=0?t.y>e.y:e.y>t.y;var o=(t.x-n._center.x)*(e.y-n._center.y)-(e.x-n._center.x)*(t.y-n._center.y);return o<0||!(o>0)&&(t.x-n._center.x)*(t.x-n._center.x)+(t.y-n._center.y)*(t.y-n._center.y)>(e.x-n._center.x)*(e.x-n._center.x)+(e.y-n._center.y)*(e.y-n._center.y)}()?1:-1},t}(),C=(t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)},function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}),y=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return C(n,t),n.prototype.startAnimate=function(){},n.prototype.stopAnimate=function(){},n.prototype.handleMouseMove=function(t){},n.prototype.draw=function(t,n){for(var o=d.colorGeneratorFromPalette(e.getState("palette","green")),r=500,i=Math.ceil(t/r),a=Math.ceil(n/r),s=0;s<i;s++)for(var c=0;c<a;c++){var l=r*s,A=r*c,u=o.next(),p=4;if((y=Math.random())>.66?p=5:y>.33&&(p=6),!(Math.random()>.8)){var h=new g(f.randomPoints2Of(l,A,r,p),u.value);this.drawPolygon(h)}}var C=200;for(i=Math.ceil(t/C),a=Math.ceil(n/C),s=0;s<i;s++)for(c=0;c<a;c++){var y;l=C*s,A=C*c,u=o.next(),p=4,(y=Math.random())>.66?p=5:y>.33&&(p=6),Math.random()>.8||(h=new g(f.randomPoints2Of(l,A,C,p),u.value),this.drawPolygon(h))}},n}(h),m=function(){function t(t,e,n){this._center=t,this._radius=e,this._color=n}return Object.defineProperty(t.prototype,"center",{get:function(){return this._center},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"radius",{get:function(){return this._radius},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"color",{get:function(){return this._color},enumerable:!1,configurable:!0}),t.prototype.isContaining=function(t){return this.center.dist(t)<this.radius},t}(),b=function(){function t(){}return t.range=function(t,e){return Array.from({length:e-t+1},(function(e,n){return n+t}))},t}(),v=function(){function t(t,e){t.hasIndex&&e.hasIndex?t.keyIndex<e.keyIndex?(this._start=t,this._end=e):(this._start=e,this._end=t):t.x<=e.x?(this._start=t,this._end=e):(this._start=e,this._end=t)}return Object.defineProperty(t.prototype,"start",{get:function(){return this._start},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"end",{get:function(){return this._end},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.start.key+"/"+this.end.key},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"keyIndex",{get:function(){return this.start.keyIndex+"-"+this.end.keyIndex},enumerable:!1,configurable:!0}),t.prototype.equals=function(t){return this._start.equals(t._start)&&this._end.equals(t._end)||this._start.equals(t._end)&&this._end.equals(t._start)},t}(),x=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),w=function(t){function e(e,n){if(3!=e.length)throw Error("Triangle must have 3 points");return t.call(this,e,n)||this}return x(e,t),Object.defineProperty(e.prototype,"area",{get:function(){return this._area||(this._area=Math.abs(.5*(this.points[0].x*(this.points[1].y-this.points[2].y)+this.points[1].x*(this.points[2].y-this.points[0].y)+this.points[2].x*(this.points[0].y-this.points[1].y)))),this._area},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"edges",{get:function(){return this._edges||(this._edges=[],this._edges.push(new v(this.points[0],this.points[1])),this._edges.push(new v(this.points[1],this.points[2])),this._edges.push(new v(this.points[2],this.points[0]))),this._edges},enumerable:!1,configurable:!0}),e.prototype.getCircumcircle=function(){if(!this._circumcircle){var t=this.points[0].x,e=this.points[0].y,n=this.points[1].x,o=this.points[1].y,r=this.points[2].x,i=this.points[2].y,a=Math.pow(t,2),s=Math.pow(n,2),c=Math.pow(r,2),l=Math.pow(e,2),A=Math.pow(o,2),u=Math.pow(i,2),p=2*((n-t)*(i-e)-(o-e)*(r-t)),d=((i-e)*(s-a+A-l)+(e-o)*(c-a+u-l))/p,h=((t-r)*(s-a+A-l)+(n-t)*(c-a+u-l))/p,g=Math.sqrt(Math.pow(t-d,2)+Math.pow(e-h,2));this._circumcircle=new m(new f(d,h),g,"white")}return this._circumcircle},e}(g),k=function(){function t(){}return t.incrementAndGet=function(){return void 0===this._index&&(this._index=0),this._index++},t.reset=function(){this._index=0},t}(),_=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),E=function(t){function n(e){var n=t.call(this,e)||this;return n.activeTriangle=new Array(2),n}return _(n,t),n.prototype.draw=function(t,n){var i=this;this.points=[];var a=Math.ceil(t/500),c=Math.ceil(n/500);k.reset();for(var l=0;l<a+1;l++)for(var A=0;A<c+1;A++)this.points.push(new f(t/a*l,n/c*A,k.incrementAndGet()));var u=e.getState(r)-1;b.range(0,u).forEach((function(e,o){i.points.push(new f(Math.random()*t,Math.random()*n,k.incrementAndGet()))}));var p=Math.sqrt(t*t+n*n)/2,h=new f(t/2,n/2);this.drawCircle(new m(h,p,"rgba(1, 1, 1, 0)"));var g=new f(h.x-Math.sqrt(3)*p,h.y-p,k.incrementAndGet()),C=new f(h.x+Math.sqrt(3)*p,h.y-p,k.incrementAndGet()),y=new f(h.x,h.y+2*p,k.incrementAndGet()),v=new w([g,C,y],"pink"),x=d.colorGeneratorFromPalette(e.getState(o,"green"));x.next();var _=[v];for(this.points.forEach((function(t,e){var n=[];_.forEach((function(e,o){e.getCircumcircle().isContaining(t)&&(n=n.concat(e.edges),delete _[o])})),n.map((function(t,e){for(var o=0;o<n.length;o++)if(e!=o&&t.equals(n[o]))return null;return t})).filter((function(t){return t})).forEach((function(e){_.push(new w([e.start,e.end,t],x.next().value))}))})),this.triangles=_.filter((function(t){return t})),this.triangleAreas=this.triangles.map((function(t){return t.area})).sort((function(t,e){return t-e})),this.triangleAreaMedian=this.triangleAreas[Math.floor(this.triangleAreas.length/2)],this.buildEdgeMap(),this.visitMap={},l=0;l<this.triangles.length;l++){var E=this.triangles[l];this.visitMap[E.keyIndex]||this.makeCamouflage(E,x.next().value,e.getState(s))}},n.prototype.makeCamouflage=function(t,e,n,o){var r=this;if(void 0===o&&(o=null),o=o||n,t.color=e,this.visitMap[t.keyIndex]=e,0!=n){var i=n===o,a=[];t.edges.forEach((function(s,c){var l=r.edgeMap[s.keyIndex].filter((function(e){return!e.equals(t)}))[0];l&&a.push(l),l&&!r.visitMap[l.keyIndex]&&(i=!1,(l.area<5e3||Math.random()<n/o)&&r.makeCamouflage(l,e,n-1,o))})),i?0==a.length?console.error("Failed to find adjacentTriangle"):(t.color=this.visitMap[a[0].keyIndex],this.drawPolygon(t,t.color,t.color)):this.drawPolygon(t,e)}else this.drawPolygon(t,e)},n.prototype.startAnimate=function(){this.interval=setInterval(this.animate.bind(this),50)},n.prototype.stopAnimate=function(){clearInterval(this.interval)},n.prototype.animate=function(){var t=this;this.points.forEach((function(e,n){t.points[n].x+=4*(Math.random()-.5),t.points[n].y+=4*(Math.random()-.5)})),this.triangles.forEach((function(e){t.isActiveTriangle(e)?t.drawPolygon(e,"red"):t.adjacentPolygons&&t.adjacentPolygons[e.keyIndex]?t.drawPolygon(e,"blue"):t.drawPolygon(e)}))},n.prototype.handleMouseMove=function(t){var n=this;e.getState(c)&&(this.triangles.forEach((function(o){o.isContaining(t)&&e.getState(c)?(n.updateActiveTriangle(o),n.drawPolygon(o,"red")):n.drawPolygon(o)})),Object.keys(this.adjacentPolygons).forEach((function(t){n.drawPolygon(n.adjacentPolygons[t],"blue")})))},n.prototype.buildEdgeMap=function(){var t=this;this.edgeMap={},this.triangles.forEach((function(e){e.edges.forEach((function(n){void 0===t.edgeMap[n.keyIndex]&&(t.edgeMap[n.keyIndex]=[]),t.edgeMap[n.keyIndex].push(e)})),t.drawPolygon(e)}))},n.prototype.updateActiveTriangle=function(t){var e=this;if(!this.isActiveTriangle(t)){this.activeTriangle[1]=this.activeTriangle[0],this.activeTriangle[0]=t,this.adjacentPolygons={};for(var n=0;n<t.edges.length;n++){var o=this.edgeMap[t.edges[n].keyIndex];o&&o.length>1&&o.forEach((function(n){n.equals(t)||(e.adjacentPolygons[n.keyIndex]=n)}))}}},n.prototype.isActiveTriangle=function(t){return this.activeTriangle[0]&&this.activeTriangle[0].equals(t)},n}(h),B=function(){function t(t){void 0===t&&(t="#6C7C52"),this._baseCol=t,this.canvas=document.getElementById("canvas"),this.ctx=this.canvas.getContext("2d"),this.logics={m90p1:new y(this.ctx),m90p2:new E(this.ctx)},window.onresize=this.redrawHandler.bind(this),e.registerCallback(this.redrawHandler.bind(this)),this.redrawHandler(null,null,null)}return t.prototype.reDraw=function(){this.ctx.fillStyle=d.getBaseColorFromPalette(e.getState(o)),this.ctx.fillRect(0,0,this.width,this.height),this.draw()},t.prototype.redrawHandler=function(t,n,r){var s=this.logics[e.getState("pattern")];n===i?r?s.startAnimate():s.stopAnimate():n===a?s.handleMouseMove(r):n===c||n===l||(this.width=document.documentElement.clientWidth,this.height=document.documentElement.clientHeight,this.canvas.setAttribute("width",this.width.toString()),this.canvas.setAttribute("height",this.height.toString()),this.ctx.fillStyle=d.getBaseColorFromPalette(e.getState(o)),this.ctx.fillRect(0,0,this.width,this.height),this.draw())},t.prototype.draw=function(){this.logics[e.getState("pattern")].draw(this.width,this.height)},t}(),P=n(379),S=n.n(P),M=n(539);S()(M.Z,{insert:"head",singleton:!1}),M.Z.locals;var I=function(){function t(){this._state={}}return t.prototype.getState=function(t){return this._state[t]},t.prototype.setState=function(t,e,n){void 0===n&&(n=!0),this._state[t]=e,n&&this.render()},t}(),O=function(){var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(e,n)};return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function o(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),F=function(t){function n(){var e=t.call(this)||this;return e.templateSrc='\n<div>\n<label class="radio">\n    <input name="color-palette" type="radio" value="">\n    <span class="outside"><span class="inside"></span></span>\n    <span class="palette-name"></span>\n</label>\n<div class="trash-button"><i class="far fa-trash-alt"></i></div>\n<div style="clear: both;"></div>\n</div>\n',e.template=document.createElement("template"),e.paletteList=document.getElementById("color-palette-list"),e.template.innerHTML=e.templateSrc.trim(),e.setState("default-palette",d.getDefaultPalettes(),!1),e.setState("user-palette",d.getUserPalettes()),A.register(u,e.reloadUserPalettes.bind(e)),e}return O(n,t),n.prototype.reloadUserPalettes=function(){this.setState("user-palette",d.getUserPalettes());var t=this.render();this.paletteList.replaceChild(t,this.paletteList.firstChild)},n.prototype.renderTemplate=function(t,n){void 0===n&&(n=!1);var r=this.template.content.cloneNode(!0),i=r.querySelector("input[type=radio]");return i.value=t.id,i.onclick=function(t){var n=t.target;e.getState(o)!=n.value&&e.setState(o,n.value)},r.querySelector(".palette-name").textContent=t.name,n?(r.querySelector(".trash-button").setAttribute("key",t.id),r.querySelector(".trash-button").onmousedown=function(t){var e=t.target.parentElement.getAttribute("key");window.confirm("Delete "+e+"?")&&d.deleteUserPalette(e)}):r.querySelector(".trash-button").remove(),[r,i]},n.prototype.render=function(){var t=this,n=document.createElement("div"),r=this.getState("default-palette"),i=e.getState(o);console.log("CP:",i);var a=!0;if(!r)throw Error("Failed to get color palette properly");return r.forEach((function(e){var o=t.renderTemplate(e),r=o[0],s=o[1];a?(i||(s.checked=a),a=!1):s.checked=s.value===i,n.appendChild(r)})),this.getState("user-palette").forEach((function(e){var o=t.renderTemplate(e,!0),r=o[0],a=o[1];a.checked=a.value===i,n.appendChild(r)})),n},n}(I),j=function(){function t(){this.colorPaletteComponent=new F}return t.prototype.initialize=function(){var t=document.getElementById("color-palette-list"),n=this.colorPaletteComponent.render();t.appendChild(n),document.getElementById("add-color").onmousedown=function(t){d.setUserPalette(new p("test","Test",["#FF0000","#00FF00","#0000FF"]))};var A=document.getElementById("canvas");document.getElementById("download").onclick=function(){var t=document.createElement("a");document.body.appendChild(t),t.setAttribute("download","camo-pattern.png"),t.setAttribute("href",A.toDataURL("image/png").replace("image/png","image/octet-stream")),t.click(),document.body.removeChild(t)},document.getElementById("refresh").onclick=function(){w.reDraw()};var u=document.getElementById("controls-values");e.setState("pattern",u["camo-pattern"].value),e.setState(o,u["color-palette"].value),e.setState(r,u["num-points"].value),e.setState(s,u["camo-depth"].value),e.setState(i,!1),e.setState(c,!1),e.setState(l,!0);var h=document.querySelector("#camo-pattern input[name=num-points]"),g=document.getElementById("num-points-val");h.onchange=function(t){g.textContent=h.value,e.getState(r)!=h.value&&e.setState(r,h.value)};var C=document.querySelector("#camo-pattern input[name=camo-depth]"),y=document.getElementById("camo-depth-val");C.onchange=function(t){y.textContent=C.value,e.getState(s)!=C.value&&e.setState(s,C.value)},document.getElementById("start-animate").onclick=function(t){!0!==e.getState(i)&&e.setState(i,!0)},document.getElementById("stop-animate").onclick=function(t){!1!==e.getState(i)&&e.setState(i,!1)},document.querySelectorAll("#color-palette input[type=radio]").forEach((function(t){t.onclick=function(){e.getState(o)!=t.value&&e.setState(o,t.value)}})),window.onmousemove=function(t){e.getState(a)&&e.getState(a).equals(f.of(t.clientX,t.clientY))||e.setState(a,f.of(t.clientX,t.clientY))},document.getElementById("tap-to-refresh").ontouchend=function(){w.reDraw(),e.setState(c,!1)};var m=document.getElementById("camo-control-panel"),b=document.getElementById("open-settings"),v=document.getElementById("open-settings-on"),x=document.getElementById("open-settings-off");b.ontouchend=function(){m.classList.toggle("activated"),v.classList.toggle("fade-out"),x.classList.toggle("fade-out")},window.onkeydown=function(t){if("m"===t.key)e.flipState(c);else if("c"===t.key){var n=e.flipState(l);document.getElementById("camo-control-panel").style.display=n?"block":"none"}else"r"===t.key?w.reDraw():"a"===t.key&&e.flipState(i)};var w=new B},t}();window.onload=function(){(new j).initialize()}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,